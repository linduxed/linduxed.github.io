<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Rants of a geek]]></title>
  <link href="http://linduxed.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://linduxed.github.io/"/>
  <updated>2014-09-05T13:49:52+02:00</updated>
  <id>http://linduxed.github.io/</id>
  <author>
    <name><![CDATA[linduxed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring your Awesome 3.x install]]></title>
    <link href="http://linduxed.github.io/blog/2009/06/15/configuring-your-awesome-3-dot-x-install/"/>
    <updated>2009-06-15T02:59:35+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/06/15/configuring-your-awesome-3-dot-x-install</id>
    <content type="html"><![CDATA[<p>After posting my guide on installing Awesome 3.x I got the inevitable question
of how to actually configure it. This WM is not for the faint of heart.<br/>
On the other hand it does offer a lot of customization, should you know the lua
programming language. I for one don&rsquo;t, but that didn&rsquo;t stop me from tweaking
the defaults, and for most people that will be enough to get them started.</p>

<!--more-->


<p>As soon as one starts to see the possibilities offered by Awesome, very soon
the <code>#awesome@irc.oftc.net</code> channel will have a new visitor.</p>

<h2>Startup applications</h2>

<p>The first thing to adjust is to get your startup applications going. I&rsquo;m using
Ubuntu right now, so the locations of the files will vary from distro to distro,
but the content that I will outline will not.<br/>
The thing to look up is the <code>xsession</code> file that that your desktop manager uses
to execute <code>awesome</code> after login. For me the file lies here:</p>

<pre><code>/usr/share/xsessions/awesome.desktop
</code></pre>

<p>This file looked like this in it&rsquo;s original state for me:</p>

<p><code>
[Desktop Entry]
Encoding=UTF-8
Name=awesome
Comment=Highly configurable framework window manager
TryExec=awesome
Exec=awesome
</code></p>

<p>For configuration purposes, I changed this to the following:</p>

<p><code>
[Desktop Entry]
Encoding=UTF-8
Name=Awesome
Comment=Starts Awesome 3
Exec=/usr/share/xsessions/awesome_fixed.sh
Type=Application
</code></p>

<p>The main change is that that the <code>awesome_fixed.sh</code> file is run instead of
<code>awesome.</code> You can call the <code>awesome_fixed.sh</code> file anything, but do end it with
a <code>.sh</code> suffix.</p>

<p>You will now need to create the mentioned file and fill it with the wished for
applications:</p>

<pre><code>sudo vim /usr/share/xsessions/awesome_fixed.sh
</code></pre>

<p>My file currently looks like this:</p>

<p>```sh</p>

<h1>!/bin/bash</h1>

<h1>Colemak necessities.</h1>

<p>xset r 66 &amp;
xmodmap -e &ldquo;remove Lock = Caps_Lock&rdquo; &amp;</p>

<p>gnome-settings-daemon &amp;</p>

<h1>Wallpaper switching.</h1>

<p>habak -ms -hi /home/linduxed/Pictures/wallpapers/ &amp;</p>

<h1>Tray apps.</h1>

<p>nm-applet &amp;
gnome-power-manager &amp;
update-notifier &amp;
gnome-do &amp;</p>

<h1>alarm-clock &amp;</h1>

<h1>blueproximity &amp;</h1>

<p>exec /usr/bin/awesome
```</p>

<p>Note that all entries before the exec line need to be marked as background
processes with an ampersand (<code>&amp;</code>).</p>

<h2>Configuring the WM</h2>

<p>Most configuration of the WM itself (and also all that I have ever touched) is
done in the central <code>rc.lua</code> file:</p>

<pre><code>sudo vim /etc/xdg/awesome/rc.lua
</code></pre>

<p>Here you will be presented with a long file that basically decides how Awesome
will behave. There are tons of lines to configure, but the defaults are really
good so we&rsquo;ll focus on the critical ones to tweak.</p>

<p>At the time of writing my configuration file looks like <a href="https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua">this</a>
(<strong>EDIT</strong>: old file no longer available, this is most likely not far off). It&rsquo;s
designed for a colemak keyboard layout.</p>

<h3>The tweaks</h3>

<p>There are bunch of tweaks that you figure out on your own, thanks to the
included comments above various configuration options, so I&rsquo;ll just mention
a couple of the changes. The following pieces of code are mostly excerpts from
larger blocks of code:</p>

<p><code>lua Floating https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L319-L320 start:319
{ rule = { class = "MPlayer" },
  properties = { floating = true } },
</code></p>

<p>Lines like these force applications to float, or (if you&rsquo;d need it) the
opposite. One thing to always remember is to have all except the last line in
a list be ended with a comma, otherwise Awesome will not start at all.</p>

<p><code>lua Desktop auto-tagging https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L327-L330 start:327
{ rule = { class = "Thunderbird" },
  properties = { tag = tags[1][8] } },
{ rule = { role = "ncmpcpp" },
  properties = { tag = tags[1][9] } },
</code></p>

<p>If you&rsquo;ve got an application that you always start and then move to a specific
desktop (or &ldquo;give it a tag&rdquo; as it&rsquo;s called in Awesome) then this section is for
you. Just as in the float-apps section, remember the commas!</p>

<p>Next up are the key bindings. I like to keep every thing centered around
a arrow-key-layout, so the most frequently used commands will be on the
QWERTY-layout keys JKLI, a bit less used ones on YHUO so that everything is
close.</p>

<p><code>lua Cycle between desktops https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L171-L172 start:171
awful.key({ modkey, }, "l", awful.tag.viewprev ),
awful.key({ modkey, }, "y", awful.tag.viewnext ),
</code></p>

<p>```lua Cycle between windows <a href="https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L175-L184">https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L175-L184</a> start:175
awful.key({ modkey, }, &ldquo;i&rdquo;,</p>

<pre><code>function ()
    awful.client.focus.byidx( 1)
    if client.focus then client.focus:raise() end
end),
</code></pre>

<p>awful.key({ modkey, }, &ldquo;n&rdquo;,</p>

<pre><code>function ()
    awful.client.focus.byidx(-1)
    if client.focus then client.focus:raise() end
end),
</code></pre>

<p>```</p>

<p><code>lua Move the windows around https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L189-L190 start:189
awful.key({ modkey, "Shift" }, "i", function () awful.client.swap.byidx( 1) end),
awful.key({ modkey, "Shift" }, "n", function () awful.client.swap.byidx( -1) end),
</code></p>

<p><code>lua Switch which screen is focused https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L191-L192 start:191
awful.key({ modkey, "Control" }, "i", function () awful.screen.focus_relative( 1) end),
awful.key({ modkey, "Control" }, "n", function () awful.screen.focus_relative(-1) end),
</code></p>

<p><code>lua Jump to client with urgent-flag https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L186 start:186
awful.key({ modkey,  }, "u", awful.client.urgent.jumpto),
</code></p>

<p>Some applications can send urgent-flags (IMs for instance), this jumps to them
(regardless of what tag is currently up).</p>

<p><code>lua Move delimiter https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L206-L207 start:206
awful.key({ modkey, }, "u", function () awful.tag.incmwfact( 0.05) end),
awful.key({ modkey, }, "e", function () awful.tag.incmwfact(-0.05) end),
</code></p>

<p>In a lot of its layouts, Awesome splits the desktop into two halves, with
a delimiter in the middle. Make sure to place this on easily accessible keys,
because it&rsquo;s often used.</p>

<p><code>lua Adjust window count https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L208-L209 start:208
awful.key({ modkey, "Shift" }, "u", function () awful.tag.incnmaster( 1) end),
awful.key({ modkey, "Shift" }, "e", function () awful.tag.incnmaster(-1) end),
</code></p>

<p>Where in the previous snippet we moved the delimiter, this adjusts the amount
of windows on the main side of the delimiter. Hard to explain, easy to grasp
once you use it. Keep this easily accessible too.</p>

<p><code>lua Adjust column count https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L210-L211 start:210
awful.key({ modkey, "Control" }, "u", function () awful.tag.incncol( 1) end),
awful.key({ modkey, "Control" }, "e", function () awful.tag.incncol(-1) end),
</code></p>

<p>Same as previous, but increases/decreases amount of columns (that&rsquo;s what the
config file calls them) on the secondary side of the delimiter. Again, try it
out to understand what I&rsquo;m talking about.</p>

<p><code>lua Fullscreen https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L228 start:228
awful.key({ modkey, }, "f", function (c) c.fullscreen = not c.fullscreen end),
</code></p>

<p><code>lua Kill application https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L229 start:229
awful.key({ modkey, }, "`", function (c) c:kill() end),
</code></p>

<h2>Conclusion</h2>

<p>So those are the basics. I will most likely post follow-ups on this HOWTO when
I find some new tricks that make using Awesome even better. I&rsquo;ve barely
scratched the surface, so if someone has some hacks that they&rsquo;d like to share
I&rsquo;d be glad to post them here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Awesome 3.x in Ubuntu 9.04]]></title>
    <link href="http://linduxed.github.io/blog/2009/05/25/getting-awesome-3-dot-x-in-ubuntu-9-dot-04/"/>
    <updated>2009-05-25T17:19:06+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/05/25/getting-awesome-3-dot-x-in-ubuntu-9-dot-04</id>
    <content type="html"><![CDATA[<p>Awesome is awesome. That simple. The 3.x series introduced a tray which removed
all hesitation and made Awesome the WM of choice for me. Unfortunately for
Ubuntu users (which for the time being includes me) the official repositories
are quite outdated:</p>

<!--more-->


<p><blockquote><p>&hellip;</p></p><p><p>In contrast to pre-release versions, official releases of Ubuntu are subject to<br/>much wider use, and by a different demographic of user. During development,<br/>changes to the distribution primarily affect developers, early adopters and<br/>other advanced users, all of whom have elected to use pre-release software at<br/>their own risk.</p></p><p><p>Users of the official release, in contrast, expect a high degree of stability.<br/>They use their Ubuntu system for their day-to-day work, and problems they<br/>experience with it can be extremely disruptive. Many of them are less<br/>experienced with Ubuntu and with Linux, and expect a reliable system which does<br/>not require their intervention.</p></p><p><p>&hellip;</p><footer><strong>Ubuntu package policy <a href="http://wiki.ubuntu.com/StableReleaseUpdates">http://wiki.ubuntu.com/StableReleaseUpdates</a></strong></footer></blockquote></p>

<p>That in other words means that anyone suggesting the introduction of new
versions of existing packages has to pass the hurdle of &ldquo;is this a stability
release or a feature release?&rdquo;. This is why the 3.x series, though superior in
most ways to 2.x, will wait until Karmic Koala before it will be incorporated
into Ubuntu&rsquo;s repositories.</p>

<p>With that said, there are two ways of getting Awesome 3.x installed onto
Jaunty. The first one is using a PPA and the other one is compiling from
source.</p>

<h2>Using a PPA</h2>

<p>This is the easiest method, because not only does it eliminate the search for
dependencies but it is also a method that is tested to work with Jaunty (to the
extent of the PPA maintainers ability of course).</p>

<p>To install from the PPA you must first add it. The PPA we&rsquo;re going to use
belongs to <a href="https://launchpad.net/~aguignard/+archive/ppa">Arnaud Guignard and lies here</a>. If you have never added a PPA
then <a href="http://www.youtube.com/watch?v=UUZOQsNo_ws">this YouTube video</a> will
explain how to do it quite thoroughly; written instructions can be found
<a href="http://help.launchpad.net/Packaging/PPA#Adding%20a%20PPA%20to%20your%20Ubuntu%20repositories">here</a>.</p>

<p>After adding the repository, simply type the following command:</p>

<pre><code>sudo aptitude install awesome
</code></pre>

<p>This should get you at the time of writing the <code>3.2.1-1~ppa1</code> version of
Awesome. All you need to do is log out and choose Awesome as the session to use
in in your desktop manager (<code>gdm</code>, <code>kdm</code> or whatever you use).</p>

<h2>Compiling from git</h2>

<p>This method I personally don&rsquo;t recommend, simply because using the PPA is so
much easier and it should work flawlessly. With that said, I suspect that most
people who use Awesome in Ubuntu compile it to get the latest
version, so it&rsquo;s by no means a bad way to do it.</p>

<p>A thing to take note of is that this will most likely screw up your package
manager, because we might be overwriting packages and at times installing
packages that are newer than the ones in the repositories. If at some point you
install some package that overwrite your manually installed files, tough, you
should have used the PPA.</p>

<p>With that out of the way, the instructions I used to install the latest
checkout are located on the <a href="http://ubuntuforums.org/showthread.php?t=960841">Ubuntu forums</a>, it&rsquo;s basically a step by step guide.</p>

<p>The only thing I&rsquo;d like to add is that there is a nice way of remedying at
least some of the problems associated with compiling and doing <code>sudo make
install</code>, and it&rsquo;s the marvelous utility called <code>checkinstall.</code> First you need
to run the following command to obtain it:</p>

<pre><code>sudo aptitude install checkinstall
</code></pre>

<p>After that, whenever the you are asked to do the classic <code>./configure &amp;&amp; make
&amp;&amp; sudo make install</code>, substitute the <code>sudo make install</code> with <code>sudo
checkinstall</code>.</p>

<p>This will instead of dropping files outside of the package manager, build
a <code>.deb</code> that can then be installed (thus eliminating some problems). This
doesn&rsquo;t always work (for reasons I can&rsquo;t explain) but it is a wholesome way of
installing when it does. A more detailed guide to <code>checkinstall</code> can be found
<a href="http://help.ubuntu.com/community/CheckInstall">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sound in Ubuntu 9.04 on Acer Aspire 8930g]]></title>
    <link href="http://linduxed.github.io/blog/2009/05/24/sound-in-ubuntu-9-dot-04-on-acer-aspire-8930g/"/>
    <updated>2009-05-24T18:56:20+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/05/24/sound-in-ubuntu-9-dot-04-on-acer-aspire-8930g</id>
    <content type="html"><![CDATA[<p>The Acer Aspire 8930g has got a sound card that has not only been unsupported
in GNU/Linux for a long time, it has also (to this day) never been a case of
having the card work out of the box in any distro.</p>

<p>It&rsquo;s basically a &ldquo;Intel HD Audio Controller&rdquo; and uses the ALC889 codec. Support
for this card was, according to the alsa-project.org mailing lists,
incorporated in the 1.0.16 driver, receiving updates every version since.</p>

<!--more-->


<p>I&rsquo;ve experimented with various driver versions and so far I can only conclude
the following:</p>

<ul>
<li>The <code>alsa-1.0.18</code> driver is the first one to show any signs of working, let
alone properly.</li>
<li>Of the ones I&rsquo;ve tried only <code>1.0.19</code> has managed to auto configure properly.</li>
</ul>


<p>Since ALC889 is universally seen as a problematic codec, don&rsquo;t expect anything.
If any one of these methods work, rejoice, if they don&rsquo;t I can&rsquo;t say I&rsquo;m
surprised.</p>

<h2>Different methods of installing</h2>

<p>The first thing you need to do is to make sure you have the ALC889 codec:</p>

<pre><code>cat /proc/asound/card*/codec\#* | grep -i codec
</code></pre>

<p>If it&rsquo;s the correct codec it should return something like <code>Codec: Realtek ALC889</code>.
From here there are three four methods to get sound, three of which I&rsquo;ve tried myself.
After each one, the following <a href="http://www.lynnepublishing.com/surround/www_lynnemusic_com_surround_test.ac3">surround sound testing audio file</a>
can be used to check the result.</p>

<h3>First method: Editing the modprobe.d configuration</h3>

<p>Make sure you have the latest stable alsa-base package, that is
1.0.18.dfsg-1ubuntu8. This should be installed with Jaunty, but to check type
the following:</p>

<pre><code>aptitude show alsa-base
</code></pre>

<p>This should return (amongst other information) the correct version number. If
not, run the following:</p>

<pre><code>sudo aptitude safe-upgrade
</code></pre>

<p>This should get you the latest stable (provided you have the main repository
enabled). With that fixed, you should edit /etc/modprobe.d/alsa-base:</p>

<pre><code>sudo vim /etc/modprobe.d/alsa-base.conf
</code></pre>

<p>If you don&rsquo;t use Vim, do. In absolute emergency <code>nano</code> may be used.
Add this to the end of the file:</p>

<p><code>
alias snd-card-0 snd-hda-intel
options snd-hda-intel model=auto
</code></p>

<p>A reboot should now be sufficient, if this method works for you that is.
Remember to go into <code>alsamixer</code> to unmute and pull up all the different
sliders.</p>

<p>As a footnote I might add that this gave me splendid sound on the left, right
and center channels. This setup is most likely enough for most people, but my
laptop is a 5.1 Dolby so I don&rsquo;t get the full experience. Currently, this is no
problem for me, but I know some will find this suboptimal, if this is the case,
move to the third method.</p>

<h3>Second method: Using the ALSA Upgrade Script</h3>

<p>This method helped me get sound when it didn&rsquo;t work in Intrepid, in Jaunty this
didn&rsquo;t work for me.</p>

<p>Basically this method comes down to using a script that downloads, compiles and
installs the latest ALSA driver (at the point of writing, version <code>1.0.20</code>).<br/>
The method has no prerequisites with regards to the installed driver, because
of the fact that it compiles and installs the old fashioned way. This also
means that the script will screw up your package manager when it comes to the
ALSA packages. Versions, dependencies and all that stuff will be configured
&ldquo;outside of the system&rdquo;.</p>

<p>Basically, if it works then you won&rsquo;t want to upgrade anything through the
package manager; if it doesn&rsquo;t work the script comes with an inbuilt feature
that reverts to whatever the system looked like before installing with it. So
if you don&rsquo;t get sound after installing with this method, uninstall.</p>

<p>The script and much more thorough instructions can be found in the
<a href="http://ubuntuforums.org/showthread.php?t=1046137">thread created by soundcheck</a>.</p>

<h3>Third method: Compiling the official Realtek Driver</h3>

<p>This method I have not tried in Jaunty, so I can&rsquo;t speak from my own
experience. It has no prerequisites with regards to installed drivers and
according some googling, this method should provide the full Dolby 5.1,
including the Tuba subwoofer.<br/>
It comes down to using the official Realtek drivers found
<a href="http://www.realtek.com.tw/downloads/downloadsView.aspx?Langid=1&amp;PNid=24&amp;PFid=24&amp;Level=4&amp;Conn=3&amp;DownTypeID=3&amp;GetDown=false">here</a>
(check the &ldquo;accept box&rdquo;, press next, and download the Linux driver on the
bottom). When the driver is downloaded and extracted, there are according to
<a href="http://bugs.launchpad.net/ubuntu/+bug/218165">this bugreport</a> two ways of
installing.</p>

<p>The first one is basically to open the Readme.txt file and follow the Ubuntu
instructions step-by-step.</p>

<p>The second one is to opt for what in the Readme.txt file is described as
&ldquo;recommended for Redhat and RH-derivative distributions&rdquo;. <code>cd</code> into the extracted
directory and type:</p>

<pre><code>sudo ./install
</code></pre>

<p>After completing the process, reboot, and subsequently type:</p>

<pre><code>sudo alsaconf
</code></pre>

<p>The only thing to do after this should be to adjust the settings in the
<code>alsamixer</code>, where after sound should be enabled on all speakers. As stated
above, I can&rsquo;t confirm this.</p>

<h3>Fourth method: The hda-verb utility</h3>

<p>This method I see as a last resort because it results in a low volume, mono
sound, coming from only the right and left speaker. You will also have no
access to the headphone jack, nor will the microphone work.</p>

<p>I have no idea what the prerequisites are, but since you&rsquo;ve installed ALSA two
to three times by now if you&rsquo;re at this stage, I&rsquo;d guess you have all that&rsquo;s
needed on your system. Last time I tried this method I used Arch Linux so
I can&rsquo;t confirm it will work on Jaunty.</p>

<p>Download and extract <code>hda-verb-0.3.tar.gz</code>:</p>

<pre><code>wget ftp://ftp.suse.com/pub/people/tiwai/misc/hda-verb-0.3.tar.gz
tar xzvf hda-verb-0.3.tar.gz
</code></pre>

<p><code>cd</code> into the directory and run the following:</p>

<pre><code>./hda-verb /dev/snd/hwC0D0 0x15 SET_EAPD_BTLENABLE 2
</code></pre>

<p>You might need <code>sudo</code> for that command to work. That should, after some
<code>alsamixer</code> adjustments, result in the above mentioned sub-par sound.</p>

<p>To make this occur on every boot you&rsquo;d need to copy the <code>hda-verb</code> application
to <code>/usr/local/bin</code> and insert the following line on the bottom of
<code>/etc/rc.local</code> (but before the <code>exit 0</code> line):</p>

<p><code>
/usr/local/bin/hda-verb /dev/snd/hwC0D0 0x15 SET_EAPD_BTLENABLE 2
</code></p>

<p>This automation didn&rsquo;t work for me though, and at times the device <code>hwC0D0</code>
disappeared, making the command ineffective, forcing me to reboot if I wanted
sound.</p>

<h2>Concluding</h2>

<p>By now the ALC889 has been around for a while and solutions for this codec
have become easier and easier, hopefully the guys at ALSA will soon have it
auto configure all the speakers for everyone using this laptop. If none of
these methods work for you I encourage you to google the problem, the Intel HD
Audio cards are being pushed into more and more computers, so solutions should
be aplenty.</p>
]]></content>
  </entry>
  
</feed>
