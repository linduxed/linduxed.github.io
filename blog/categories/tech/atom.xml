<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Rants of a geek]]></title>
  <link href="http://linduxed.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://linduxed.github.io/"/>
  <updated>2014-07-25T06:31:41+02:00</updated>
  <id>http://linduxed.github.io/</id>
  <author>
    <name><![CDATA[linduxed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The state of RMagick development]]></title>
    <link href="http://linduxed.github.io/blog/2014/07/25/the-state-of-rmagick-development/"/>
    <updated>2014-07-25T04:40:18+02:00</updated>
    <id>http://linduxed.github.io/blog/2014/07/25/the-state-of-rmagick-development</id>
    <content type="html"><![CDATA[<p>Yesterday <a href="https://github.com/rmagick/rmagick/issues/18#issuecomment-50022523">someone got fed up</a> with the situation that the RMagick gem is in and forked the project.</p>

<p>Neither <a href="https://github.com/rmagick/rmagick/network">is this the first time</a>, nor do I know if this fork will help the project at large, but I think it&rsquo;s time people got to know what&rsquo;s going on with the project.</p>

<p>All of which I&rsquo;m going to write might be obvious, old news or stuff people already knew in one way or another, but here it is anyway.
Here&rsquo;s some backstory that might answer the following question:</p>

<p><em>&ldquo;What&rsquo;s going on with RMagick?&rdquo;</em></p>

<p>Or rather&hellip;</p>

<p><em>&ldquo;Why is <strong>nothing</strong> happening with RMagick?&rdquo;</em></p>

<!--more-->


<h4>TL;DR</h4>

<p>RMagick isn&rsquo;t going to go anywhere until a fork takes off, because the sole maintainer doesn&rsquo;t seem to be likely to do anything.</p>

<h2>Some talk with the maintainer</h2>

<p>In early September I joined a company that used RMagick for one of their projects.
As an Archlinux user, I quickly got to join the crowd who <a href="https://github.com/rmagick/rmagick/issues/18">had a certain problem with the gem</a>.</p>

<p>Nothing really happened with the issue and people were already making their own solutions to the problem, so after a while I got fed up with the situation and sent an email to the main/only maintainer, <a href="https://github.com/mmaiza">@mmaiza</a>.
For @mmaiza&rsquo;s sake, I won&rsquo;t post the actual email exchange between us, but I&rsquo;ll give you the important gist of it.
My first email basically consisted off:</p>

<p><em>&ldquo;Hey, there&rsquo;s a lot of things happening on the issue tracker for the project, could we figure something out to get things going again?&rdquo;</em></p>

<p>We had some brief back-and-forth and then in early November we had a talk about the state of the project.</p>

<h3>Skype call</h3>

<p>The guy inherited a large amount of code that someone else wrote and didn&rsquo;t have the time to maintain it.
He really admired the previous guy&rsquo;s work and felt it was a shame if the project died.
On the other hand, he didn&rsquo;t want the project to move forward without assuring that a certain level of quality was maintained.</p>

<p>First of all he stressed that he had no intentions to move towards merging pull requests or fixing issues while the test suite had failing tests.
Both at the time of the conversation and now, the test suite has <em>a lot</em> of failing tests.</p>

<p>I also got the feeling (from the mail exchange and from the call) that he wasn&rsquo;t as interested in &ldquo;distributed help&rdquo; as he was in finding a successor for his position, a developer who could dedicate a lot of time to shape things up.
Neither was I qualified for such a position at the time, I felt, nor did I have the time;
I explicitly said that I was not asking for any Push access rights on the repository.</p>

<p>However, I did suggest that if he created a milestone on Github for fixing all of these tests, and in the milestone he wrote about his requirement for the tests to be green (and maybe update the README with some instructions on how to run them because that <em>does</em> take work), then maybe people would feel like helping out.</p>

<p>I was met with &ldquo;Sounds like a decent plan, we&rsquo;ll see about getting it going.&rdquo;</p>

<h2>Radio silence</h2>

<p>Two months went by and not much had happened.
The problem that originally brought me to the RMagick issue tracker <a href="https://github.com/rmagick/rmagick/pull/90">was fixed</a> and a <a href="https://github.com/rmagick/rmagick/pull/78">license file was added</a>, but a new gem version was not made, the fixes only live in the <code>master</code> branch of the project.</p>

<p>Around New Year I sent him another message.
I reminded him that there would be great benefit to following through with that idea for creating a bug squashing milestone and communicating the state of the project.
That, and making it easier to run the tests so the project could be improved easier.</p>

<p>About a week after New Year I got a short mail that boiled down to &ldquo;Yeah, we should get those tests green, I&rsquo;ll get back to you.&rdquo;</p>

<p>Unfortunately, almost seven months later, he hasn&rsquo;t.
I sent him a two more messages over that time, in one of them proposing that if he gave me Push access then I could take care of all the things for him, but I haven&rsquo;t heard from him at all since early January.</p>

<h2>Zombie application</h2>

<p>I knew full well that I didn&rsquo;t have the time to (or a whole lot of will) to fix all the failing tests and problems that this project has.
Disregarding the fact that @mmaiza considered it to be of importance that updated versions of the gem were provided on RubyForge (which has since then <a href="http://en.wikipedia.org/wiki/RubyForge#Shutting_Down">shut down</a>), I knew that if I would start a fork, people would need not only to contribute to it, but the world would need to catch on to the fact that there&rsquo;s a fork of the <code>rmagick</code> gem they need to use to get the latest and greatest.</p>

<p>I don&rsquo;t know if <a href="https://github.com/gemhome/rmagick">the fork that was just made</a> by <a href="https://github.com/bf4">@bf4</a> will gain traction or if the project will improve from here.
RMagick seems to have its detractors, with one of my developer friends summing it up as &ldquo;probably the most hated gem in the ecosystem&rdquo;.
I don&rsquo;t know if that&rsquo;s the case, and some of the enmity is probably purely caused by <a href="https://twitter.com/garybernhardt/status/224329120346144769">people&rsquo;s dislike of ImageMagick</a>.<br/>
Regardless, there&rsquo;s a lot of things that could be improved, and it&rsquo;s probably no small task to do so.</p>

<p>Salutations and good luck to those who actually attempt to fix this thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from Squarespace to Octopress]]></title>
    <link href="http://linduxed.github.io/blog/2014/07/20/moving-from-squarespace-to-octopress/"/>
    <updated>2014-07-20T13:51:13+02:00</updated>
    <id>http://linduxed.github.io/blog/2014/07/20/moving-from-squarespace-to-octopress</id>
    <content type="html"><![CDATA[<p>Squarespace had been my blogging platform of choice for numerous years.
It looked good, had good editing features and took care of a lot of stuff for you.
However, when my posting slowed down,
I started considering whether what I was using was worth the annual bill I was paying.</p>

<p>I needed something that was both cheaper and that gave me a bit more control.
I was recommended Octopress by a colleague and decided to give it a spin;
I realized very quickly that this platform was a much better fit for me.</p>

<p>These are some thoughts I&rsquo;ve gathered up on the subject, about a month after moving.</p>

<!--more-->


<h2>Squarespace, the good and the bad</h2>

<p>I got Squarespace about four years ago and the platform has since then had a major redesign,
but overall my interaction with it didn&rsquo;t change much over time.</p>

<p>There were four things about Squarespace that I very much enjoyed:</p>

<ol>
<li>A wide selection of well designed templates.
Suitable for many different styles, it made it very easy to get up and going quickly.
Additionally, there were plenty of easy ways to tweak the chosen design.</li>
<li>Easy-to-use tools for content creation.
Especially after the redesign, the platform gave you a large variety of tools to build your blog posts with.
If I wanted to create a blog post, I didn&rsquo;t just write a text document that I could embed some stuff in,
rather I&rsquo;d insert <a href="http://help.squarespace.com/guides/what-is-a-content-block">content blocks</a> to compose my document.
The interfaces were also nice and clean, which made editing pleasant.</li>
<li>The surrounding tools, provided by Squarespace, were of high quality.
Whether it was the built-in analytics tools,
the comment overview pages or the Android/iOS app they released to manage your site,
they gave me a lot of well made tools that improved all the non-writing activities.</li>
<li>The support was remarkably good.
Support tickets got handled quickly and getting help was always an enjoyable experience.</li>
</ol>


<p>There was an overall high level of quality that made it all very pleasant to use.</p>

<p>With all of that said, there were a few things which made me consider an alternative platform:</p>

<ul>
<li>It cost me money.
It&rsquo;s not like it was a cost I couldn&rsquo;t handle, but why pay for something that I could make myself easily?</li>
<li>It had <em>no</em> out-of-the-box tools for formatting code well.
This is something that kept surprising me:
there seemed to be no push towards making it easy to paste code and have it nicely rendered.<br/>
This is important if one of the primary things you write about is programming.</li>
<li>As much as Squarespace let me configure things with its interface,
it doesn&rsquo;t compare to building something on your own.<br/>
I build webapps for a living, so while it wasn&rsquo;t something that bugged me when I got Squarespace,
today not having access to the internals is something that frustrates me.</li>
</ul>


<h2>Along comes Octopress</h2>

<p>As mentioned previously, a colleague of mine recommended me to have a look at Octopress.
While I had ideas for other frameworks I could use, this one stood out to me because of the following:</p>

<ul>
<li>Free hosting on Github Pages.</li>
<li>It gives you something working right away.</li>
<li>They call it the &ldquo;hacker&rsquo;s blogging platform&rdquo; and it did look kind of exciting.</li>
<li>Static page generation from nothing but text documents? Yes, please.</li>
</ul>


<p>I decided to try it before I&rsquo;d consider going for some other alternatives and I must say I&rsquo;m very happy with my decision.</p>

<p>Octopress is based on Jekyll which is a static page generator that I&rsquo;ve heard good things about.
It&rsquo;s built in Ruby, which is a big plus for me considering it&rsquo;s my primary programming language,
and it&rsquo;s actively being developed.</p>

<h2>Setup and configuration</h2>

<p>Getting Octopress up and running locally was very straight-forward:
<code>plain Setup http://octopress.org/docs/setup/
git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle install
bundle exec rake install
</code>
This installs the default theme and let&rsquo;s you start a local server:
<code>plain
bundle exec rake preview
</code>
This fires up a local server on <code>localhost:4000</code> where you can see the site.
There&rsquo;s nothing on it at the moment, but you already have a working environment.
Almost all the non-styling related configuration is done <a href="https://github.com/imathis/octopress/blob/master/_config.yml">in the <code>_config.yml</code> file</a>,
which is well documented and includes everything from page title to plugin configuration.</p>

<p>Configuration for getting the site up and running on Github Pages is rather straightforward as well.
Without going into too much detail (instructions can be found <a href="http://octopress.org/docs/deploying/github/">in the Octopress documentation</a>), you only need to do two things:</p>

<ol>
<li>Push your Octopress code into a repository named <code>your-github-username.github.io</code>.</li>
<li>Run the following commands:</li>
</ol>


<p><code>plain
bundle exec rake setup_github_pages
bundle exec rake generate
bundle exec rake deploy
</code></p>

<p>There are more details to it (especially if you want to have a custom domain), but in general it&rsquo;s a pleasantly quick process.</p>

<h2>Content creation</h2>

<p>Blog posts and pages are</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Currying and other Haskell spices]]></title>
    <link href="http://linduxed.github.io/blog/2014/01/21/currying-and-other-haskell-spices/"/>
    <updated>2014-01-21T23:24:04+01:00</updated>
    <id>http://linduxed.github.io/blog/2014/01/21/currying-and-other-haskell-spices</id>
    <content type="html"><![CDATA[<p>Most people who start looking at Haskell come from a background of one of the
more established languages. Be it Java, Ruby, Python or something else; most
often in those method signatures very clearly define the way in which the
methods can be called.</p>

<p>Not only does Haskell do things a bit differently, the differences allow for
increased flexibility when it comes to usage of functions in general.</p>

<!--more-->


<h2>A simple intro</h2>

<p>The <code>(+)</code> function takes two arguments and returns the sum of those two
arguments (provided it&rsquo;s actually possible to sum the two). You can both invoke
it the &ldquo;infix&rdquo; way:</p>

<pre><code>Prelude&gt; 2 + 3
5
</code></pre>

<p>&hellip;or by using the usual function application syntax (function first, arguments
later):</p>

<pre><code>Prelude&gt; (+) 2 3
5
</code></pre>

<p>In the case of <code>+</code> we need to surround it with parentheses for it not to be
treated as an infix function.</p>

<p>Let&rsquo;s look at the type of <code>+</code>:</p>

<pre><code>Prelude&gt; :type (+)
(+) :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>The <code>Num a</code> part indicates that the type variable a must implement the
typeclass <code>Num</code>. That&rsquo;s a fancy way of saying that our arguments (represented
by the <code>a</code>&rsquo;s) must work like numbers. The fact that they&rsquo;re all <code>a</code>&rsquo;s also
means that the arguments and the return value must all have the same type. For
people coming from languages like Java, think of <code>Num</code> as an interface that
each <code>a</code> must implement.</p>

<p>When you see that type declaration you might be thinking thinking &ldquo;Why does it
use the same arrow <code>(-&gt;)</code> for both arguments and return values?&rdquo;</p>

<p>The reason for this is that functions in Haskell actually take only one
argument and either return a result or a new function. For our <code>+</code> function,
this could be shown as follows:</p>

<pre><code>Prelude&gt; :type (+) 2
(+) 2 :: Num a =&gt; a -&gt; a
</code></pre>

<p>Note that this new function takes one <code>a</code> and returns an <code>a</code> (once again, as
long as they&rsquo;re <code>Num</code>). It&rsquo;s the same syntax as before, but this time since
we&rsquo;re at the end of the line, we don&rsquo;t get a function but a result back.</p>

<p>These functions which return &ldquo;intermediate&rdquo; functions due to having more than
one argument are called <em>curried functions</em>. The interesting thing about this
is (as you might have figured out from the <code>(+) 2</code> example) that we can create
so called partially applied functions with great ease.</p>

<p>We could use that previous example to create a handy <code>plusTen</code> function:</p>

<pre><code>Prelude&gt; let plusTen = (+) 10
Prelude&gt; :type plusTen
plusTen :: Integer -&gt; Integer
Prelude&gt; plusTen 10
20
Prelude&gt; plusTen 1
11
</code></pre>

<p>As said, this is a very simple example, but I think we can see some potential
here!</p>

<h2>Partial application in bulk</h2>

<p>So in the example with <code>(+)</code> we created the more rigid <code>plusTen</code> function as an
alternative to being able to add any number to any other number. As you might
have guessed, this comes in handy when you have a useful general function, from
which you can spawn various utility functions, just by setting one or two
arguments to fixed values.</p>

<p>The fact that Haskell considers these partially applied functions as valid
constructs that we can pass around means that you could incorporate them into
more complex structures.</p>

<h3>Selling apples</h3>

<p>Let&rsquo;s imagine that we&rsquo;ve got an apple salesman, standing in the middle of
a town square and he needs to attract the attention of people around him. He&rsquo;s
got red and green apples, and he can either be really loud and obnoxious or
just quietly announce what he has to sell.</p>

<p>Here&rsquo;s some code:</p>

<p>```haskell
module Apples where</p>

<p>data Apple = Green | Red
data Loudness = Loud | Quiet</p>

<p>shouting :: Apple &ndash;> Loudness &ndash;> String
shouting Green Quiet = &ldquo;Emerald green apples; get your Granny Smiths here!&rdquo;
shouting Green Loud  = &ldquo;GREEN APPLES, YOU NEED ONE!&rdquo;
shouting Red   Quiet = &ldquo;Ruby red apples; get your Red Delicious here!&rdquo;
shouting Red   Loud  = &ldquo;RED APPLES DAMMIT, BUY EM'!&rdquo;
```</p>

<p>We&rsquo;re using pattern matching in this case to handle the various
<code>Apple</code>&ndash;<code>Loudness</code> combinations, but it could have been implemented any other
way.</p>

<p>We can try to load this module and make the salesman peddle his apples:</p>

<pre><code>Prelude&gt; :load apples.hs
[1 of 1] Compiling Apples           ( apples.hs, interpreted  )
Ok, modules loaded: Apples.
*Apples&gt; shouting Green Loud
"GREEN APPLES, YOU NEED ONE!"
*Apples&gt; shouting Red Quiet
"Ruby red apples; get your Red Delicious here!"
</code></pre>

<p>OK, so that works, but it would get tedious quick. I mean, we&rsquo;ve got a basket
full of apples to sell:</p>

<pre><code>*Apples&gt; let basket = [Red, Red, Green, Red, Green, Red]
*Apples&gt; :t basket
basket :: [Apple]
</code></pre>

<p>So what if we just generated a lot of functions which already have their Apple set?</p>

<h3>Other spices</h3>

<p>The <code>zipWith</code> function takes two lists, takes the head of both of the lists and
apply a given function to both of the values. The result is put into a new
array, then this is repeated until one of the first two lists have run out of
elements. An example:</p>

<pre><code>*Apples&gt; zipWith (+) [1,1,1,1] [1,2,3,4]
[2,3,4,5]
</code></pre>

<p>There&rsquo;s another function which is generally used as an infix operator that&rsquo;s
called <code>$</code>. It serves the purpose of eliminating parentheses. Look at the
following example and see that the two calls are equivalent:</p>

<pre><code>*Apples&gt; head $ reverse $ "Hello!"
'!'
*Apples&gt; head ( reverse ( "Hello!" ) )
'!'
</code></pre>

<p>We&rsquo;ll bring in a final function to help us, <code>repeat</code>. It creates an infinite
list of whatever you give it. Since Haskell is lazily evaluated, as long as you
only take a fixed number of elements from this list, having an infinite list is
totally fine:</p>

<pre><code>*Apples&gt; take 4 $ repeat 1
[1,1,1,1]
</code></pre>

<h3>Putting it all together</h3>

<p>Let&rsquo;s combine them all and generate some &ldquo;Apple-fixed&rdquo; functions!</p>

<pre><code>*Apples&gt; let basketShouting = zipWith ($) (repeat shouting) basket
*Apples&gt; :t basketShouting
basketShouting :: [Loudness -&gt; String]
</code></pre>

<p>Lots of stuff going on here so let&rsquo;s take it piece by piece.</p>

<p>We take the function <code>($)</code> and give its first argument from the first list.
This list is an infinite list that looks like this:</p>

<pre><code>[shouting, shouting, shouting...]
</code></pre>

<p>As the second argument for the <code>$</code> function we take the first element from the
second list. The second list looks like this:</p>

<pre><code>[Red, Red, Green, Red, Green]
</code></pre>

<p>Do this until one list runs out of elements (hint: it&rsquo;s not the infinite one),
and our resulting list will look something like this:</p>

<pre><code>[shouting Red, shouting Red, shouting Green, shouting Red, shouting Green]
</code></pre>

<p>You see, we used <code>$</code> to &ldquo;bind&rdquo; the function and the argument together. Since
function argument is the same thing as function $ argument we can use that
operator to tie things together as nicely as we&rsquo;ve done here.</p>

<p>I should mention that the more experienced readers might be saying &ldquo;Hey, why
not just use a <code>map</code> instead of <code>zipWith</code>?&rdquo;</p>

<p>Good point, but where&rsquo;s the fun in that? :-P</p>

<p>To continue: with this collection of partially applied functions, it&rsquo;s as if
the peddler is holding the apples, just having to decide whether he wants to be
<code>Loud</code> or <code>Quiet</code>. He could for instance decide that he wants to start <code>Quiet</code>
with the first apple:</p>

<pre><code>*Apples&gt; (head basketShouting) Quiet
"Ruby red apples; get your Red Delicious here!"
</code></pre>

<p>Then he might want to <code>Loud</code>ly sell his third apple:</p>

<pre><code>*Apples&gt; (basketShouting !! 2) Loud
"GREEN APPLES, YOU NEED ONE!"
</code></pre>

<p>The <code>!!</code> function takes a list index (starting with zero).</p>

<p>Finally we could go ahead and have the guy sell all of the apples:</p>

<pre><code>*Apples&gt; zipWith ($) basketShouting (repeat Loud)
["RED APPLES DAMMIT, BUY EM'!","RED APPLES DAMMIT, BUY EM'!","GREEN APPLES, YOU NEED ONE!","RED APPLES DAMMIT, BUY EM'!","GREEN APPLES, YOU NEED ONE!"]
</code></pre>

<p>Let&rsquo;s turn this into a newline separated string and have it look like some real
output:</p>

<pre><code>*Apples&gt; putStrLn $ unlines $ zipWith ($) basketShouting (repeat Loud)
RED APPLES DAMMIT, BUY EM'!
RED APPLES DAMMIT, BUY EM'!
GREEN APPLES, YOU NEED ONE!
RED APPLES DAMMIT, BUY EM'!
GREEN APPLES, YOU NEED ONE!
</code></pre>

<p>And there we have it! Loud and clear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim plugins - Why, How and Which]]></title>
    <link href="http://linduxed.github.io/blog/2013/04/13/vim-plugins-why/"/>
    <updated>2013-04-13T23:12:33+02:00</updated>
    <id>http://linduxed.github.io/blog/2013/04/13/vim-plugins-why</id>
    <content type="html"><![CDATA[<p>A lot of times when I meet &ldquo;Vim neophytes&rdquo; they mention that Vim is a great
editor, but they miss certain features that they find in their previous
editor/IDE of choice. Often this will be a case of them not having learnt the
Vim way of doing the same task, but occasionally you&rsquo;ll have to tell them that
&ldquo;Vim doesn&rsquo;t do that&rdquo;.<br/>
Indeed, these days if you don&rsquo;t want to hop between different applications (all
of them having the primary purpose of editing text of some kind) you&rsquo;ll want
features that go beyond &ldquo;editing text&rdquo;.</p>

<h4>These days an editor can&rsquo;t just be an editor.</h4>

<!--more-->


<p>I&rsquo;ve met programmers who say that they&rsquo;re fine with using Eclipse for Java, Vim
for Ruby and then nano for minor edits in configuration files. Any workflow like
this makes no sense to me, since I wouldn&rsquo;t want to edit text in anything that
isn&rsquo;t Vim. Most people don&rsquo;t see how it could be any different&hellip;</p>

<p>&hellip;until you show them the wealth of plugins available.</p>

<h2>How to get them installed</h2>

<p>The classic way of installing plugins is to get the latest version from
<a href="http://www.vim.org/scripts/index.php">vim.org&rsquo;s scripts</a> page in the form of an
archive and just extract the contents into <code>~/.vim/</code>.</p>

<p>Now that you know about how it was done once upon a time, please refrain from
ever using this method (unless you want a spectacular mess inside your
Vim-directory).</p>

<p>These days people have plugins in separate directories, all of them stored in
some central plugin directory (most often <code>~/vim/bundle</code>). These plugin
directories are in turn loaded by some &ldquo;plugin handler&rdquo;, of which there are
many.</p>

<p>A lengthy list of handlers <a href="http://vim-scripts.org/vim/tools.html">can be found here</a>. It doesn&rsquo;t matter that much which one
you choose, but it might be a good idea to go with one of the more popular ones,
which are Pathogen, Vundle and VAM (vim-addon-manager).</p>

<h2>My setup</h2>

<p>I prefer to do the handling and updating of plugins outside of Vim, so I&rsquo;ve got
the following setup:</p>

<p>I&rsquo;ve got a &ldquo;dotfiles&rdquo; git-repository to which I&rsquo;ve added my Vim-plugins as
submodules. This allows me to update all my plugins (along with any other
git-repos I&rsquo;ve added as dotfiles) with one command (alias it to something
shorter):</p>

<pre><code>git submodule foreach git pull origin master
</code></pre>

<p>Committing these updated plugins with <code>git commit -a</code> and pushing the dotfiles
repo will then allow me to clone the repo anywhere and get all my plugins at the
same time (just make sure to clone with the <code>--recursive</code> flag).</p>

<p>Standing in <code>~</code>, adding the plugins would be done with a command like this:</p>

<pre><code>git submodule add git://github.com/linduxed/vim-linduxed-theme.git .vim/bundle/vim-linduxed-theme
</code></pre>

<p>I then use Pathogen to load all the plugins (read its FAQ about adding it as
a submodule, if that interests you).</p>

<p>I should also mention that while not necessary, structuring up your <code>~/.vimrc</code>
somewhat could be of great help, since it will increase in size after you start
adding plugins. <code>:set foldmethod=marker</code> and <a href="https://github.com/linduxed/dotfiles/blob/master/.vimrc">adding some markers</a> helps a lot.</p>

<p>If you don&rsquo;t already have a <code>.vimrc</code>, this is a <a href="https://github.com/tpope/vim-sensible">good starting point</a>.</p>

<h2>Which plugins do I get?</h2>

<p>There are quite a few plugins out there, so I&rsquo;ll just get you started with those
that I find most significantly improve my Vim experience. Click on the plugin
names to be taken to their respective repositories.</p>

<p>If you&rsquo;re hungry for more after going through this list, check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the other plugins I&rsquo;ve got in my setup</a> and go to
<a href="http://vim-scripts.org/">Vim Scripts</a> or <a href="http://www.vim.org/scripts/index.php">the official script page</a>.</p>

<h3>File and buffer navigation</h3>

<h4><a href="https://github.com/kien/ctrlp.vim/">CTRLP</a></h4>

<p>There are a few fuzzy-search plugins out there, the most well known ones being
<a href="https://github.com/wincent/Command-T">Command-T</a>, <a href="https://bitbucket.org/ns9tks/vim-fuzzyfinder/">FuzzyFinder</a> and CTRLP. While they&rsquo;re all
pretty similar when it comes to finding files, I like CTRLP a bit more because
it lets you fuzzy find among buffers and most-recently-used files as well.</p>

<p>As long as you know the name of the file you&rsquo;re looking for, this type of plugin
takes care of most file opening operations, due to it being so quick.</p>

<p>In case you haven&rsquo;t seen fuzzy-finders before, here&rsquo;s a quick demonstration. This is what it looks like when I look for <code>game/ai/ai_dropnodes.c</code> in the <a href="http://www.warsow.net/">Warsow</a> source code:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/ctrlp.gif' width='' height='' title='CTRLP in action. Looking for <code>ai_dropnodes.c</code>.'><span class='caption-text'>CTRLP in action. Looking for <code>ai_dropnodes.c</code>.</span></span></p>

<h4><a href="https://github.com/sandeepcr529/Buffet.vim">buffet</a></h4>

<p>There&rsquo;s a lot of overlap between CTRLP&rsquo;s buffer switching functionality and the
functionality of buffet, but if you want a tool that does nothing but switch
between buffers swiftly, this plugin is probably it.</p>

<h4><a href="https://github.com/scrooloose/nerdtree.git">nerdtree</a></h4>

<p>While I&rsquo;m using it less and less due to CTRLP, nerdtree is still the easiest way
to explore your filesystem without exiting Vim.</p>

<h3>Code writing helpers</h3>

<h4><a href="https://github.com/Lokaltog/vim-easymotion.git">vim-easymotion</a></h4>

<p>The big one. This plugin changed the way I move around in code completely. While
Vim gives you a great set of tools to move around in code (one of the things
that take the longest to master), this plugin takes it to another level. It&rsquo;s
probably the closest thing to mouse cursor accuracy you can get, while not
wasting time to fetch the mouse itself.</p>

<p>Words don&rsquo;t do this justice, so here&rsquo;s a video:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Dmv6-dguS3g" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<h4><a href="https://github.com/tpope/vim-surround">vim-surround</a></h4>

<p>Makes the task of surrounding text with quotes, parentheses, brackets, etc. much
easier. Also provides quick removal and changing of surrounding characters.</p>

<h4><a href="https://github.com/garbas/vim-snipmate.git">vim-snipmate</a></h4>

<p>If you haven&rsquo;t used an editor with snippets before, it&rsquo;s basically a set of
templates, small pieces of code which are often used in which you fill out the
relevant fields.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xV2IsE5OHd4" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<p>I should mention that at the time of writing the linked project has its
development slowed down, with another project called <a href="https://github.com/SirVer/ultisnips">UltiSnips</a> getting a lot of traction (along with
a <a href="https://github.com/MarcWeber/ultisnips/">fork</a> made by an ex-snipmate
developer).</p>

<p>The situation is a bit complicated, but at the moment snipmate works fine for me
so I don&rsquo;t see a reason to switch.</p>

<h4><a href="https://github.com/scrooloose/nerdcommenter.git">nerdcommenter</a></h4>

<p>Indispensable plugin that makes the creation and handling of comments in code
a breeze.</p>

<h4><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h4>

<p>Inserts a closing parenthesis, bracket, curly brace or quote when you insert an
opening one. Also knows what to do with braces if you press enter inside them
(indentation and new empty line between them) along with some other nice things.</p>

<p>There&rsquo;s also <a href="https://github.com/Townk/vim-autoclose">AutoClose</a> which does
pretty much the same thing.</p>

<h4><a href="https://github.com/godlygeek/tabular.git">tabular</a></h4>

<p>For the people who like their code pretty (I obsess over that kind of stuff)
this plugin aligns code.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/tabular.gif' width='' height='' title='Tabular lining stuff up.'><span class='caption-text'>Tabular lining stuff up.</span></span></p>

<h3>Miscellaneous</h3>

<h4><a href="https://github.com/linduxed/vim-linduxed-theme.git">vim-linduxed-theme</a></h4>

<p>This is here for two reasons:</p>

<ol>
<li>Plugging your own stuff is always nice.</li>
<li>People should get any theme.</li>
</ol>


<p>Seriously, the stock themes aren&rsquo;t that pretty and the ones you can find on the
internet are both varied and beautiful (not to mention that some have more
detailed syntax highlighting).</p>

<p>Here&rsquo;s a list of repos to look through (there are many others):</p>

<ul>
<li><a href="https://github.com/tpope/vim-vividchalk">Vividchalk</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees' color scheme collection</a></li>
<li><a href="https://github.com/altercation/solarized">Solarized</a></li>
<li><a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow</a></li>
</ul>


<h4><a href="https://github.com/sjl/gundo.vim.git">gundo.vim</a></h4>

<p>Many people aren&rsquo;t even aware of the fact that Vim has a branching undo history,
but this plugin makes it accessible. It upgrades the undo-tree from &ldquo;never use
it&rdquo; to &ldquo;use it all the time&rdquo;.</p>

<h4><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></h4>

<p><blockquote><p>I&rsquo;m not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time.</p><footer><strong>Tim Pope</strong></footer></blockquote></p>

<p>I&rsquo;ll have to agree. The extensive functionality is covered in detailed by Drew
Neil in his Vimcasts videos, starting at <a href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/">episode #31</a>.</p>

<p>If I was to pick just one of the many great features this plugin provides, then
it&rsquo;s the ability to open up the index version of the files and edit that while
having the version from the working directory open. This is like a superior
version of <code>git add --patch</code>, which is reason enough to get this.</p>

<h4><a href="https://github.com/scrooloose/syntastic">syntastic</a></h4>

<p>This plugin runs your code through a linter or syntax checker upon every save
and loads the warnings/errors into the location list and displays markers in the
gutter to indicate on what rows the warnings/errors are.</p>

<p>Incredibly helpful, you wouldn&rsquo;t know how much until you&rsquo;ve tried it. Syntastic
has code ready for the major linters/checkers/compilers for most languages.</p>

<p>Here&rsquo;s me fixing some warnings that pylint gives about &ldquo;no space after comma&rdquo;
(pylint warns about non-compliance with <a href="http://www.python.org/dev/peps/pep-0008/">PEP8</a>):</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/syntastic.gif' width='' height='' title='Syntastic giving warnings with the help of pylint.'><span class='caption-text'>Syntastic giving warnings with the help of pylint.</span></span></p>

<h4><a href="https://github.com/tpope/vim-unimpaired">vim-unimpaired</a></h4>

<p>Gives you a set of very useful bindings.</p>

<h2>Only the beginning</h2>

<p>The big category of plugins that I&rsquo;ve omitted is language/framework specific
plugins. I&rsquo;ve got a lot of those, but each specific one might not be useful to
everyone. With that said, there are some language specific plugins that are
really powerful and should most definitely be used if they align with what
you&rsquo;re coding in (<a href="https://github.com/tpope/vim-rails"><code>rails.vim</code> by Tim Pope</a>
is, from what I&rsquo;ve heard, considered to be a major source of Vim converts from
TextMate).</p>

<p>Once you start customizing your Vim, you&rsquo;ll notice that there are many areas
which you can improve with a plugin here and there. Just remember to stop and
consider if the functionality you&rsquo;re looking for isn&rsquo;t already available in
stock Vim.</p>

<p>As mentioned before, if you need some inspiration you can check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the plugins I use</a> and if you&rsquo;ve got
any problems, just fire up your IRC client of choice and head over to
<code>#vim@freenode.org</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not ready for the switch]]></title>
    <link href="http://linduxed.github.io/blog/2012/05/10/not-ready-for-the-switch/"/>
    <updated>2012-05-10T14:12:25+02:00</updated>
    <id>http://linduxed.github.io/blog/2012/05/10/not-ready-for-the-switch</id>
    <content type="html"><![CDATA[<p>Yesterday, for some unknown reason, <a href="http://5digits.org/pentadactyl/">Pentadactyl</a> decided that it didn&rsquo;t want to work any more.
I still have no idea why, and since I&rsquo;ve been suspending my computer for quite
a few days now, it might actually have to do with me upgrading Firefox from 11
to 12 quite recently. The problem was actually pretty easily solved by
downloading the latest nightly and just fire that up, but before I did that, the
sudden loss of Vim-style navigation inspired me to pick up an old project of
mine:</p>

<p>Moving from Firefox to uzbl.</p>

<!--more-->


<h2>It sounds so beautiful</h2>

<p>For those who don&rsquo;t know what <a href="http://www.uzbl.org/">uzbl</a> is, it&rsquo;s basically
a browser that adheres to the UNIX philosophy of &ldquo;doing one thing and doing it
well&rdquo;. What that means is that the browser is split up into small pieces; you
have <code>uzbl-core</code> which is not much more than Webkit with some interfaces on top
of it, and the actual thing that resembles a browser is either <code>uzbl-browser</code> or
<code>uzbl-tabbed</code>.<br/>
You know you&rsquo;re in for a ride if the developers initially didn&rsquo;t have
<code>uzbl-tabbed</code> at all since &ldquo;window managers should be handling the different
instances of the browser, not the browser itself&rdquo;. All the basic functionality
that one takes for granted in other browsers that aren&rsquo;t strictly browsing are
extras here; bookmarks, downloading, completion and other functionality that you
come to expect are scripts that are loaded by the main configuration file.</p>

<h2>But the beauty comes at a price</h2>

<p>If the application is nice then I&rsquo;m willing to put the time into configuring it.
Whether it&rsquo;s my ZSH terminal, Vim, Firefox or something else, I&rsquo;ll put in the
work to get it <em>just right</em> if I know that I can get that magnificent end result
that I envision. uzbl sounds fantastic because I like the notion of being able
to configure a system from the ground up, to see what happens and to know what
does what.</p>

<p>There&rsquo;s just one big problem however:</p>

<p>The work necessary to get uzbl to the state my Firefox is in with the numerous
extensions and custom configurations would take <em>ages</em>, if at all possible.
I decided that I can try to live without NoScript, BetterPrivacy, Firebug and
some other nice extensions, as long as I get what I consider to be core
functionality to work smoothly. Even this (what I would consider modest)
aspiration is a challenge to say the least.</p>

<p>The default configuration gives you Vim-like control, with hjkl-movement and
some other things that you might recognize if you&rsquo;re coming from
Pentadactyl/Vimperator, but the similarities end fairly quickly. Once the basic
keys were reconfigured to my liking, one of the first things I wanted to tweak
was that since I use <code>uzbl_tabbed</code>, I&rsquo;ll want to reconfigure the <code>NEW_WINDOW</code>
action to load links in new tabs. The fact that only the action <code>NEW_TAB</code> worked
and not the other two potentially nice ones (<code>NEW_BG_TAB</code> and <code>NEW_BG_TAB_NEXT</code>)
was a shame, doubly so when there&rsquo;s no information for how get it to work.</p>

<h2>You&rsquo;re on your own</h2>

<p>This was the first encounter (out of many, I might add) with what eventually led
me to give up on the browser. There&rsquo;s no comprehensive source of information
about uzbl… anywhere.</p>

<p>I use Archlinux on my main computer but I know that I might not have been if it
wasn&rsquo;t for the fantastic Wiki. I don&rsquo;t know if that huge source of information
has spoiled me, but I feel like I&rsquo;m done with the days of guessing myself forth
when configuring software. I don&rsquo;t enjoy being in the situation of “Well I&rsquo;d
really like to do foobar, so I guess I&rsquo;ll scour tens of config files to see if
someone has done something remotely similar from which I can extrapolate some
kind of solution”.</p>

<p><em>I&rsquo;m done with that shit.</em></p>

<p>The Arch Wiki proves that even if you put docstrings for every line in your
configuration, a Wiki page with some quick and helpful tweaks that every new
user would make, is a thousand times better. As soon as I got any idea on how
I&rsquo;d like to tweak the interface of uzbl, it was followed by the realization that
there&rsquo;s neither a quick nor an obvious way to do it.</p>

<p>The <a href="http://www.uzbl.org/wiki/">official Wiki</a> is so barren that it seems to be
made by and exclusively for the current/future developers. Google isn&rsquo;t much
more helpful, the usual searches for HOWTOs or tutorials yield not much more
information than what one would derive from the sample configs that one can find
in the Wiki.</p>

<h2>See you some other time</h2>

<p>The impression I get is that if you&rsquo;re not ready to figure it out, then you
shouldn&rsquo;t even start. I gave it quite a few hours and at a certain point decided
that fixing Pentadactyl would be far more beneficial and far less time
consuming.</p>

<p>Some day I&rsquo;ll probably give it another shot, but by that time I&rsquo;ll probably come
prepared with far more patience and without the expectation to actually replace
Firefox.</p>
]]></content>
  </entry>
  
</feed>
