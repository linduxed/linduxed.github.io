<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Rants of a geek]]></title>
  <link href="http://linduxed.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://linduxed.github.io/"/>
  <updated>2015-07-18T17:45:36+02:00</updated>
  <id>http://linduxed.github.io/</id>
  <author>
    <name><![CDATA[linduxed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing more readable RSpec tests]]></title>
    <link href="http://linduxed.github.io/blog/2014/08/24/writing-more-readable-rspec-tests/"/>
    <updated>2014-08-24T17:32:27+02:00</updated>
    <id>http://linduxed.github.io/blog/2014/08/24/writing-more-readable-rspec-tests</id>
    <content type="html"><![CDATA[<p>Some time ago Joe Ferris wrote a piece on the thoughtbot blog called <a href="http://robots.thoughtbot.com/lets-not">&ldquo;Let&rsquo;s Not&rdquo;</a> (that I recommend you read first),
which concerns itself with the usage of various RSpec helper methods.
Methods like <code>let</code>, <code>before</code> and <code>subject</code> come under fire and are deemed as problematic.</p>

<p>While I agree with the message of the article,
I feel that I could expand on the part about <strong>why</strong> these helpers are as problematic as Mr. Ferris makes them out to be.</p>

<!--more-->


<p>I should start off by saying that while my thoughts pertain specifically to usage of RSpec,
a lot of the mentioned structures, methods and patterns are recurrent in other frameworks and languages.
I&rsquo;m sure there&rsquo;s information here that could be extrapolated to your non-RSpec setup.</p>

<h2>Cognitive load</h2>

<p>When I write a test there are two rules which guide my writing :</p>

<ul>
<li>All of the necessary information for understanding what is being tested should be readily available.</li>
<li>The collaborators in the test should be as minimal as possible.</li>
<li>Minimize cleverness.</li>
</ul>


<p>Surround your pullquote like this {" text to be quoted "}</p>

<p>Having written tests with and without them for some time now, I find that tools like <code>let</code>, <code>before</code> and <code>subject</code> DRY up your tests, but often at the cost of making the tests less readable.</p>

<h2>Examples in the wild</h2>

<p>Let&rsquo;s look at some code to see what I mean.</p>

<p>One of the things I did to learn Rails was to go through <a href="http://www.railstutorial.org/book">Michael Hartl&rsquo;s Ruby on Rails guide</a>,
a book which instructs its readers to write their tests in such a way that it starts to violate some of the aforementioned guidelines.</p>

<p>Before I continue I wish to make it clear that I value the book highly: it helped me tremendously and I definitely recommend it as one of the better introductory books for Rails (at least out of those that I know of).
Additionally, despite what I consider being shortcomings in how the test-related portions of the book are written, these portions contain valuable lessons about <em>what</em> to test, so please don&rsquo;t let this blog post discourage you from reading it.</p>

<p>With that said, there are plenty of examples which illustrate the issues that arise from too extensive usage of the various facilities that RSpec offers you.</p>

<h3>User model tests</h3>

<p>Let&rsquo;s start by looking at the tests for <a href="https://github.com/mhartl/sample_app/blob/master/spec/models/user_spec.rb">the <code>User</code> model</a>.
Due to the size of the file, I&rsquo;ve removed some tests which I won&rsquo;t be using to illustrate my point.</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe User do</p>

<p>  before do</p>

<pre><code>@user = User.new(name: "Example User", email: "user@example.com",
                 password: "foobar", password_confirmation: "foobar")
</code></pre>

<p>  end</p>

<p>  subject { @user }</p>

<p>  it { should respond_to(:name) }
  it { should respond_to(:email) }
  # &hellip;
  it { should respond_to(:follow!) }
  it { should respond_to(:unfollow!) }</p>

<p>  it { should be_valid }
  it { should_not be_admin }</p>

<p>  # &hellip;</p>

<p>  describe &ldquo;micropost associations&rdquo; do</p>

<pre><code>before { @user.save }
let!(:older_micropost) do
  FactoryGirl.create(:micropost, user: @user, created_at: 1.day.ago)
end
let!(:newer_micropost) do
  FactoryGirl.create(:micropost, user: @user, created_at: 1.hour.ago)
end

it "should have the right microposts in the right order" do
  @user.microposts.should == [newer_micropost, older_micropost]
end

it "should destroy associated microposts" do
  microposts = @user.microposts
  @user.destroy
  microposts.each do |micropost|
    Micropost.find_by_id(micropost.id).should be_nil
  end
end

describe "status" do
  let(:unfollowed_post) do
    FactoryGirl.create(:micropost, user: FactoryGirl.create(:user))
  end
  let(:followed_user) { FactoryGirl.create(:user) }

  before do
    @user.follow!(followed_user)
    3.times { followed_user.microposts.create!(content: "Lorem ipsum") }
  end

  its(:feed) { should include(older_micropost) }
  its(:feed) { should include(newer_micropost) }
  its(:feed) { should_not include(unfollowed_post) }
  its(:feed) do
    followed_user.microposts.each do |micropost|
      should include(micropost)
    end
  end
end
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>Let&rsquo;s assume that the test on line 57 breaks: for some reason the <code>newer_micropost</code> isn&rsquo;t included in <code>its</code> feed.</p>

<p>The most likely thing you&rsquo;ll first do is open this spec file and jump down to the line in question.
Here&rsquo;s when the redundantly arduous procedure starts:</p>

<h4>Jumping back and forth</h4>

<p>First we have to figure out what the <code>subject</code> that <code>its</code> refers to is.
Let&rsquo;s backtrack through the code all the way up to line 10 to figure out.
Or well, not really, because you&rsquo;ll have to read through line 6 to get to know what <code>@user</code> actually means.</p>

<p>Next, what&rsquo;s this <code>newer_micropost</code> thing?
We&rsquo;ll have to jump up to lines 29-31 to figure that out.
Apparently it&rsquo;s of essence that <code>newer_micropost</code> is evaluated before each example in which it&rsquo;s invoked (since <code>let!</code> is used instead of <code>let</code>).</p>

<p><blockquote><p>This uses the let! (read “let bang”) method in place of let; the reason is that let variables are lazy, meaning that they only spring into existence when referenced. The problem is that we want the microposts to exist immediately, so that the timestamps are in the right order and so that @user.microposts isn’t empty. We accomplish this with let!, which forces the corresponding variable to come into existence immediately.</p><footer><strong>Right before Listing 10.10 <a href="http://www.railstutorial.org/book/user_microposts#sec-ordering_and_dependency">http://www.railstutorial.org/book/user_microposts#sec-ordering_and_dependency</a></strong></footer></blockquote></p>

<p>So, the usage of <code>let!</code> instead of <code>let</code> here is completely unrelated to our broken test.
Good to know.</p>

<p>Speaking of which, is it really of relevance to us that the <code>newer_micropost</code> was <code>created_at: 1.hour.ago</code>?
I would assume not, but considering we&rsquo;re using this memoized value and not a <code>micropost</code> created just for the test on line 57, we can only guess.</p>

<p>Oh, I just accidentally noticed that on line 25 apparently the <code>@user</code> gets saved!
I&rsquo;m not sure if that changes things but it sure is good to know.</p>

<p>I guess we&rsquo;ll need to look at some setup to make sense of this:</p>

<p>Lines 51-54 tell us that <code>@user</code> should <code>follow!</code> something called <code>followed_user</code>.
Oh, that&rsquo;s right above at line 49, fine.
Then we create three microposts with a specified content, sure.</p>

<h4>Analyzing the journey</h4>

<p>To do nothing but <em>understand</em> the full scope of the setup and expectations for the one test on line 57, there&rsquo;s <em>a lot</em> of jumping around, hunting for the procedure that makes the test happen.</p>

<p>When I&rsquo;m already in a confused state over why a test tells me that something in my code broke, the <strong>last</strong> thing I want to do is spend time deciphering the test.
I&rsquo;ve often heard people from the Ruby community talk about using tests as a live documentation for your code, but if I need to put in this much work to read the documentation than I&rsquo;m starting to think that I might as well read the source code.
If the code is well written there will be less to read anyway.</p>

<p>I mentioned previously that I strive to have all the necessary information readily available, where in this case we have a couple of <a href="http://xunitpatterns.com/Obscure%20Test.html#Mystery%20Guest">Mystery guests</a> instead.</p>

<p>Confusion was introduced because we had to consider redundant information due to a too large <a href="http://xunitpatterns.com/Obscure%20Test.html#General%20Fixture">General fixture</a>.</p>

<p>Finally we had the case of needing immediate evaluation of something that is normally lazily evaluated (<code>let</code> vs <code>let!</code>), increasing &ldquo;cleverness&rdquo; of the tests.</p>

<p>Let&rsquo;s see what this will look like if we try to avoid these helper methods.</p>

<h3>Alternate implementation of User model tests</h3>

<p>Let&rsquo;s start off by talking about the <code>respond_to</code>, <code>be_valid</code> and <code>be_admin</code> expectations, since they&rsquo;re somewhat unrelated to the topic at hand:</p>

<p>First of all, I&rsquo;m not a fan of testing whether something gets responded to or not.
Test what it does, and if all it does is that it delegates a message somewhere else, ensure that the message is sent.
These tests ensure the <em>existence</em> of an interface, not its workings.<br/>
Tests of this kind could be an attempt to ensure that inheritance of certain methods has occurred, so for the sake of brevity we&rsquo;ll just assume that&rsquo;s the case (if you check <a href="https://github.com/mhartl/sample_app/blob/master/spec/models/user_spec.rb#L26-L28">the tests</a> and then <a href="https://github.com/mhartl/sample_app/blob/master/app/models/user.rb#L22-L32">the code</a>, you&rsquo;ll notice that&rsquo;s not the case for all of them).</p>

<p>Let&rsquo;s turn that block of tests into a case where I <em>could</em> imagine <code>subject</code> being used.
Oh, and let&rsquo;s assume that we have a <code>User</code> factory available.<br/>
I suspect that the reason <code>@user</code> was instantiated the way it was on on line 6 above, was because it allowed the tests to build an instance of <code>User</code> but run <code>@user.save</code> only in the tests where it was necessary (like on line 25).<br/>
We&rsquo;ll use <code>FactoryGirl.build</code> and <code>FactoryGirl.create</code> instead.</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe User do
  describe &lsquo;inherited methods&rsquo; do</p>

<pre><code>subject do
  FactoryGirl.build(:user,
    name: "Example User",
    email: "user@example.com",
    password: "foobar",
    password_confirmation: "foobar"
  )
end

it { should respond_to(:name) }
it { should respond_to(:email) }
# ...
it { should respond_to(:follow!) }
it { should respond_to(:unfollow!) }

it { should be_valid }
it { should_not be_admin }
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>I think this could be written without <code>subject</code> as well, but this is a case where it would be an acceptable usage, due to the trivial setup that one needs to comprehend after reading a test that broke.</p>

<p>Let&rsquo;s now extend this code with the rewritten <code>describe "micropost associations"</code> block:</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe User do
  describe &lsquo;inherited methods&rsquo; do</p>

<pre><code>subject do
  FactoryGirl.build(:user,
    name: "Example User",
    email: "user@example.com",
    password: "foobar",
    password_confirmation: "foobar"
  )
end

it { should respond_to(:name) }
it { should respond_to(:email) }
# ...
it { should respond_to(:follow!) }
it { should respond_to(:unfollow!) }

it { should be_valid }
it { should_not be_admin }
</code></pre>

<p>  end</p>

<p>  describe &lsquo;micropost associations&rsquo; do</p>

<pre><code>it 'has the right microposts in the right order' do
  user = FactoryGirl.create(:user)
  older_micropost = FactoryGirl.create(:micropost, user: user, created_at: 1.day.ago)
  newer_micropost = FactoryGirl.create(:micropost, user: user, created_at: 1.hour.ago)

  user.microposts.should == [newer_micropost, older_micropost]
end

it 'destroys associated microposts' do
  user = FactoryGirl.create(:user)
  FactoryGirl.create_list(:micropost, 2, user: user)
  microposts = user.microposts

  user.destroy

  microposts.each do |micropost|
    Micropost.find_by_id(micropost.id).should be_nil
  end
end
</code></pre>

<p>  end</p>

<p>  describe &ldquo;#feed&rdquo; do</p>

<pre><code>it 'includes only followed microposts' do
  user_that_follows = FactoryGirl.create(:user)
  own_posts = FactoryGirl.create_list(:micropost, 3, user: user_that_follows)
  not_followed_user = FactoryGirl.create(:user)
  not_followed_post = FactoryGirl.create(:micropost, user: not_followed_user)
  followed_user = FactoryGirl.create(:user)
  followed_posts = FactoryGirl.create_list(:micropost, 3, user: followed_user)

  user_that_follows.follow!(followed_user)

  feed = user_that_follows.feed
  expect(feed).to include(own_posts)
  expect(feed).to include(followed_posts)
  expect(feed).not_to include(not_followed_post)
end
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>A number of different things have happened to the tests:</p>

<ul>
<li>The <code>#feed</code>-related tests have been indented out, giving them a dedicated <code>describe</code> block in which we clearly test nothing but the <code>#feed</code> method.</li>
<li>Every <code>it</code>-block is self-contained and has everything it needs to carry out the test.
We&rsquo;ve avoided the <a href="http://xunitpatterns.com/Obscure%20Test.html#Mystery%20Guest">Mystery guest</a> problem.</li>
<li>Every <code>it</code>-block is written to use a uniform structure of Setup, Procedure and Expectations (in the test on line 25, Procedure was not needed).</li>
<li>Every collaborating object is as minimal as necessary, assuming that the factories are written <a href="https://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md#defining-factories">as minimal as possible (only to pass validation)</a>.
We&rsquo;ve avoided the <a href="http://xunitpatterns.com/Obscure%20Test.html#General%20Fixture">General fixture</a> problem.</li>
</ul>


<h3>Nested <code>describe</code> blocks</h3>

<p>While not entirely related, an issue that I&rsquo;ve found reoccurring in tests that make heavy use of <code>subject</code>, <code>let</code> and <code>before</code> is deeply nested <code>describe</code> blocks.</p>

<p><a href="https://github.com/mhartl/sample_app/blob/master/spec/requests/user_pages_spec.rb">This spec file is a great example of it</a> (too long to include here).</p>

<p>I remember myself writing these tests when I was going through the tutorial and thinking that it was so clever that you could extend previous scenarios by nesting a <code>describe</code> inside a previous one.
The error message was extended in a &ldquo;natural&rdquo; way, appending just a tiny bit more.
I didn&rsquo;t need to write particularly large tests either, since they could use all the stuff that was defined a couple of indendentation levels back.</p>

<p>This is enabled by the previously mentioned methods.</p>

<p>It&rsquo;s also an express train to Confusion Town.</p>

<p>While it might sound cool, it rapidly becomes a frustrating mess to read.
It&rsquo;s essentially a way to exacerbate the already significant potential that the methods have to write confusing tests.</p>

<h2>Final words</h2>

<p>There&rsquo;s <a href="https://upcase.com/videos/rspec-best-practices">a video on the subject</a>, where the man behind the <a href="http://robots.thoughtbot.com/lets-not">&ldquo;Let&rsquo;s Not&rdquo;</a> article talks about all of these things.
The full video is behind a pay-wall, but if you don&rsquo;t already have an account on Upcase I do recommend getting one, since they&rsquo;ve got a lot of good material on the site.</p>

<p>Additionally, let me close by linking to a <a href="http://blog.codinghorror.com/coding-for-violent-psychopaths/">short but classic post by Jeff Atwood</a> on the subject of how to code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from Squarespace to Octopress]]></title>
    <link href="http://linduxed.github.io/blog/2014/07/25/moving-from-squarespace-to-octopress/"/>
    <updated>2014-07-25T06:50:33+02:00</updated>
    <id>http://linduxed.github.io/blog/2014/07/25/moving-from-squarespace-to-octopress</id>
    <content type="html"><![CDATA[<p>Squarespace had been my blogging platform of choice for numerous years.
It looked good, had good editing features and took care of a lot of stuff for you.
However, when my posting slowed down,
I started considering whether what I was using was worth the annual bill I was paying.</p>

<p>I needed something that was both cheaper and that gave me a bit more control.
I was recommended Octopress by a colleague and decided to give it a spin;
I realized very quickly that this platform was a much better fit for me.</p>

<p>These are some thoughts I&rsquo;ve gathered up on the subject, about a month after moving.</p>

<!--more-->


<h2>Squarespace, the good and the bad</h2>

<p>I got Squarespace about four years ago and the platform has since then had a major redesign,
but overall my interaction with it didn&rsquo;t change much over time.</p>

<p>There were four things about Squarespace that I very much enjoyed:</p>

<ol>
<li>A wide selection of well designed templates.
Suitable for many different styles, it made it very easy to get up and going quickly.
Additionally, there were plenty of easy ways to tweak the chosen design.</li>
<li>Easy-to-use tools for content creation.
Especially after the redesign, the platform gave you a large variety of tools to build your blog posts with.
If I wanted to create a blog post, I didn&rsquo;t just write a text document that I could embed some stuff in,
rather I&rsquo;d insert <a href="http://help.squarespace.com/guides/what-is-a-content-block">content blocks</a> to compose my document.
The interfaces were also nice and clean, which made editing pleasant.</li>
<li>The surrounding tools, provided by Squarespace, were of high quality.
Whether it was the built-in analytics tools,
the comment overview pages or the Android/iOS app they released to manage your site,
they gave me a lot of well made tools that improved all the non-writing activities.</li>
<li>The support was remarkably good.
Support tickets got handled quickly and getting help was always an enjoyable experience.</li>
</ol>


<p>There was an overall high level of quality that made it all very pleasant to use.</p>

<p>With all of that said, there were a few things which made me consider an alternative platform:</p>

<ul>
<li>It cost me money.
It&rsquo;s not like it was a cost I couldn&rsquo;t handle, but why pay for something that I could make myself easily?</li>
<li>It had <em>no</em> out-of-the-box tools for formatting code well.
This is something that kept surprising me:
there seemed to be no push towards making it easy to paste code and have it nicely rendered.<br/>
This is important if one of the primary things you write about is programming.</li>
<li>As much as Squarespace let me configure things with its interface,
it doesn&rsquo;t compare to building something on your own.<br/>
I build webapps for a living, so while it wasn&rsquo;t something that bugged me when I got Squarespace,
today not having access to the internals is something that frustrates me.</li>
</ul>


<h2>Along comes Octopress</h2>

<p>As mentioned previously, a colleague of mine recommended me to have a look at Octopress.
While I had ideas for other frameworks I could use, this one stood out to me because of the following:</p>

<ul>
<li>Free hosting on Github Pages.</li>
<li>It gives you something working right away.</li>
<li>They call it the &ldquo;hacker&rsquo;s blogging platform&rdquo; and it did look kind of exciting.</li>
<li>Static page generation from nothing but text documents? Yes, please.</li>
</ul>


<p>I decided to try it before I&rsquo;d consider going for some other alternatives and I must say I&rsquo;m very happy with my decision.</p>

<p>Octopress is based on Jekyll which is a static page generator that I&rsquo;ve heard good things about.
It&rsquo;s built in Ruby, which is a big plus for me considering it&rsquo;s my primary programming language,
and it&rsquo;s actively being developed.</p>

<h2>Setup and configuration</h2>

<p>Getting Octopress up and running locally was very straight-forward:
<code>plain Setup http://octopress.org/docs/setup/
git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle install
bundle exec rake install
</code>
This installs the default theme and let&rsquo;s you start a local server:</p>

<pre><code>bundle exec rake preview
</code></pre>

<p>This fires up a local server on <code>localhost:4000</code> where you can see the site.
There&rsquo;s nothing on it at the moment, but you already have a working environment.
Almost all the non-styling related configuration is done <a href="https://github.com/imathis/octopress/blob/master/_config.yml">in the <code>_config.yml</code> file</a>,
which is well documented and includes everything from page title to plugin configuration.</p>

<p>Configuration for getting the site up and running on Github Pages is rather straightforward as well.
Without going into too much detail (instructions can be found <a href="http://octopress.org/docs/deploying/github/">in the Octopress documentation</a>), you only need to do two things:</p>

<ol>
<li>Push your Octopress code into a repository named <code>your-github-username.github.io</code>.</li>
<li>Run the following commands:</li>
</ol>


<p><code>plain Github deployment http://octopress.org/docs/deploying/github/
bundle exec rake setup_github_pages
bundle exec rake generate
bundle exec rake deploy
</code></p>

<p>There are more details to it (especially if you want to have a custom domain), but in general it&rsquo;s a pleasantly quick process.</p>

<h2>Content creation</h2>

<p>Blog posts and pages are created by invoking a <code>rake</code> task:</p>

<pre><code>bundle exec rake new_post["The title of the blog post"]
bundle exec rake new_page["The title of the new page"]
</code></pre>

<p>Both of these commands generate markdown files in the <code>source</code> directory with some header data at the top, leaving the rest for you to fill out with your text editor of choice.</p>

<p>If you&rsquo;ve ever written Github markdown, then you know more or less what to expect:
the support for code blocks and monospaced words is there, along with some other cool stuff which can be read about in the documentation.
This includes things like pull quotes, inline gists and captioned images.</p>

<p>Above mentioned <code>rake preview</code> allows you to view your changes rendered in your browser.
For extra fanciness you should try <a href="http://erikzaadi.com/2012/09/16/using-live-reload-with-octopress/">hooking it up</a> to <a href="http://livereload.com/">LiveReload</a>.</p>

<p>As a side note: while I haven&rsquo;t installed many of them myself, there is a wealth of <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">themes</a> and <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">plugins</a> with which you can improve your Octopress experience.</p>

<h3>Deployment</h3>

<p>Once you&rsquo;re done writing your post/page all you need to do (assuming you&rsquo;re done setting up your remote, be it Github pages, Heroku or something else),
then you all you need to run is the following command:</p>

<pre><code>bundle exec rake deploy
</code></pre>

<p>This will generate all the necessary files in the <code>_deploy</code> directory and will push the contents of it as a commit into the <code>master</code> branch,
making it work as the deployment branch.</p>

<h2>The hiccups</h2>

<p>While I&rsquo;ve been happy with the platform in general and I don&rsquo;t see myself switching any time soon, there have been a couple of points of frustration.</p>

<h3>Styling</h3>

<p>After having installed an alternative theme (in my opinion the default leaves a lot to be desired) I needed to do some tweaking.
Octopress provides you with a <code>sass/custom</code> directory with files where you have some commented out code for easy tweaking of the basic values like colors and fonts.
This in itself works for minor changes, but I felt that I needed to dig a bit deeper to get what I wanted.</p>

<p>Editing typography turned out to be more than just changing things in the <code>sass/base/typography.scss</code> file;
I had to dig around in the source, turning dials here and there, reloading the page and hoping that the thing that I just edited was the one that did the change I wanted.</p>

<p>Normally I don&rsquo;t work with front-end, and maybe the way the style code is set up in Octopress is totally fine if you&rsquo;d ask a designer, but my impression was that parts of it could have been written in a way that necessitated less digging around.</p>

<p>There were some other minor things that I could say about the style code, but in general I&rsquo;d just recommend (if you&rsquo;re just starting out) using one of the themes and try working your way towards what you want from there.</p>

<h3>Updating</h3>

<p>Rebasing your tweaked fork of Octopress on top of <code>upstream/master</code> shouldn&rsquo;t be a big deal, for me the changes were almost without any conflicts.</p>

<p>On the other hand, the platform provides two commands which serve the purpose of applying the upstream changes to your modified code:</p>

<pre><code>bundle exec rake update_source
bundle exec rake update_style
</code></pre>

<p>Depending on how much you&rsquo;ve changed yourself or any theme that you applied changed for you, you&rsquo;re likely to bump into a serious <code>git diff</code> which you&rsquo;ll need to wade through to figure out what should go in and what shouldn&rsquo;t.</p>

<p>I ended up opting for not using these commands because everything already works for me and I also think it applies some changes that are only relevant if you use the default theme.</p>

<p>Additionally, there was a recent (at the time of writing) change which moves Octopress from Jekyll 1.x to 2.x, which will probably cause some headaches if you&rsquo;re using certain plugins. I know I had that kind of problem, so while I test some alternative plugins providing the same functionality, I&rsquo;ll be staying on a bit older code.</p>

<h2>Summary</h2>

<p>Despite the hiccups, I feel that this platform makes blogging very comfortable and for anyone who wants something fairly simple but still capable, this platform is a solid choice.</p>

<p>Recommended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The state of RMagick development]]></title>
    <link href="http://linduxed.github.io/blog/2014/07/25/the-state-of-rmagick-development/"/>
    <updated>2014-07-25T04:40:18+02:00</updated>
    <id>http://linduxed.github.io/blog/2014/07/25/the-state-of-rmagick-development</id>
    <content type="html"><![CDATA[<p>Yesterday <a href="https://github.com/rmagick/rmagick/issues/18#issuecomment-50022523">someone got fed up</a> with the situation that the RMagick gem is in and forked the project.</p>

<p>Neither <a href="https://github.com/rmagick/rmagick/network">is this the first time</a>, nor do I know if this fork will help the project at large, but I think it&rsquo;s time people got to know what&rsquo;s going on with the project.</p>

<p>All of which I&rsquo;m going to write might be obvious, old news or stuff people already knew in one way or another, but here it is anyway.
Here&rsquo;s some backstory that might answer the following question:</p>

<p><em>&ldquo;What&rsquo;s going on with RMagick?&rdquo;</em></p>

<p>Or rather&hellip;</p>

<p><em>&ldquo;Why is <strong>nothing</strong> happening with RMagick?&rdquo;</em></p>

<!--more-->


<h4>TL;DR</h4>

<p>RMagick isn&rsquo;t going to go anywhere until a fork takes off, because the sole maintainer doesn&rsquo;t seem to be likely to do anything.</p>

<h2>Some talk with the maintainer</h2>

<p>In early September I joined a company that used RMagick for one of their projects.
As an Archlinux user, I quickly got to join the crowd who <a href="https://github.com/rmagick/rmagick/issues/18">had a certain problem with the gem</a>.</p>

<p>Nothing really happened with the issue and people were already making their own solutions to the problem, so after a while I got fed up with the situation and sent an email to the main/only maintainer, <a href="https://github.com/mmaiza">@mmaiza</a>.
For @mmaiza&rsquo;s sake, I won&rsquo;t post the actual email exchange between us, but I&rsquo;ll give you the important gist of it.
My first email basically consisted off:</p>

<p><em>&ldquo;Hey, there&rsquo;s a lot of things happening on the issue tracker for the project, could we figure something out to get things going again?&rdquo;</em></p>

<p>We had some brief back-and-forth and then in early November we had a talk about the state of the project.</p>

<h3>Skype call</h3>

<p>The guy inherited a large amount of code that someone else wrote and didn&rsquo;t have the time to maintain it.
He really admired the previous guy&rsquo;s work and felt it was a shame if the project died.
On the other hand, he didn&rsquo;t want the project to move forward without assuring that a certain level of quality was maintained.</p>

<p>First of all he stressed that he had no intentions to move towards merging pull requests or fixing issues while the test suite had failing tests.
Both at the time of the conversation and now, the test suite has <em>a lot</em> of failing tests.</p>

<p>I also got the feeling (from the mail exchange and from the call) that he wasn&rsquo;t as interested in &ldquo;distributed help&rdquo; as he was in finding a successor for his position, a developer who could dedicate a lot of time to shape things up.
Neither was I qualified for such a position at the time, I felt, nor did I have the time;
I explicitly said that I was not asking for any Push access rights on the repository.</p>

<p>However, I did suggest that if he created a milestone on Github for fixing all of these tests, and in the milestone he wrote about his requirement for the tests to be green (and maybe update the README with some instructions on how to run them because that <em>does</em> take work), then maybe people would feel like helping out.</p>

<p>I was met with &ldquo;Sounds like a decent plan, we&rsquo;ll see about getting it going.&rdquo;</p>

<h2>Radio silence</h2>

<p>Two months went by and not much had happened.
The problem that originally brought me to the RMagick issue tracker <a href="https://github.com/rmagick/rmagick/pull/90">was fixed</a> and a <a href="https://github.com/rmagick/rmagick/pull/78">license file was added</a>, but a new gem version was not made, the fixes only live in the <code>master</code> branch of the project.</p>

<p>Around New Year I sent him another message.
I reminded him that there would be great benefit to following through with that idea for creating a bug squashing milestone and communicating the state of the project.
That, and making it easier to run the tests so the project could be improved easier.</p>

<p>About a week after New Year I got a short mail that boiled down to &ldquo;Yeah, we should get those tests green, I&rsquo;ll get back to you.&rdquo;</p>

<p>Unfortunately, almost seven months later, he hasn&rsquo;t.
I sent him a two more messages over that time, in one of them proposing that if he gave me Push access then I could take care of all the things for him, but I haven&rsquo;t heard from him at all since early January.</p>

<h2>Zombie application</h2>

<p>I knew full well that I didn&rsquo;t have the time to (or a whole lot of will) to fix all the failing tests and problems that this project has.
I also really hoped that @mmaiza would come back to lead the continued development of the gem.
Disregarding the fact that he considered it to be of importance that updated versions of the gem were provided on RubyForge (which has since then <a href="http://en.wikipedia.org/wiki/RubyForge#Shutting_Down">shut down</a>), I knew that if I would start a fork, people would need not only to contribute to it, but the world would need to catch on to the fact that there&rsquo;s a fork of the <code>rmagick</code> gem they need to use to get the latest and greatest.</p>

<p>I don&rsquo;t know if <a href="https://github.com/gemhome/rmagick">the fork that was just made</a> by <a href="https://github.com/bf4">@bf4</a> will gain traction or if the project will improve from here.
RMagick seems to have its detractors, with one of my developer friends summing it up as &ldquo;probably the most hated gem in the ecosystem&rdquo;.
I don&rsquo;t know if that&rsquo;s the case, and some of the enmity is probably purely caused by <a href="https://twitter.com/garybernhardt/status/224329120346144769">people&rsquo;s dislike of ImageMagick</a>.<br/>
Regardless, there&rsquo;s a lot of things that could be improved, and it&rsquo;s probably no small task to do so.</p>

<p>Salutations and good luck to those who actually attempt to fix this thing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Currying and other Haskell spices]]></title>
    <link href="http://linduxed.github.io/blog/2014/01/21/currying-and-other-haskell-spices/"/>
    <updated>2014-01-21T22:24:04+00:00</updated>
    <id>http://linduxed.github.io/blog/2014/01/21/currying-and-other-haskell-spices</id>
    <content type="html"><![CDATA[<p>Most people who start looking at Haskell come from a background of one of the
more established languages. Be it Java, Ruby, Python or something else; most
often in those method signatures very clearly define the way in which the
methods can be called.</p>

<p>Not only does Haskell do things a bit differently, the differences allow for
increased flexibility when it comes to usage of functions in general.</p>

<!--more-->


<h2>A simple intro</h2>

<p>The <code>(+)</code> function takes two arguments and returns the sum of those two
arguments (provided it&rsquo;s actually possible to sum the two). You can both invoke
it the &ldquo;infix&rdquo; way:</p>

<pre><code>Prelude&gt; 2 + 3
5
</code></pre>

<p>&hellip;or by using the usual function application syntax (function first, arguments
later):</p>

<pre><code>Prelude&gt; (+) 2 3
5
</code></pre>

<p>In the case of <code>+</code> we need to surround it with parentheses for it not to be
treated as an infix function.</p>

<p>Let&rsquo;s look at the type of <code>+</code>:</p>

<pre><code>Prelude&gt; :type (+)
(+) :: Num a =&gt; a -&gt; a -&gt; a
</code></pre>

<p>The <code>Num a</code> part indicates that the type variable a must implement the
typeclass <code>Num</code>. That&rsquo;s a fancy way of saying that our arguments (represented
by the <code>a</code>&rsquo;s) must work like numbers. The fact that they&rsquo;re all <code>a</code>&rsquo;s also
means that the arguments and the return value must all have the same type. For
people coming from languages like Java, think of <code>Num</code> as an interface that
each <code>a</code> must implement.</p>

<p>When you see that type declaration you might be thinking thinking &ldquo;Why does it
use the same arrow <code>(-&gt;)</code> for both arguments and return values?&rdquo;</p>

<p>The reason for this is that functions in Haskell actually take only one
argument and either return a result or a new function. For our <code>+</code> function,
this could be shown as follows:</p>

<pre><code>Prelude&gt; :type (+) 2
(+) 2 :: Num a =&gt; a -&gt; a
</code></pre>

<p>Note that this new function takes one <code>a</code> and returns an <code>a</code> (once again, as
long as they&rsquo;re <code>Num</code>). It&rsquo;s the same syntax as before, but this time since
we&rsquo;re at the end of the line, we don&rsquo;t get a function but a result back.</p>

<p>These functions which return &ldquo;intermediate&rdquo; functions due to having more than
one argument are called <em>curried functions</em>. The interesting thing about this
is (as you might have figured out from the <code>(+) 2</code> example) that we can create
so called partially applied functions with great ease.</p>

<p>We could use that previous example to create a handy <code>plusTen</code> function:</p>

<pre><code>Prelude&gt; let plusTen = (+) 10
Prelude&gt; :type plusTen
plusTen :: Integer -&gt; Integer
Prelude&gt; plusTen 10
20
Prelude&gt; plusTen 1
11
</code></pre>

<p>As said, this is a very simple example, but I think we can see some potential
here!</p>

<h2>Partial application in bulk</h2>

<p>So in the example with <code>(+)</code> we created the more rigid <code>plusTen</code> function as an
alternative to being able to add any number to any other number. As you might
have guessed, this comes in handy when you have a useful general function, from
which you can spawn various utility functions, just by setting one or two
arguments to fixed values.</p>

<p>The fact that Haskell considers these partially applied functions as valid
constructs that we can pass around means that you could incorporate them into
more complex structures.</p>

<h3>Selling apples</h3>

<p>Let&rsquo;s imagine that we&rsquo;ve got an apple salesman, standing in the middle of
a town square and he needs to attract the attention of people around him. He&rsquo;s
got red and green apples, and he can either be really loud and obnoxious or
just quietly announce what he has to sell.</p>

<p>Here&rsquo;s some code:</p>

<p>```haskell
module Apples where</p>

<p>data Apple = Green | Red
data Loudness = Loud | Quiet</p>

<p>shouting :: Apple &ndash;> Loudness &ndash;> String
shouting Green Quiet = &ldquo;Emerald green apples; get your Granny Smiths here!&rdquo;
shouting Green Loud  = &ldquo;GREEN APPLES, YOU NEED ONE!&rdquo;
shouting Red   Quiet = &ldquo;Ruby red apples; get your Red Delicious here!&rdquo;
shouting Red   Loud  = &ldquo;RED APPLES DAMMIT, BUY EM'!&rdquo;
```</p>

<p>We&rsquo;re using pattern matching in this case to handle the various
<code>Apple</code>&ndash;<code>Loudness</code> combinations, but it could have been implemented any other
way.</p>

<p>We can try to load this module and make the salesman peddle his apples:</p>

<pre><code>Prelude&gt; :load apples.hs
[1 of 1] Compiling Apples           ( apples.hs, interpreted  )
Ok, modules loaded: Apples.
*Apples&gt; shouting Green Loud
"GREEN APPLES, YOU NEED ONE!"
*Apples&gt; shouting Red Quiet
"Ruby red apples; get your Red Delicious here!"
</code></pre>

<p>OK, so that works, but it would get tedious quick. I mean, we&rsquo;ve got a basket
full of apples to sell:</p>

<pre><code>*Apples&gt; let basket = [Red, Red, Green, Red, Green, Red]
*Apples&gt; :t basket
basket :: [Apple]
</code></pre>

<p>So what if we just generated a lot of functions which already have their Apple set?</p>

<h3>Other spices</h3>

<p>The <code>zipWith</code> function takes two lists, takes the head of both of the lists and
apply a given function to both of the values. The result is put into a new
array, then this is repeated until one of the first two lists have run out of
elements. An example:</p>

<pre><code>*Apples&gt; zipWith (+) [1,1,1,1] [1,2,3,4]
[2,3,4,5]
</code></pre>

<p>There&rsquo;s another function which is generally used as an infix operator that&rsquo;s
called <code>$</code>. It serves the purpose of eliminating parentheses. Look at the
following example and see that the two calls are equivalent:</p>

<pre><code>*Apples&gt; head $ reverse $ "Hello!"
'!'
*Apples&gt; head ( reverse ( "Hello!" ) )
'!'
</code></pre>

<p>We&rsquo;ll bring in a final function to help us, <code>repeat</code>. It creates an infinite
list of whatever you give it. Since Haskell is lazily evaluated, as long as you
only take a fixed number of elements from this list, having an infinite list is
totally fine:</p>

<pre><code>*Apples&gt; take 4 $ repeat 1
[1,1,1,1]
</code></pre>

<h3>Putting it all together</h3>

<p>Let&rsquo;s combine them all and generate some &ldquo;Apple-fixed&rdquo; functions!</p>

<pre><code>*Apples&gt; let basketShouting = zipWith ($) (repeat shouting) basket
*Apples&gt; :t basketShouting
basketShouting :: [Loudness -&gt; String]
</code></pre>

<p>Lots of stuff going on here so let&rsquo;s take it piece by piece.</p>

<p>We take the function <code>($)</code> and give its first argument from the first list.
This list is an infinite list that looks like this:</p>

<pre><code>[shouting, shouting, shouting...]
</code></pre>

<p>As the second argument for the <code>$</code> function we take the first element from the
second list. The second list looks like this:</p>

<pre><code>[Red, Red, Green, Red, Green]
</code></pre>

<p>Do this until one list runs out of elements (hint: it&rsquo;s not the infinite one),
and our resulting list will look something like this:</p>

<pre><code>[shouting Red, shouting Red, shouting Green, shouting Red, shouting Green]
</code></pre>

<p>You see, we used <code>$</code> to &ldquo;bind&rdquo; the function and the argument together. Since
function argument is the same thing as function $ argument we can use that
operator to tie things together as nicely as we&rsquo;ve done here.</p>

<p>I should mention that the more experienced readers might be saying &ldquo;Hey, why
not just use a <code>map</code> instead of <code>zipWith</code>?&rdquo;</p>

<p>Good point, but where&rsquo;s the fun in that? :-P</p>

<p>To continue: with this collection of partially applied functions, it&rsquo;s as if
the peddler is holding the apples, just having to decide whether he wants to be
<code>Loud</code> or <code>Quiet</code>. He could for instance decide that he wants to start <code>Quiet</code>
with the first apple:</p>

<pre><code>*Apples&gt; (head basketShouting) Quiet
"Ruby red apples; get your Red Delicious here!"
</code></pre>

<p>Then he might want to <code>Loud</code>ly sell his third apple:</p>

<pre><code>*Apples&gt; (basketShouting !! 2) Loud
"GREEN APPLES, YOU NEED ONE!"
</code></pre>

<p>The <code>!!</code> function takes a list index (starting with zero).</p>

<p>Finally we could go ahead and have the guy sell all of the apples:</p>

<pre><code>*Apples&gt; zipWith ($) basketShouting (repeat Loud)
["RED APPLES DAMMIT, BUY EM'!","RED APPLES DAMMIT, BUY EM'!","GREEN APPLES, YOU NEED ONE!","RED APPLES DAMMIT, BUY EM'!","GREEN APPLES, YOU NEED ONE!"]
</code></pre>

<p>Let&rsquo;s turn this into a newline separated string and have it look like some real
output:</p>

<pre><code>*Apples&gt; putStrLn $ unlines $ zipWith ($) basketShouting (repeat Loud)
RED APPLES DAMMIT, BUY EM'!
RED APPLES DAMMIT, BUY EM'!
GREEN APPLES, YOU NEED ONE!
RED APPLES DAMMIT, BUY EM'!
GREEN APPLES, YOU NEED ONE!
</code></pre>

<p>And there we have it! Loud and clear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim plugins - Why, How and Which]]></title>
    <link href="http://linduxed.github.io/blog/2013/04/13/vim-plugins-why/"/>
    <updated>2013-04-13T21:12:33+00:00</updated>
    <id>http://linduxed.github.io/blog/2013/04/13/vim-plugins-why</id>
    <content type="html"><![CDATA[<p>A lot of times when I meet &ldquo;Vim neophytes&rdquo; they mention that Vim is a great
editor, but they miss certain features that they find in their previous
editor/IDE of choice. Often this will be a case of them not having learnt the
Vim way of doing the same task, but occasionally you&rsquo;ll have to tell them that
&ldquo;Vim doesn&rsquo;t do that&rdquo;.<br/>
Indeed, these days if you don&rsquo;t want to hop between different applications (all
of them having the primary purpose of editing text of some kind) you&rsquo;ll want
features that go beyond &ldquo;editing text&rdquo;.</p>

<h4>These days an editor can&rsquo;t just be an editor.</h4>

<!--more-->


<p>I&rsquo;ve met programmers who say that they&rsquo;re fine with using Eclipse for Java, Vim
for Ruby and then nano for minor edits in configuration files. Any workflow like
this makes no sense to me, since I wouldn&rsquo;t want to edit text in anything that
isn&rsquo;t Vim. Most people don&rsquo;t see how it could be any different&hellip;</p>

<p>&hellip;until you show them the wealth of plugins available.</p>

<h2>How to get them installed</h2>

<p>The classic way of installing plugins is to get the latest version from
<a href="http://www.vim.org/scripts/index.php">vim.org&rsquo;s scripts</a> page in the form of an
archive and just extract the contents into <code>~/.vim/</code>.</p>

<p>Now that you know about how it was done once upon a time, please refrain from
ever using this method (unless you want a spectacular mess inside your
Vim-directory).</p>

<p>These days people have plugins in separate directories, all of them stored in
some central plugin directory (most often <code>~/vim/bundle</code>). These plugin
directories are in turn loaded by some &ldquo;plugin handler&rdquo;, of which there are
many.</p>

<p>A lengthy list of handlers <a href="http://vim-scripts.org/vim/tools.html">can be found here</a>. It doesn&rsquo;t matter that much which one
you choose, but it might be a good idea to go with one of the more popular ones,
which are Pathogen, Vundle and VAM (vim-addon-manager).</p>

<h2>My setup</h2>

<p>I prefer to do the handling and updating of plugins outside of Vim, so I&rsquo;ve got
the following setup:</p>

<p>I&rsquo;ve got a &ldquo;dotfiles&rdquo; git-repository to which I&rsquo;ve added my Vim-plugins as
submodules. This allows me to update all my plugins (along with any other
git-repos I&rsquo;ve added as dotfiles) with one command (alias it to something
shorter):</p>

<pre><code>git submodule foreach git pull origin master
</code></pre>

<p>Committing these updated plugins with <code>git commit -a</code> and pushing the dotfiles
repo will then allow me to clone the repo anywhere and get all my plugins at the
same time (just make sure to clone with the <code>--recursive</code> flag).</p>

<p>Standing in <code>~</code>, adding the plugins would be done with a command like this:</p>

<pre><code>git submodule add git://github.com/linduxed/vim-linduxed-theme.git .vim/bundle/vim-linduxed-theme
</code></pre>

<p>I then use Pathogen to load all the plugins (read its FAQ about adding it as
a submodule, if that interests you).</p>

<p>I should also mention that while not necessary, structuring up your <code>~/.vimrc</code>
somewhat could be of great help, since it will increase in size after you start
adding plugins. <code>:set foldmethod=marker</code> and <a href="https://github.com/linduxed/dotfiles/blob/master/.vimrc">adding some markers</a> helps a lot.</p>

<p>If you don&rsquo;t already have a <code>.vimrc</code>, this is a <a href="https://github.com/tpope/vim-sensible">good starting point</a>.</p>

<h2>Which plugins do I get?</h2>

<p>There are quite a few plugins out there, so I&rsquo;ll just get you started with those
that I find most significantly improve my Vim experience. Click on the plugin
names to be taken to their respective repositories.</p>

<p>If you&rsquo;re hungry for more after going through this list, check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the other plugins I&rsquo;ve got in my setup</a> and go to
<a href="http://vim-scripts.org/">Vim Scripts</a> or <a href="http://www.vim.org/scripts/index.php">the official script page</a>.</p>

<h3>File and buffer navigation</h3>

<h4><a href="https://github.com/kien/ctrlp.vim/">CTRLP</a></h4>

<p>There are a few fuzzy-search plugins out there, the most well known ones being
<a href="https://github.com/wincent/Command-T">Command-T</a>, <a href="https://bitbucket.org/ns9tks/vim-fuzzyfinder/">FuzzyFinder</a> and CTRLP. While they&rsquo;re all
pretty similar when it comes to finding files, I like CTRLP a bit more because
it lets you fuzzy find among buffers and most-recently-used files as well.</p>

<p>As long as you know the name of the file you&rsquo;re looking for, this type of plugin
takes care of most file opening operations, due to it being so quick.</p>

<p>In case you haven&rsquo;t seen fuzzy-finders before, here&rsquo;s a quick demonstration. This is what it looks like when I look for <code>game/ai/ai_dropnodes.c</code> in the <a href="http://www.warsow.net/">Warsow</a> source code:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/ctrlp.gif' width='' height='' title='CTRLP in action. Looking for <code>ai_dropnodes.c</code>.'><span class='caption-text'>CTRLP in action. Looking for <code>ai_dropnodes.c</code>.</span></span></p>

<h4><a href="https://github.com/sandeepcr529/Buffet.vim">buffet</a></h4>

<p>There&rsquo;s a lot of overlap between CTRLP&rsquo;s buffer switching functionality and the
functionality of buffet, but if you want a tool that does nothing but switch
between buffers swiftly, this plugin is probably it.</p>

<h4><a href="https://github.com/scrooloose/nerdtree.git">nerdtree</a></h4>

<p>While I&rsquo;m using it less and less due to CTRLP, nerdtree is still the easiest way
to explore your filesystem without exiting Vim.</p>

<h3>Code writing helpers</h3>

<h4><a href="https://github.com/Lokaltog/vim-easymotion.git">vim-easymotion</a></h4>

<p>The big one. This plugin changed the way I move around in code completely. While
Vim gives you a great set of tools to move around in code (one of the things
that take the longest to master), this plugin takes it to another level. It&rsquo;s
probably the closest thing to mouse cursor accuracy you can get, while not
wasting time to fetch the mouse itself.</p>

<p>Words don&rsquo;t do this justice, so here&rsquo;s a video:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Dmv6-dguS3g" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<h4><a href="https://github.com/tpope/vim-surround">vim-surround</a></h4>

<p>Makes the task of surrounding text with quotes, parentheses, brackets, etc. much
easier. Also provides quick removal and changing of surrounding characters.</p>

<h4><a href="https://github.com/garbas/vim-snipmate.git">vim-snipmate</a></h4>

<p>If you haven&rsquo;t used an editor with snippets before, it&rsquo;s basically a set of
templates, small pieces of code which are often used in which you fill out the
relevant fields.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xV2IsE5OHd4" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<p>I should mention that at the time of writing the linked project has its
development slowed down, with another project called <a href="https://github.com/SirVer/ultisnips">UltiSnips</a> getting a lot of traction (along with
a <a href="https://github.com/MarcWeber/ultisnips/">fork</a> made by an ex-snipmate
developer).</p>

<p>The situation is a bit complicated, but at the moment snipmate works fine for me
so I don&rsquo;t see a reason to switch.</p>

<h4><a href="https://github.com/scrooloose/nerdcommenter.git">nerdcommenter</a></h4>

<p>Indispensable plugin that makes the creation and handling of comments in code
a breeze.</p>

<h4><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h4>

<p>Inserts a closing parenthesis, bracket, curly brace or quote when you insert an
opening one. Also knows what to do with braces if you press enter inside them
(indentation and new empty line between them) along with some other nice things.</p>

<p>There&rsquo;s also <a href="https://github.com/Townk/vim-autoclose">AutoClose</a> which does
pretty much the same thing.</p>

<h4><a href="https://github.com/godlygeek/tabular.git">tabular</a></h4>

<p>For the people who like their code pretty (I obsess over that kind of stuff)
this plugin aligns code.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/tabular.gif' width='' height='' title='Tabular lining stuff up.'><span class='caption-text'>Tabular lining stuff up.</span></span></p>

<h3>Miscellaneous</h3>

<h4><a href="https://github.com/linduxed/vim-linduxed-theme.git">vim-linduxed-theme</a></h4>

<p>This is here for two reasons:</p>

<ol>
<li>Plugging your own stuff is always nice.</li>
<li>People should get any theme.</li>
</ol>


<p>Seriously, the stock themes aren&rsquo;t that pretty and the ones you can find on the
internet are both varied and beautiful (not to mention that some have more
detailed syntax highlighting).</p>

<p>Here&rsquo;s a list of repos to look through (there are many others):</p>

<ul>
<li><a href="https://github.com/tpope/vim-vividchalk">Vividchalk</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees' color scheme collection</a></li>
<li><a href="https://github.com/altercation/solarized">Solarized</a></li>
<li><a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow</a></li>
</ul>


<h4><a href="https://github.com/sjl/gundo.vim.git">gundo.vim</a></h4>

<p>Many people aren&rsquo;t even aware of the fact that Vim has a branching undo history,
but this plugin makes it accessible. It upgrades the undo-tree from &ldquo;never use
it&rdquo; to &ldquo;use it all the time&rdquo;.</p>

<h4><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></h4>

<p><blockquote><p>I&rsquo;m not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time.</p><footer><strong>Tim Pope</strong></footer></blockquote></p>

<p>I&rsquo;ll have to agree. The extensive functionality is covered in detailed by Drew
Neil in his Vimcasts videos, starting at <a href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/">episode #31</a>.</p>

<p>If I was to pick just one of the many great features this plugin provides, then
it&rsquo;s the ability to open up the index version of the files and edit that while
having the version from the working directory open. This is like a superior
version of <code>git add --patch</code>, which is reason enough to get this.</p>

<h4><a href="https://github.com/scrooloose/syntastic">syntastic</a></h4>

<p>This plugin runs your code through a linter or syntax checker upon every save
and loads the warnings/errors into the location list and displays markers in the
gutter to indicate on what rows the warnings/errors are.</p>

<p>Incredibly helpful, you wouldn&rsquo;t know how much until you&rsquo;ve tried it. Syntastic
has code ready for the major linters/checkers/compilers for most languages.</p>

<p>Here&rsquo;s me fixing some warnings that pylint gives about &ldquo;no space after comma&rdquo;
(pylint warns about non-compliance with <a href="http://www.python.org/dev/peps/pep-0008/">PEP8</a>):</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/syntastic.gif' width='' height='' title='Syntastic giving warnings with the help of pylint.'><span class='caption-text'>Syntastic giving warnings with the help of pylint.</span></span></p>

<h4><a href="https://github.com/tpope/vim-unimpaired">vim-unimpaired</a></h4>

<p>Gives you a set of very useful bindings.</p>

<h2>Only the beginning</h2>

<p>The big category of plugins that I&rsquo;ve omitted is language/framework specific
plugins. I&rsquo;ve got a lot of those, but each specific one might not be useful to
everyone. With that said, there are some language specific plugins that are
really powerful and should most definitely be used if they align with what
you&rsquo;re coding in (<a href="https://github.com/tpope/vim-rails"><code>rails.vim</code> by Tim Pope</a>
is, from what I&rsquo;ve heard, considered to be a major source of Vim converts from
TextMate).</p>

<p>Once you start customizing your Vim, you&rsquo;ll notice that there are many areas
which you can improve with a plugin here and there. Just remember to stop and
consider if the functionality you&rsquo;re looking for isn&rsquo;t already available in
stock Vim.</p>

<p>As mentioned before, if you need some inspiration you can check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the plugins I use</a> and if you&rsquo;ve got
any problems, just fire up your IRC client of choice and head over to
<code>#vim@freenode.org</code>.</p>
]]></content>
  </entry>
  
</feed>
