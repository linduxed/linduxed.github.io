<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Rants of a geek]]></title>
  <link href="http://linduxed.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://linduxed.github.io/"/>
  <updated>2014-06-22T18:43:00+02:00</updated>
  <id>http://linduxed.github.io/</id>
  <author>
    <name><![CDATA[linduxed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Macros and the expression register in Vim]]></title>
    <link href="http://linduxed.github.io/blog/2013/05/28/macros-and-the-expression-register-in-vim/"/>
    <updated>2013-05-28T18:30:28+02:00</updated>
    <id>http://linduxed.github.io/blog/2013/05/28/macros-and-the-expression-register-in-vim</id>
    <content type="html"><![CDATA[<p>Macros and expressions are two tools that serve the purpose of saving you from
either repeating a tedious process or the time switching back and forth between
shells to run scripts to manipulate your data with. Both can be (and often are)
used separately, but can be used in tandem to do some pretty cool stuff.</p>

<p>So let&rsquo;s introduce them and see how they work.</p>

<!--more-->


<h2>Creating macros</h2>

<p>Macros are series of commands that you can record by typing <code>q</code> and then some
register name. This starts a recording of user input that can then be replayed.</p>

<p>Let&rsquo;s do something simple to demonstrate:</p>

<ol>
<li><code>qq</code> starts recording into the <code>q</code> register.</li>
<li><code>e</code> moves to the end of the word.</li>
<li><code>a"</code> to add a quotation mark right after the word.</li>
<li><code>&lt;esc&gt;</code> leave Insert-mode.</li>
<li><code>b</code> move to the start of the word.</li>
<li><code>i"</code> add another quotation mark.</li>
<li><code>f"</code> jump to the second quotation mark for convenience.</li>
<li><code>q</code> stop recording.</li>
</ol>


<p>Yes, you probably use <a href="https://github.com/tpope/vim-surround">vim-surround</a> for
this kind of thing, but this macro will allow you to surround a word with
quotation marks quickly by just pressing <code>@q</code>, and then replay the last macro
with <code>@@</code>.</p>

<h2>More interesting macros</h2>

<p>While it is a simple task that you wouldn&rsquo;t want to repeat doing (which makes
qualify for something you should put into a macro), I&rsquo;d expect myself to use
macros for bigger tasks.</p>

<p>Let&rsquo;s for instance take some CSS:</p>

<p>```css</p>

<h1>navigation li {</h1>

<pre><code>display: inline;
list-style: none;
height: 22px;
</code></pre>

<p>}</p>

<h1>navigation li a {</h1>

<pre><code>color: #ffffff;
line-height: 22px;
font-size: 11px;
text-decoration: none;
padding: 5px 15px 6px 15px;
border-right: 1px solid #ffffff;
</code></pre>

<p>}</p>

<h1>footer {</h1>

<pre><code>font-size: 11px;
color: #aeaeae;
width: 670px;
margin-bottom: 20px;
</code></pre>

<p>}
```</p>

<p>This just some blocks of code from something I found on the internet. Let&rsquo;s
sort each block alphabetically, then join the lines in them so we get one-line
blocks.</p>

<h3>Rules for macro creation</h3>

<p>The first thing you have to do when creating more complex macros is identifying
what the blocks of code your macro will manipulate have in common.</p>

<p>If the lines differ a lot and have little to no structure, you might only be
able to use the beginning or end of the line as a fix point. In the CSS example
above we have braces, colons and semicolons to go with. It&rsquo;s all about finding
those important things that your macro can hold onto, so that when you play the
macro in another place, it&rsquo;ll still work the same due to you fixating the
motions against a common patterns.</p>

<p>This means that you&rsquo;ll have to give the creation of macros a bit more thought
than you&rsquo;d expect. Some cases are simple, where you just start the macro off by
going to the beginning of the line, but others (as we&rsquo;ll see) need more effort.</p>

<h3>The procedure</h3>

<p>First we decide where the editing will start. This is important because if we&rsquo;d
like to be able to chain together multiple executions of the macro (you might
have ten or more blocks need the same treatment), so you&rsquo;ll have to end the
macro by finding the same position you started from, just in the next block
you&rsquo;ll run the macro on.</p>

<p>In this case this will be the beginning of the line with the right brace. I&rsquo;m
phrasing it this way because braces are easy to search for.</p>

<p>So position the cursor at the <code>#</code> in <code>#navigation li {</code> and let&rsquo;s go:</p>

<ol>
<li>We start the macro by pressing <code>qq</code>.</li>
<li>Move one line down with <code>j</code>.</li>
<li>Enable Visual-line-mode with <code>V</code>.</li>
<li>We&rsquo;ll now search downwards to the left brace, since we know that is where
the block ends, so <code>/}&lt;cr&gt;</code>.</li>
<li>This is one line too far however, so we back up one line with <code>k</code>.</li>
<li>Let&rsquo;s sort these lines with <code>:sort</code>.</li>
<li>This puts the cursor up at the top of the previous visual selection, so we
move one line up with <code>k</code> to the start of the block.</li>
<li>Now we enter Visual-line-mode with <code>V</code> again and search for the left brace
with <code>/}&lt;cr&gt;</code></li>
<li>Join the lines with <code>J</code>.</li>
<li>Search for the start of the next block by typing <code>/{&lt;cr&gt;</code>.</li>
<li>Move to where we started, that is the beginning of the line with <code>0</code>.</li>
</ol>


<p>By doing steps 10 and 11 you can repeat the macro for any amount of consecutive
blocks that you want to use the macro on. In this specific case we could have
skipped starting at the beginning, the right brace would have been a fine
starting position as well.<br/>
The point is however that if you want to have a perfectly repeatable macro,
then you have to start from the same place, work with the same structure of
code and end in the same place.</p>

<p>Figuring out how the code you manipulate is built is the key to making macros
repeatable.</p>

<h2>The expression register</h2>

<p>This register serves the purpose of entering Vimscript expressions while not
leaving Insert-mode. This can be handy if you want to incorporate some value
stored in a variable into your macros.</p>

<p>Let&rsquo;s see how it works first:</p>

<p>You enter Insert-mode, hit <code>Ctrl-R</code> and then <code>=</code>. This gives you a small prompt
starting with a <code>=</code>. Here you could for instance type <code>&amp;et</code> to evaluate the
expanded tabs variable, having the expression either print <code>0</code> or <code>1</code>.</p>

<p>There&rsquo;s not much more to the procedure itself, but the expression register
depends on you being somewhat familiar with Vimscript, if you&rsquo;re to make
interesting stuff happen. You can read a lot more over in <code>:help expression</code>.</p>

<h3>Two examples</h3>

<p>The most often demonstrated use case is basic calculation. Don&rsquo;t know what
<code>123*456+789</code> equals? Do this then:</p>

<ol>
<li>Go into Insert-mode where you want the result to end up.</li>
<li>Hit <code>Ctrl-r</code> then <code>=</code>.</li>
<li>Write <code>123*456+789</code> then press Enter.</li>
</ol>


<p>That&rsquo;s it! Another example would be to call upon a script or command with an
expression, so if you want to insert the current date you could do something
like this (when the expression register is opened):</p>

<pre><code>=system('date')
</code></pre>

<p>Yes, this could also be done with <code>:r!date</code> for instance, which highlights the
fact that the expression register is more suited for Vimscript expressions (as
the name implies), but it works.</p>

<h2>Combining the two</h2>

<p>Since variables can be printed with the expression register, a way to use this
in macros would be to use a variable as a counter, print its value and then
increment it for each step.</p>

<p>Let&rsquo;s take this markdown text&hellip;</p>

<p><code>
* Some
* Arbitrary
* Text
</code></p>

<p>&hellip;and let&rsquo;s replace the asterisks with numbers:</p>

<ol>
<li>We place the cursor at the start of the first line.</li>
<li>We set a counter variable with <code>:let c=1</code>.</li>
<li>Start recording the macro with <code>qq</code>.</li>
<li><code>cl</code> for changing the asterisk.</li>
<li>Enter the expression register, type <code>c</code> and hit Enter.</li>
<li>Add a period to make it look nicer and leave Insert-mode.</li>
<li>Move down one line and then to the start of the line, so we start the next
iteration from the same position.</li>
<li>Increment the counter with <code>:let c+=1</code>.</li>
<li>Close the macro with <code>q</code>.</li>
</ol>


<p>This can now be replayed with <code>@q</code> and then <code>@@</code> across the entire list. The
main issue with this macro would be that it ends by moving down one line,
assuming that all bullet points are one line long at most.</p>

<p>A better solution would be to search for the next asterisk, which would
indicate a bullet point. But what if there&rsquo;s an asterisk in the text? Well then
we should search for a leading asterisk.</p>

<p>As you can see you have to adjust the precision of your movement yourself to
the use case, but that&rsquo;s something you&rsquo;ll get to explore on your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim plugins - Why, How and Which]]></title>
    <link href="http://linduxed.github.io/blog/2013/04/13/vim-plugins-why/"/>
    <updated>2013-04-13T23:12:33+02:00</updated>
    <id>http://linduxed.github.io/blog/2013/04/13/vim-plugins-why</id>
    <content type="html"><![CDATA[<p>A lot of times when I meet &ldquo;Vim neophytes&rdquo; they mention that Vim is a great
editor, but they miss certain features that they find in their previous
editor/IDE of choice. Often this will be a case of them not having learnt the
Vim way of doing the same task, but occasionally you&rsquo;ll have to tell them that
&ldquo;Vim doesn&rsquo;t do that&rdquo;.<br/>
Indeed, these days if you don&rsquo;t want to hop between different applications (all
of them having the primary purpose of editing text of some kind) you&rsquo;ll want
features that go beyond &ldquo;editing text&rdquo;.</p>

<h4>These days an editor can&rsquo;t just be an editor.</h4>

<!--more-->


<p>I&rsquo;ve met programmers who say that they&rsquo;re fine with using Eclipse for Java, Vim
for Ruby and then nano for minor edits in configuration files. Any workflow like
this makes no sense to me, since I wouldn&rsquo;t want to edit text in anything that
isn&rsquo;t Vim. Most people don&rsquo;t see how it could be any different&hellip;</p>

<p>&hellip;until you show them the wealth of plugins available.</p>

<h2>How to get them installed</h2>

<p>The classic way of installing plugins is to get the latest version from
<a href="http://www.vim.org/scripts/index.php">vim.org&rsquo;s scripts</a> page in the form of an
archive and just extract the contents into <code>~/.vim/</code>.</p>

<p>Now that you know about how it was done once upon a time, please refrain from
ever using this method (unless you want a spectacular mess inside your
Vim-directory).</p>

<p>These days people have plugins in separate directories, all of them stored in
some central plugin directory (most often <code>~/vim/bundle</code>). These plugin
directories are in turn loaded by some &ldquo;plugin handler&rdquo;, of which there are
many.</p>

<p>A lengthy list of handlers <a href="http://vim-scripts.org/vim/tools.html">can be found here</a>. It doesn&rsquo;t matter that much which one
you choose, but it might be a good idea to go with one of the more popular ones,
which are Pathogen, Vundle and VAM (vim-addon-manager).</p>

<h2>My setup</h2>

<p>I prefer to do the handling and updating of plugins outside of Vim, so I&rsquo;ve got
the following setup:</p>

<p>I&rsquo;ve got a &ldquo;dotfiles&rdquo; git-repository to which I&rsquo;ve added my Vim-plugins as
submodules. This allows me to update all my plugins (along with any other
git-repos I&rsquo;ve added as dotfiles) with one command (alias it to something
shorter):</p>

<pre><code>git submodule foreach git pull origin master
</code></pre>

<p>Committing these updated plugins with <code>git commit -a</code> and pushing the dotfiles
repo will then allow me to clone the repo anywhere and get all my plugins at the
same time (just make sure to clone with the <code>--recursive</code> flag).</p>

<p>Standing in <code>~</code>, adding the plugins would be done with a command like this:</p>

<pre><code>git submodule add git://github.com/linduxed/vim-linduxed-theme.git .vim/bundle/vim-linduxed-theme
</code></pre>

<p>I then use Pathogen to load all the plugins (read its FAQ about adding it as
a submodule, if that interests you).</p>

<p>I should also mention that while not necessary, structuring up your <code>~/.vimrc</code>
somewhat could be of great help, since it will increase in size after you start
adding plugins. <code>:set foldmethod=marker</code> and <a href="https://github.com/linduxed/dotfiles/blob/master/.vimrc">adding some markers</a> helps a lot.</p>

<p>If you don&rsquo;t already have a <code>.vimrc</code>, this is a <a href="https://github.com/tpope/vim-sensible">good starting point</a>.</p>

<h2>Which plugins do I get?</h2>

<p>There are quite a few plugins out there, so I&rsquo;ll just get you started with those
that I find most significantly improve my Vim experience. Click on the plugin
names to be taken to their respective repositories.</p>

<p>If you&rsquo;re hungry for more after going through this list, check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the other plugins I&rsquo;ve got in my setup</a> and go to
<a href="http://vim-scripts.org/">Vim Scripts</a> or <a href="http://www.vim.org/scripts/index.php">the official script page</a>.</p>

<h3>File and buffer navigation</h3>

<h4><a href="https://github.com/kien/ctrlp.vim/">CTRLP</a></h4>

<p>There are a few fuzzy-search plugins out there, the most well known ones being
<a href="https://github.com/wincent/Command-T">Command-T</a>, <a href="https://bitbucket.org/ns9tks/vim-fuzzyfinder/">FuzzyFinder</a> and CTRLP. While they&rsquo;re all
pretty similar when it comes to finding files, I like CTRLP a bit more because
it lets you fuzzy find among buffers and most-recently-used files as well.</p>

<p>As long as you know the name of the file you&rsquo;re looking for, this type of plugin
takes care of most file opening operations, due to it being so quick.</p>

<p>In case you haven&rsquo;t seen fuzzy-finders before, here&rsquo;s a quick demonstration. This is what it looks like when I look for <code>game/ai/ai_dropnodes.c</code> in the <a href="http://www.warsow.net/">Warsow</a> source code:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/ctrlp.gif' width='' height='' title='CTRLP in action. Looking for <code>ai_dropnodes.c</code>.'><span class='caption-text'>CTRLP in action. Looking for <code>ai_dropnodes.c</code>.</span></span></p>

<h4><a href="https://github.com/sandeepcr529/Buffet.vim">buffet</a></h4>

<p>There&rsquo;s a lot of overlap between CTRLP&rsquo;s buffer switching functionality and the
functionality of buffet, but if you want a tool that does nothing but switch
between buffers swiftly, this plugin is probably it.</p>

<h4><a href="https://github.com/scrooloose/nerdtree.git">nerdtree</a></h4>

<p>While I&rsquo;m using it less and less due to CTRLP, nerdtree is still the easiest way
to explore your filesystem without exiting Vim.</p>

<h3>Code writing helpers</h3>

<h4><a href="https://github.com/Lokaltog/vim-easymotion.git">vim-easymotion</a></h4>

<p>The big one. This plugin changed the way I move around in code completely. While
Vim gives you a great set of tools to move around in code (one of the things
that take the longest to master), this plugin takes it to another level. It&rsquo;s
probably the closest thing to mouse cursor accuracy you can get, while not
wasting time to fetch the mouse itself.</p>

<p>Words don&rsquo;t do this justice, so here&rsquo;s a video:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Dmv6-dguS3g" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<h4><a href="https://github.com/tpope/vim-surround">vim-surround</a></h4>

<p>Makes the task of surrounding text with quotes, parentheses, brackets, etc. much
easier. Also provides quick removal and changing of surrounding characters.</p>

<h4><a href="https://github.com/garbas/vim-snipmate.git">vim-snipmate</a></h4>

<p>If you haven&rsquo;t used an editor with snippets before, it&rsquo;s basically a set of
templates, small pieces of code which are often used in which you fill out the
relevant fields.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xV2IsE5OHd4" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<p>I should mention that at the time of writing the linked project has its
development slowed down, with another project called <a href="https://github.com/SirVer/ultisnips">UltiSnips</a> getting a lot of traction (along with
a <a href="https://github.com/MarcWeber/ultisnips/">fork</a> made by an ex-snipmate
developer).</p>

<p>The situation is a bit complicated, but at the moment snipmate works fine for me
so I don&rsquo;t see a reason to switch.</p>

<h4><a href="https://github.com/scrooloose/nerdcommenter.git">nerdcommenter</a></h4>

<p>Indispensable plugin that makes the creation and handling of comments in code
a breeze.</p>

<h4><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h4>

<p>Inserts a closing parenthesis, bracket, curly brace or quote when you insert an
opening one. Also knows what to do with braces if you press enter inside them
(indentation and new empty line between them) along with some other nice things.</p>

<p>There&rsquo;s also <a href="https://github.com/Townk/vim-autoclose">AutoClose</a> which does
pretty much the same thing.</p>

<h4><a href="https://github.com/godlygeek/tabular.git">tabular</a></h4>

<p>For the people who like their code pretty (I obsess over that kind of stuff)
this plugin aligns code.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/tabular.gif' width='' height='' title='Tabular lining stuff up.'><span class='caption-text'>Tabular lining stuff up.</span></span></p>

<h3>Miscellaneous</h3>

<h4><a href="https://github.com/linduxed/vim-linduxed-theme.git">vim-linduxed-theme</a></h4>

<p>This is here for two reasons:</p>

<ol>
<li>Plugging your own stuff is always nice.</li>
<li>People should get any theme.</li>
</ol>


<p>Seriously, the stock themes aren&rsquo;t that pretty and the ones you can find on the
internet are both varied and beautiful (not to mention that some have more
detailed syntax highlighting).</p>

<p>Here&rsquo;s a list of repos to look through (there are many others):</p>

<ul>
<li><a href="https://github.com/tpope/vim-vividchalk">Vividchalk</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees' color scheme collection</a></li>
<li><a href="https://github.com/altercation/solarized">Solarized</a></li>
<li><a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow</a></li>
</ul>


<h4><a href="https://github.com/sjl/gundo.vim.git">gundo.vim</a></h4>

<p>Many people aren&rsquo;t even aware of the fact that Vim has a branching undo history,
but this plugin makes it accessible. It upgrades the undo-tree from &ldquo;never use
it&rdquo; to &ldquo;use it all the time&rdquo;.</p>

<h4><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></h4>

<p><blockquote><p>I&rsquo;m not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time.</p><footer><strong>Tim Pope</strong></footer></blockquote></p>

<p>I&rsquo;ll have to agree. The extensive functionality is covered in detailed by Drew
Neil in his Vimcasts videos, starting at <a href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/">episode #31</a>.</p>

<p>If I was to pick just one of the many great features this plugin provides, then
it&rsquo;s the ability to open up the index version of the files and edit that while
having the version from the working directory open. This is like a superior
version of <code>git add --patch</code>, which is reason enough to get this.</p>

<h4><a href="https://github.com/scrooloose/syntastic">syntastic</a></h4>

<p>This plugin runs your code through a linter or syntax checker upon every save
and loads the warnings/errors into the location list and displays markers in the
gutter to indicate on what rows the warnings/errors are.</p>

<p>Incredibly helpful, you wouldn&rsquo;t know how much until you&rsquo;ve tried it. Syntastic
has code ready for the major linters/checkers/compilers for most languages.</p>

<p>Here&rsquo;s me fixing some warnings that pylint gives about &ldquo;no space after comma&rdquo;
(pylint warns about non-compliance with <a href="http://www.python.org/dev/peps/pep-0008/">PEP8</a>):</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/blog/syntastic.gif' width='' height='' title='Syntastic giving warnings with the help of pylint.'><span class='caption-text'>Syntastic giving warnings with the help of pylint.</span></span></p>

<h4><a href="https://github.com/tpope/vim-unimpaired">vim-unimpaired</a></h4>

<p>Gives you a set of very useful bindings.</p>

<h2>Only the beginning</h2>

<p>The big category of plugins that I&rsquo;ve omitted is language/framework specific
plugins. I&rsquo;ve got a lot of those, but each specific one might not be useful to
everyone. With that said, there are some language specific plugins that are
really powerful and should most definitely be used if they align with what
you&rsquo;re coding in (<a href="https://github.com/tpope/vim-rails"><code>rails.vim</code> by Tim Pope</a>
is, from what I&rsquo;ve heard, considered to be a major source of Vim converts from
TextMate).</p>

<p>Once you start customizing your Vim, you&rsquo;ll notice that there are many areas
which you can improve with a plugin here and there. Just remember to stop and
consider if the functionality you&rsquo;re looking for isn&rsquo;t already available in
stock Vim.</p>

<p>As mentioned before, if you need some inspiration you can check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the plugins I use</a> and if you&rsquo;ve got
any problems, just fire up your IRC client of choice and head over to
<code>#vim@freenode.org</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not ready for the switch]]></title>
    <link href="http://linduxed.github.io/blog/2012/05/10/not-ready-for-the-switch/"/>
    <updated>2012-05-10T14:12:25+02:00</updated>
    <id>http://linduxed.github.io/blog/2012/05/10/not-ready-for-the-switch</id>
    <content type="html"><![CDATA[<p>Yesterday, for some unknown reason, <a href="http://5digits.org/pentadactyl/">Pentadactyl</a> decided that it didn&rsquo;t want to work any more.
I still have no idea why, and since I&rsquo;ve been suspending my computer for quite
a few days now, it might actually have to do with me upgrading Firefox from 11
to 12 quite recently. The problem was actually pretty easily solved by
downloading the latest nightly and just fire that up, but before I did that, the
sudden loss of Vim-style navigation inspired me to pick up an old project of
mine:</p>

<p>Moving from Firefox to uzbl.</p>

<!--more-->


<h2>It sounds so beautiful</h2>

<p>For those who don&rsquo;t know what <a href="http://www.uzbl.org/">uzbl</a> is, it&rsquo;s basically
a browser that adheres to the UNIX philosophy of &ldquo;doing one thing and doing it
well&rdquo;. What that means is that the browser is split up into small pieces; you
have <code>uzbl-core</code> which is not much more than Webkit with some interfaces on top
of it, and the actual thing that resembles a browser is either <code>uzbl-browser</code> or
<code>uzbl-tabbed</code>.<br/>
You know you&rsquo;re in for a ride if the developers initially didn&rsquo;t have
<code>uzbl-tabbed</code> at all since &ldquo;window managers should be handling the different
instances of the browser, not the browser itself&rdquo;. All the basic functionality
that one takes for granted in other browsers that aren&rsquo;t strictly browsing are
extras here; bookmarks, downloading, completion and other functionality that you
come to expect are scripts that are loaded by the main configuration file.</p>

<h2>But the beauty comes at a price</h2>

<p>If the application is nice then I&rsquo;m willing to put the time into configuring it.
Whether it&rsquo;s my ZSH terminal, Vim, Firefox or something else, I&rsquo;ll put in the
work to get it <em>just right</em> if I know that I can get that magnificent end result
that I envision. uzbl sounds fantastic because I like the notion of being able
to configure a system from the ground up, to see what happens and to know what
does what.</p>

<p>There&rsquo;s just one big problem however:</p>

<p>The work necessary to get uzbl to the state my Firefox is in with the numerous
extensions and custom configurations would take <em>ages</em>, if at all possible.
I decided that I can try to live without NoScript, BetterPrivacy, Firebug and
some other nice extensions, as long as I get what I consider to be core
functionality to work smoothly. Even this (what I would consider modest)
aspiration is a challenge to say the least.</p>

<p>The default configuration gives you Vim-like control, with hjkl-movement and
some other things that you might recognize if you&rsquo;re coming from
Pentadactyl/Vimperator, but the similarities end fairly quickly. Once the basic
keys were reconfigured to my liking, one of the first things I wanted to tweak
was that since I use <code>uzbl_tabbed</code>, I&rsquo;ll want to reconfigure the <code>NEW_WINDOW</code>
action to load links in new tabs. The fact that only the action <code>NEW_TAB</code> worked
and not the other two potentially nice ones (<code>NEW_BG_TAB</code> and <code>NEW_BG_TAB_NEXT</code>)
was a shame, doubly so when there&rsquo;s no information for how get it to work.</p>

<h2>You&rsquo;re on your own</h2>

<p>This was the first encounter (out of many, I might add) with what eventually led
me to give up on the browser. There&rsquo;s no comprehensive source of information
about uzbl… anywhere.</p>

<p>I use Archlinux on my main computer but I know that I might not have been if it
wasn&rsquo;t for the fantastic Wiki. I don&rsquo;t know if that huge source of information
has spoiled me, but I feel like I&rsquo;m done with the days of guessing myself forth
when configuring software. I don&rsquo;t enjoy being in the situation of “Well I&rsquo;d
really like to do foobar, so I guess I&rsquo;ll scour tens of config files to see if
someone has done something remotely similar from which I can extrapolate some
kind of solution”.</p>

<p><em>I&rsquo;m done with that shit.</em></p>

<p>The Arch Wiki proves that even if you put docstrings for every line in your
configuration, a Wiki page with some quick and helpful tweaks that every new
user would make, is a thousand times better. As soon as I got any idea on how
I&rsquo;d like to tweak the interface of uzbl, it was followed by the realization that
there&rsquo;s neither a quick nor an obvious way to do it.</p>

<p>The <a href="http://www.uzbl.org/wiki/">official Wiki</a> is so barren that it seems to be
made by and exclusively for the current/future developers. Google isn&rsquo;t much
more helpful, the usual searches for HOWTOs or tutorials yield not much more
information than what one would derive from the sample configs that one can find
in the Wiki.</p>

<h2>See you some other time</h2>

<p>The impression I get is that if you&rsquo;re not ready to figure it out, then you
shouldn&rsquo;t even start. I gave it quite a few hours and at a certain point decided
that fixing Pentadactyl would be far more beneficial and far less time
consuming.</p>

<p>Some day I&rsquo;ll probably give it another shot, but by that time I&rsquo;ll probably come
prepared with far more patience and without the expectation to actually replace
Firefox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When the tools just don't work]]></title>
    <link href="http://linduxed.github.io/blog/2012/03/15/when-the-tools-just-dont-work/"/>
    <updated>2012-03-15T12:38:30+01:00</updated>
    <id>http://linduxed.github.io/blog/2012/03/15/when-the-tools-just-dont-work</id>
    <content type="html"><![CDATA[<p>Every once in a while you stumble on that area of software that Linux just
doesn&rsquo;t have covered. You might now be thinking that I&rsquo;d like to talk about
audio and video editing. A fair guess, since you&rsquo;ll hear people talk about
these two as areas where the other platforms have significantly more
sophisticated software available. But this isn&rsquo;t what I&rsquo;m going to talk about.</p>

<!--more-->


<p>You see, I&rsquo;ve had a look at the video and audio editors out there for Linux, and
while it&rsquo;s generally not as good as what you&rsquo;d have on OSX or Windows, there are
projects that make honest efforts to compete (Rosegarden comes to mind). I think
even the cynics can at least call the tools in these areas “rudimentary”.</p>

<p>“Streaming your desktop” in Linux, however, is one area you can&rsquo;t even fucking
call rudimentary. The appropriate description I&rsquo;ve come up with is “technically
working with the help of wizardry”, and I&rsquo;m thinking about whether that&rsquo;s too
generous.</p>

<h2>No audience</h2>

<p>I can&rsquo;t say I&rsquo;m particularly surprised by this situation, because apart from the
occasional recorded screen cast for some brand new package, there isn&rsquo;t that
much of a need, it seems. We don&rsquo;t have the games to stream, which I would
assume is a large part of what drives the revenue of a page like Justin.tv.</p>

<p>I assume most of the people who code in Linux aren&rsquo;t exactly eager to stream and
narrate their work, which could have been that “other area” of content that
would have driven the development of tools for streaming. I understand that the
Linux community might have less scenarios under which one would want to stream
one&rsquo;s desktop, but I&rsquo;m still surprised by how dire the software situation is.</p>

<h2>The tools</h2>

<p>From what I&rsquo;ve gathered, the most “mature” application available for handling
the various aspects of streaming (sound, picture, overlays and so on) is
WebcamStudio, which didn&rsquo;t exactly work. At the best of times it was giving me
something that looked like the stream I wanted to pass on, but I never managed
to actually get any streaming site to accept the data. This completely sidesteps
the issue that is the buggy-as-fuck interface, that neither looks good nor works
well.</p>

<p>The most stable solution I&rsquo;ve found, that has actually let me see my desktop on
the internet, is the combination of:</p>

<ul>
<li>Letting VLC capture your desktop with a wide array of flags to make sure it
comes out right. Figuring out those was a ton of fun.</li>
<li>Having a script called “jtvlc” catch the data and send it in through the
Justin.tv API.</li>
</ul>


<p>It&rsquo;s way better than nothing, but this gives me absolutely no ability to
customize the output, except choosing what part of my monitor set-up it should
grab.</p>

<h2>Conclusion</h2>

<p>In a way, I hope I&rsquo;ve missed something; I hope there&rsquo;s an obscure package that
simply grabs the part of the desktop you want, has a nice interface, and just
works. If that magic package exists however, then I haven&rsquo;t found it.</p>

<p>There are times when I really would have liked to share the view of one of my
screens, with some embedded microphone commentary. When the ideas pop up, I&rsquo;d
like to go ahead and just try them out, but in this case, I&rsquo;m completely
hindered. It might be that the process of getting these things to work under the
other systems is also a chore, but at least I&rsquo;ve seen plenty examples of there
being an end result. That&rsquo;s something I&rsquo;ve yet to see here in Linux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Late night OS adventures]]></title>
    <link href="http://linduxed.github.io/blog/2009/05/26/late-night-os-adventures/"/>
    <updated>2009-05-26T22:30:23+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/05/26/late-night-os-adventures</id>
    <content type="html"><![CDATA[<p>So it was a late night, a day or so after the 23rd of April, Jaunty had just
been released. I was very excited because I had been using Intrepid for
a while, and I wasn&rsquo;t as satisfied with it as I was with Hardy; an upgrade felt
like a nice thing to do. It turned out that Jaunty had some issues that I at the
time felt relatively unmotivated to solve, most notably <a href="/blog/2009/05/24/sound-in-ubuntu-9-dot-04-on-acer-aspire-8930g/">no sound</a> and an
<a href="/blog/2009/05/25/getting-awesome-3-dot-x-in-ubuntu-9-dot-04/">inability to install Awesome</a>.</p>

<p>Perfect reason to start distrohopping.</p>

<!--more-->


<h2>3 x Linux vs. Eyelids</h2>

<p>Debian was first up. I burned a stable Lenny ISO, rebooted, turned out i burned
a dodgy CD, wouldn&rsquo;t boot.<br/>
I instantly decided that I didn&rsquo;t care for Debian since it wouldn&rsquo;t boot,
making it the most uncalled for discarding of a piece of software this year.</p>

<p>Next up was Intrepid, mainly because it worked to a larger extent than Jaunty.
Obviously, the tired linduxed decided after a quick installation that getting
the sound to work in Intrepid would not be fun (despite knowing that it would
need tweaking regardless of distro), so Intrepid was also discarded.</p>

<p>Two systems in less than an hour, both cases making no sense whatsoever; that
must be a record of some sort.</p>

<p>Next up was Arch. I really like this system, but I should have known better
than setting up an OS pretty much from scratch when I was so tired I had
trouble locating my hands.</p>

<p>I somehow managed to progress all the way up to the partitioning stage, which in retrospect I can&rsquo;t decide if it was a good or a bad thing.<br/>
I came to the reasonable conclusion that having both a /home-partition and
a /-partition might be superior to just having a /-partition. What was not as
reasonable was to start formatting partitions and editing individual cylinder
values while my brain tried to make it clear to me that the numbers and letters
had transformed into hamburgers and frisbees.</p>

<p>This basically lead to corrupting the entire partition table, which made me call it a day.</p>

<h3>Stroke of luck</h3>

<p>The next morning I could confirm that I had no systems to boot into and that my brain was still in the mood for illogical decisions:</p>

<p>It was time to install Jaunty again!</p>

<p>Why? Because this time everything was going to work, I said to myself.
A generously flawed assumption, but it turns out I was right. Apparently Ubuntu
seeks to comfort Windows converts by being just as unpredictable, all the
issues I had in the previous install of Jaunty seemed to fix themselves, an
interesting feat indeed.</p>

<p>So the distrohopping ended happily, but what happened to Windows? A geek has to
game right?</p>
]]></content>
  </entry>
  
</feed>
