<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Rants of a geek]]></title>
  <link href="http://linduxed.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://linduxed.github.io/"/>
  <updated>2016-05-29T15:55:28+02:00</updated>
  <id>http://linduxed.github.io/</id>
  <author>
    <name><![CDATA[linduxed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pair programming with multiple keyboard layouts]]></title>
    <link href="http://linduxed.github.io/blog/2015/07/21/pair-programming-with-multiple-keyboard-layouts/"/>
    <updated>2015-07-21T03:10:33+02:00</updated>
    <id>http://linduxed.github.io/blog/2015/07/21/pair-programming-with-multiple-keyboard-layouts</id>
    <content type="html"><![CDATA[<p>I enjoy pair programming: I find it&rsquo;s a way to both solve problems quicker and exchange knowledge easier.
With that said, due to my habit of extensively <a href="https://github.com/linduxed/dotfiles">customizing my environment</a>, there&rsquo;s a fair chance that my computer will be borderline unusable for other people.
A year or two ago I was forced to solve a couple of aspects of this problem, to enable my colleagues to pair program with me on my computer.</p>

<p>Let&rsquo;s tackle the one of those hurdles:</p>

<p>You and your pairing partner use different keyboard layouts.</p>

<!--more-->


<h2>Prerequisites</h2>

<p>I&rsquo;m making the assumption that these apply to you:</p>

<ul>
<li>You use Linux.</li>
<li>You pair program by having two keyboards.</li>
<li>You have a second keyboard of a different brand/model than the primary keyboard.</li>
<li>You <em>don&rsquo;t</em> use a desktop environment that completely overrides Xorg keyboard configuration (an example would be Gnome).</li>
</ul>


<p>If any of these don&rsquo;t apply to you, then I don&rsquo;t think the contents of this blog post will work for you.</p>

<h2>Setting things up</h2>

<p>We&rsquo;ll be doing three things:</p>

<ol>
<li>Figuring out what the vendor name and device name are for your second keyboard.</li>
<li>Writing some Xorg configuration.</li>
<li>Restarting Xorg a couple of times because getting Xorg files right the first time is impossible.</li>
</ol>


<h3>Vendor and product</h3>

<p>If the secondary keyboard is connected by USB (as most are these days), plug it in and run <code>lsusb</code>. This should result in a list like this:</p>

<p><code>
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 005: ID 8087:0a2a Intel Corp.
Bus 001 Device 010: ID 03eb:8b06 Atmel Corp.
Bus 001 Device 003: ID 064e:9700 Suyin Corp. Asus Integrated Webcam
Bus 001 Device 016: ID 04d9:2013 Holtek Semiconductor, Inc. Keyboard [Das Keyboard]
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</code></p>

<p>This particular output is what I get when running <code>lsusb</code> on my laptop with my Das Keyboard plugged in.
You&rsquo;re interested in stuff after the colon-separated hexadecimal values, the vendor and product <em>names</em>.
Since the two names are concatenated, it might sometimes be hard to figure out where the vendor name stops.
For this, run <code>lsusb -v</code>.
In my case, I&rsquo;d be looking for the last two lines in this output:</p>

<p><code>
Bus 001 Device 016: ID 04d9:2013 Holtek Semiconductor, Inc. Keyboard [Das Keyboard]
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               1.10
  bDeviceClass            0
  bDeviceSubClass         0
  bDeviceProtocol         0
  bMaxPacketSize0         8
  idVendor           0x04d9 Holtek Semiconductor, Inc.
  idProduct          0x2013 Keyboard [Das Keyboard]
</code></p>

<p>You can also just run <code>lsusb -v | grep -e idVendor -e idProduct</code>, since you already know what you&rsquo;re looking for.</p>

<p>As a side-note, if you&rsquo;re running Arch you can find all the &ldquo;named&rdquo; vendor-product combinations in <code>/usr/share/hwdata/usb.ids</code> (for other distributions, it should be called <code>usb.ids</code> too, so just <code>find</code> for that).</p>

<h3>Writing the Xorg configuration</h3>

<p>While these will be Arch-specific instructions, I expect the location of the files to be basically the same across most distributions.
I&rsquo;m sure you&rsquo;ll figure it out.</p>

<p>In the <code>/etc/X11/xorg.conf.d/</code> directory you might find a bunch of files called <code>XX-something.conf</code>, where <code>XX</code> is a number.
The lower the number, the higher the priority.
You&rsquo;ll have to read through the other files present in this directory to determine what number you should use for your keyboard configuration.</p>

<p>Let&rsquo;s say you&rsquo;ve got a default keyboard configuration file called <code>10-keyboard.conf</code>:</p>

<p>The contents of the file could be something like this:</p>

<p>```
Section &ldquo;InputClass&rdquo;</p>

<pre><code>Identifier "default-keyboard"
MatchIsKeyboard "on"
Option "XkbLayout" "us,us"
Option "XkbVariant" "colemak,"
Option "XkbOptions" "grp:rctrl_rshift_toggle,terminate:ctrl_alt_bksp"
</code></pre>

<p>EndSection
```</p>

<p>This would by default set my keyboards to the Colemak layout, with the option of switching to the default US layout (that&rsquo;s what the <em>lack</em> of text after the trailing comma after <code>colemak</code> means: default variant).
Here I&rsquo;ve also added two options: cycling between layouts (or in this case variants) and classic X termination.</p>

<p>Now let&rsquo;s add an overriding alternate configuration file for the Das Keyboard called <code>20-alt-keyboard.conf</code>:</p>

<p>```
Section &ldquo;InputClass&rdquo;</p>

<pre><code>Identifier "das-keyboard"
MatchIsKeyboard "on"
MatchVendor "Holtek Semiconductor, Inc.|04d9|0x04d9"
MatchProduct "Keyboard [Das Keyboard]|2013|0x2013"
Option "XkbLayout" "se"
</code></pre>

<p>EndSection
```</p>

<p>Notice the <code>|</code> separators on the <code>MatchVendor</code> and <code>MatchProduct</code> lines.
These allow you to not only input multiple different vendors/products to match, but also input them in either plain text form or hexadecimal form.
For the hexadecimal form, I haven&rsquo;t figured out whether you need the <code>0x</code> or not, so I&rsquo;ve included both forms.</p>

<p>While you can match against any of the provided vendors/products, remember that if you have both the <code>MatchVendor</code> and <code>MatchProduct</code> lines, then you need to match at least one from each.</p>

<p>As for layout (which is why we did all of this in the first place): set the <code>XkbLayout</code> and <code>XkbVariant</code> to whatever you need.
You can find all available layouts and variants in <code>/usr/share/X11/xkb/symbols/</code>.</p>

<h3>Restart X</h3>

<p>Assuming you got the Xorg configuration file right (congratulations if it worked on the first try!), then all you need to do is to restart X.</p>

<p>After that, just plug in the Designated Pair Programming Keyboard in and start hacking!</p>

<h2>Final words</h2>

<p>As mentioned at the start, as a guy with a system that differs a lot from what most people use, fixing the keyboard layout isn&rsquo;t the only problem to solve.
There are other things that I need to do to facilitate efficient pair programming on my machines, but I&rsquo;ll get to that in a different post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim search and replace in bulk]]></title>
    <link href="http://linduxed.github.io/blog/2013/09/16/vim-search-and-replace-in-bulk/"/>
    <updated>2013-09-16T11:57:07+00:00</updated>
    <id>http://linduxed.github.io/blog/2013/09/16/vim-search-and-replace-in-bulk</id>
    <content type="html"><![CDATA[<p>Every once in a while you&rsquo;ll have some word or phrase that is present in
multiple files across your project. Finding all of instances can be done with
tools like <code>grep</code> outside of Vim. You could probably also use <code>sed</code>, <code>awk</code> or
some other tool to perform a substitution inside these files.</p>

<p>While there&rsquo;s nothing wrong with this approach, what if you wanted to do this
kind of multi-file search and replace inside Vim?</p>

<!--more-->


<p>The following methods are by no means the only ways of doing things, it&rsquo;s just
how I tend to solve this problem.</p>

<h2>Finding stuff</h2>

<p>When in a terminal, if you wanted to find all instances of <code>FoobarQuux</code> in
a project, you&rsquo;d probably run one of these commands:</p>

<pre><code>grep "FoobarQuux" $(git ls-files)
git grep "FoobarQuux"
ack "FoobarQuux"
ag "FoobarQuux"
</code></pre>

<p>Let&rsquo;s look at alternatives.</p>

<h3>vimgrep</h3>

<p>The built-in equivalent that Vim has is <code>vimgrep</code>. A search similar to the ones
above would be this:</p>

<pre><code>:vimgrep /FoobarQuux/ `git ls-files`
</code></pre>

<p>You&rsquo;ll notice a couple of things here.</p>

<p>First of all, the command uses slashes to encapsulate the regex and grave accents for eval. I&rsquo;m pretty sure the <code>$()</code> syntax doesn&rsquo;t work here.</p>

<p>Secondly, the results aren&rsquo;t highlighted in the way that a regular search
performed with <code>/</code> would be. Instead, the Quickfix-list is populated with the
results and you can go through them with <code>:cnext</code> and <code>:cprevious</code> (quicker
bindings for that with <a href="https://github.com/tpope/vim-unimpaired">tpope&rsquo;s unimpaired</a>).</p>

<p>Lastly, and most importantly, you&rsquo;ll notice that vimgrep is <em>remarkably</em> slow.
I don&rsquo;t know why that is and I don&rsquo;t particularly care since there are
alternatives.</p>

<h3>ack.vim</h3>

<p>We can speed things up by using the <code>ack.vim</code> plugin, which you can find
<a href="https://github.com/mileszs/ack.vim">over on Github</a>. I&rsquo;m going to assume that
you&rsquo;ve already got a preferred method of installing plugins, but in case you&rsquo;re
new to them, here&rsquo;s a <a href="http://stackoverflow.com/questions/4905554/managing-vim-plugins">helpful Stack Overflow question</a>.</p>

<p>You&rsquo;ll have to install the ack package for whatever OS you use, then you&rsquo;ll be
able to run commands like this in Vim:</p>

<pre><code>:Ack "FoobarQuux"
</code></pre>

<p>This is just like running <code>ack FoobarQuux</code> from the command line, but the
results get loaded into a Quickfix-list. This time however, there&rsquo;s
a noticeable increase in performance.</p>

<h3>the_silver_searcher</h3>

<p>Mr. ggreer once said &ldquo;But who has the time?&rdquo;, and lo and behold,
<em>the_silver_searcher</em> was created. If you&rsquo;re not familiar with
<a href="https://github.com/ggreer/the_silver_searcher">the_silver_searcher</a>, it&rsquo;s
basically <code>ack</code> but even quicker. What&rsquo;s even nicer is that you don&rsquo;t need
another plugin for using it (although <a href="https://github.com/rking/ag.vim">you can get one</a>), you just change the command which <code>ack.vim</code>
runs. Add this to your <code>.vimrc</code> and you&rsquo;re good to go:</p>

<p>```vim
if executable(&ldquo;ag&rdquo;)</p>

<pre><code>let g:ackprg = 'ag --nogroup --nocolor --column'
</code></pre>

<p>endif
```</p>

<p>I like to use this solution because I&rsquo;ve found that on distros like Debian,
<code>ack</code> is readily available in the repositories while <code>ag</code> isn&rsquo;t, so it&rsquo;s a bit
more portable.</p>

<h2>Replacing the stuff you&rsquo;ve found</h2>

<p>So now your Quickfix-list list is filled with lines that contain some word or
phrase you want to change. Here&rsquo;s an interesting fact for you then:</p>

<p>Vim has <code>bufdo</code> for running a certain command in all open buffers. It also has
<code>windo</code> for all open windows, <code>tabdo</code> for all tabs and <code>argdo</code> for all files in
the <a href="http://vimcasts.org/episodes/meet-the-arglist/">arglist</a>. All these
things, but no <code>quickfixdo</code>.</p>

<p>If <code>bufdo</code> doesn&rsquo;t overlap with the files you wish to perform replacements on
(it sometimes does), you can use <a href="https://github.com/nelstrom/vim-qargs">the following plugin</a> to populate the arglist with the
contents of the Quickfix-list. The creator of the plugin
<a href="http://stackoverflow.com/a/5686810/1106810">gives an example</a>:</p>

<pre><code>:Ack FoobarQuux
:Qargs
:argdo %s/FoobarQuux/Cranberries/gc
:argdo update
</code></pre>

<p>That works, and lets us see every change due to the confirm flag at the end of
the third line.</p>

<p>But what if there was one command for doing it all?</p>

<h3>greplace &ndash; global search and replace</h3>

<p><a href="https://github.com/skwp/greplace.vim">This plugin</a> is pretty old and there
might be newer alternatives, but it does what it should and that&rsquo;s all I need.</p>

<p>From the help page:</p>

<p>```plain
The following commands are provided by this plugin:</p>

<p>:Gsearch         Search for a given pattern in the specified</p>

<pre><code>             group of files and display the matches in
             the replace buffer.
</code></pre>

<p>:Gbuffersearch   Search for a given pattern in all the buffers</p>

<pre><code>             in the Vim buffer list.
</code></pre>

<p>:Gargsearch      Search for a given pattern in all the files in</p>

<pre><code>             the Vim argument list.
</code></pre>

<p>:Gqfopen         Use the results from the quickfix list.
:Greplace        Incorporate the modifications from the</p>

<pre><code>             replace buffer into the corresponding files.
</code></pre>

<p>```</p>

<p>So if you were to do <code>:Gsearch</code> you&rsquo;d get to input the regex, then input what files you wish to apply this to and then you&rsquo;ll get an <em>editable</em> with every found line!</p>

<p>When you&rsquo;re done editing the found line, you run <code>:Greplace</code> and then you&rsquo;ll get to approve each change in the actual file.</p>

<p>Regardless of how often this scenario pops up for you, you ought to try it to
see how nice this plugin is. I might also add that when you&rsquo;re in that editing
buffer, you could probably improve your experience even more by using the
<code>:Subvert</code> command from <a href="https://github.com/tpope/vim-abolish">tpope&rsquo;s abolish plugin</a>, functionality which is explained
<a href="http://vimcasts.org/episodes/supercharged-substitution-with-subvert/">in this Vimcast</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencasts in Linux]]></title>
    <link href="http://linduxed.github.io/blog/2013/09/08/screencasts-in-linux/"/>
    <updated>2013-09-08T14:42:54+00:00</updated>
    <id>http://linduxed.github.io/blog/2013/09/08/screencasts-in-linux</id>
    <content type="html"><![CDATA[<p>Some time ago I wrote a rant about the
<a href="/blog/2012/03/15/when-the-tools-just-dont-work/">sorry state of streaming on Linux</a>. About a month ago I needed to
find an application which would record my desktop for a screencast, giving me
a perfect opportunity to see if the situation had changed somewhat in this
field.</p>

<p>While streaming is still quite bad (video+audio works but there&rsquo;s still nothing
like <a href="http://obsproject.com/">OBS</a>), desktop recording is in a better spot
since you only need the raw footage (bells and whistles can be handled
afterwards in a video editor). Although it took some searching, I actually
found something with which I can reliably record my desktop, with microphone
audio.</p>

<!--more-->


<h2>The bad</h2>

<p>Before I start I&rsquo;d like to say a few words about the applications I won&rsquo;t use.
When I was looking for a screencasting solution I had a couple of criteria:</p>

<ol>
<li>There can be no dropped frames.</li>
<li>Synchronized audio recording is preferable, so I don&rsquo;t have to record audio separately.</li>
<li>I must be able to play the resulting video without any issues.</li>
<li>Screen number, window or screen area needs to be easy to set as a target.</li>
<li>Give me configuration options. I will need to tweak things.</li>
<li>Do not. DROP. <strong>FRAMES</strong>.</li>
</ol>


<p>The vast majority of the tools available were almost immediately disqualified
since I could <em>never</em> depend on them giving me back a normal, functioning,
video. I remember plenty of errors during playback about not correctly marked
frames, warnings about bad keyframes, along with other stuff I&rsquo;ve probably
forgotten. I was sort of amazed by how bad the results from the applications
were (not even taking into account how they handled #2 and #4), considering
I&rsquo;ve seen many a blog recommending these tools.</p>

<p>By the way, this was tried on one top of the line laptop and another laptop
which I would at the very least call &ldquo;powerful&rdquo;. There was no hardware related
reason for this to happen.</p>

<p>The one that was closest to passing was <code>recordmydesktop</code> (I used the front-end
<code>gtk-recordmydesktop</code>). It&rsquo;s got a decent amount of settings one can tweak,
covering pretty much every point except for #3. The resulting video had so many
problems that it couldn&rsquo;t be loaded into various tools, with <code>mplayer</code>
screaming warnings all throughout every generated video.<br/>
That was the application that came the closest.</p>

<p><code>kazam</code> broke rule #1 and had an almost total absence of configuration. I tried
<code>byzanz</code>, but it broke rule number #6. <code>istanbul</code> broke both rule #1 and #6 so
I didn&rsquo;t bother with it for long. All I remember about <code>xvidcap</code> was that it
didn&rsquo;t last long either; maybe it was that one with which the best results were
achieved by setting it to &ldquo;output as folder with screenshots&rdquo;&hellip;</p>

<p>There were a couple of others I tried, but I&rsquo;ve forgotten the names by now.</p>

<p>Maybe there&rsquo;s a project I&rsquo;ve missed that JustFuckingWorks™, but until
I discover that (<code>simplescreenrecorder</code> looks good, will have to try it), I&rsquo;ll
have to make due with good old ffmpeg.</p>

<h2>ffcast with ffmpeg settings</h2>

<p><blockquote><p>FFmpeg is a free software project that produces libraries and programs for handling multimedia data.</p><footer><strong>Wikipedia <a href="http://en.wikipedia.org/wiki/FFmpeg">http://en.wikipedia.org/wiki/FFmpeg</a></strong></footer></blockquote></p>

<p>Another way of putting it is that it&rsquo;s a command that lets you do almost
anything video related, as long as you know the correct parameters. While
setting <code>ffmpeg</code> up to record your screen is possible by setting geometry
options and such, the application <a href="https://github.com/lolilolicon/FFcast2"><code>ffcast</code></a> (available in the <a href="https://aur.archlinux.org/packages/ffcast/">AUR</a> if you use Arch) lets you easily
select the desired window or screen to record. Whatever isn&rsquo;t area selection
functionality is covered by an <code>ffmpeg</code> command.</p>

<p>In a two screen setup, I&rsquo;m using this command for recording my laptop screen
with the microphone for audio:</p>

<pre><code>ffcast -x 1 ffmpeg -f alsa -i pulse -vcodec libx264 -vpre libvpx-1080p out.mkv
</code></pre>

<p><code>-x 0</code> chooses my laptop screen; it will probably be different for you so run
<code>ffcast -x list</code> to find out the correct screen. If you prefer to choose
a window to record use <code>-w</code> instead.</p>

<p><code>-f alsa -i pulse</code> is for telling <code>ffmpeg</code> that I want to use <code>pulse</code> for input
audio. As for the <code>-f</code> flag, you need it for the <code>-i</code> flag to work, so just
consider those two as a package.</p>

<p>Choose whatever codec that works well, <code>libx264</code> is one.</p>

<p>Finally we come to the <code>-vpre</code> flag (and the output filename at the end, but
that one&rsquo;s obvious). This flag dictates what preset you want to use for
recording. Depending on what preset you use (or maybe you don&rsquo;t use any) the
quality of the video will range from artifact ridden garbage to crisp beauty.
To determine which presets you have available you need to list the contents of
the directory <code>/usr/share/ffmpeg</code>.<br/>
Try some of these out. If none of these presets work for you then I&rsquo;m sure you
can find some alternatives on the net.</p>

<h2>Progress!</h2>

<p>While this solution is complicated, it works, which is something I haven&rsquo;t been
able to say about the other tools I&rsquo;ve in this area. If stream overlays, scenes
and all of that stuff isn&rsquo;t important to your streaming, this might also be
a decent solution for Linux based streaming, although I haven&rsquo;t tried it myself
yet.</p>

<p>Now that I can record videos, I&rsquo;ll have to find a decent video editor&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macros and the expression register in Vim]]></title>
    <link href="http://linduxed.github.io/blog/2013/05/28/macros-and-the-expression-register-in-vim/"/>
    <updated>2013-05-28T16:30:28+00:00</updated>
    <id>http://linduxed.github.io/blog/2013/05/28/macros-and-the-expression-register-in-vim</id>
    <content type="html"><![CDATA[<p>Macros and expressions are two tools that serve the purpose of saving you from
either repeating a tedious process or the time switching back and forth between
shells to run scripts to manipulate your data with. Both can be (and often are)
used separately, but can be used in tandem to do some pretty cool stuff.</p>

<p>So let&rsquo;s introduce them and see how they work.</p>

<!--more-->


<h2>Creating macros</h2>

<p>Macros are series of commands that you can record by typing <code>q</code> and then some
register name. This starts a recording of user input that can then be replayed.</p>

<p>Let&rsquo;s do something simple to demonstrate:</p>

<ol>
<li><code>qq</code> starts recording into the <code>q</code> register.</li>
<li><code>e</code> moves to the end of the word.</li>
<li><code>a"</code> to add a quotation mark right after the word.</li>
<li><code>&lt;esc&gt;</code> leave Insert-mode.</li>
<li><code>b</code> move to the start of the word.</li>
<li><code>i"</code> add another quotation mark.</li>
<li><code>f"</code> jump to the second quotation mark for convenience.</li>
<li><code>q</code> stop recording.</li>
</ol>


<p>Yes, you probably use <a href="https://github.com/tpope/vim-surround">vim-surround</a> for
this kind of thing, but this macro will allow you to surround a word with
quotation marks quickly by just pressing <code>@q</code>, and then replay the last macro
with <code>@@</code>.</p>

<h2>More interesting macros</h2>

<p>While it is a simple task that you wouldn&rsquo;t want to repeat doing (which makes
qualify for something you should put into a macro), I&rsquo;d expect myself to use
macros for bigger tasks.</p>

<p>Let&rsquo;s for instance take some CSS:</p>

<p>```css</p>

<h1>navigation li {</h1>

<pre><code>display: inline;
list-style: none;
height: 22px;
</code></pre>

<p>}</p>

<h1>navigation li a {</h1>

<pre><code>color: #ffffff;
line-height: 22px;
font-size: 11px;
text-decoration: none;
padding: 5px 15px 6px 15px;
border-right: 1px solid #ffffff;
</code></pre>

<p>}</p>

<h1>footer {</h1>

<pre><code>font-size: 11px;
color: #aeaeae;
width: 670px;
margin-bottom: 20px;
</code></pre>

<p>}
```</p>

<p>This just some blocks of code from something I found on the internet. Let&rsquo;s
sort each block alphabetically, then join the lines in them so we get one-line
blocks.</p>

<h3>Rules for macro creation</h3>

<p>The first thing you have to do when creating more complex macros is identifying
what the blocks of code your macro will manipulate have in common.</p>

<p>If the lines differ a lot and have little to no structure, you might only be
able to use the beginning or end of the line as a fix point. In the CSS example
above we have braces, colons and semicolons to go with. It&rsquo;s all about finding
those important things that your macro can hold onto, so that when you play the
macro in another place, it&rsquo;ll still work the same due to you fixating the
motions against a common patterns.</p>

<p>This means that you&rsquo;ll have to give the creation of macros a bit more thought
than you&rsquo;d expect. Some cases are simple, where you just start the macro off by
going to the beginning of the line, but others (as we&rsquo;ll see) need more effort.</p>

<h3>The procedure</h3>

<p>First we decide where the editing will start. This is important because if we&rsquo;d
like to be able to chain together multiple executions of the macro (you might
have ten or more blocks need the same treatment), so you&rsquo;ll have to end the
macro by finding the same position you started from, just in the next block
you&rsquo;ll run the macro on.</p>

<p>In this case this will be the beginning of the line with the right brace. I&rsquo;m
phrasing it this way because braces are easy to search for.</p>

<p>So position the cursor at the <code>#</code> in <code>#navigation li {</code> and let&rsquo;s go:</p>

<ol>
<li>We start the macro by pressing <code>qq</code>.</li>
<li>Move one line down with <code>j</code>.</li>
<li>Enable Visual-line-mode with <code>V</code>.</li>
<li>We&rsquo;ll now search downwards to the left brace, since we know that is where
the block ends, so <code>/}&lt;cr&gt;</code>.</li>
<li>This is one line too far however, so we back up one line with <code>k</code>.</li>
<li>Let&rsquo;s sort these lines with <code>:sort</code>.</li>
<li>This puts the cursor up at the top of the previous visual selection, so we
move one line up with <code>k</code> to the start of the block.</li>
<li>Now we enter Visual-line-mode with <code>V</code> again and search for the left brace
with <code>/}&lt;cr&gt;</code></li>
<li>Join the lines with <code>J</code>.</li>
<li>Search for the start of the next block by typing <code>/{&lt;cr&gt;</code>.</li>
<li>Move to where we started, that is the beginning of the line with <code>0</code>.</li>
</ol>


<p>By doing steps 10 and 11 you can repeat the macro for any amount of consecutive
blocks that you want to use the macro on. In this specific case we could have
skipped starting at the beginning, the right brace would have been a fine
starting position as well.<br/>
The point is however that if you want to have a perfectly repeatable macro,
then you have to start from the same place, work with the same structure of
code and end in the same place.</p>

<p>Figuring out how the code you manipulate is built is the key to making macros
repeatable.</p>

<h2>The expression register</h2>

<p>This register serves the purpose of entering Vimscript expressions while not
leaving Insert-mode. This can be handy if you want to incorporate some value
stored in a variable into your macros.</p>

<p>Let&rsquo;s see how it works first:</p>

<p>You enter Insert-mode, hit <code>Ctrl-R</code> and then <code>=</code>. This gives you a small prompt
starting with a <code>=</code>. Here you could for instance type <code>&amp;et</code> to evaluate the
expanded tabs variable, having the expression either print <code>0</code> or <code>1</code>.</p>

<p>There&rsquo;s not much more to the procedure itself, but the expression register
depends on you being somewhat familiar with Vimscript, if you&rsquo;re to make
interesting stuff happen. You can read a lot more over in <code>:help expression</code>.</p>

<h3>Two examples</h3>

<p>The most often demonstrated use case is basic calculation. Don&rsquo;t know what
<code>123*456+789</code> equals? Do this then:</p>

<ol>
<li>Go into Insert-mode where you want the result to end up.</li>
<li>Hit <code>Ctrl-r</code> then <code>=</code>.</li>
<li>Write <code>123*456+789</code> then press Enter.</li>
</ol>


<p>That&rsquo;s it! Another example would be to call upon a script or command with an
expression, so if you want to insert the current date you could do something
like this (when the expression register is opened):</p>

<pre><code>=system('date')
</code></pre>

<p>Yes, this could also be done with <code>:r!date</code> for instance, which highlights the
fact that the expression register is more suited for Vimscript expressions (as
the name implies), but it works.</p>

<h2>Combining the two</h2>

<p>Since variables can be printed with the expression register, a way to use this
in macros would be to use a variable as a counter, print its value and then
increment it for each step.</p>

<p>Let&rsquo;s take this markdown text&hellip;</p>

<p><code>
* Some
* Arbitrary
* Text
</code></p>

<p>&hellip;and let&rsquo;s replace the asterisks with numbers:</p>

<ol>
<li>We place the cursor at the start of the first line.</li>
<li>We set a counter variable with <code>:let c=1</code>.</li>
<li>Start recording the macro with <code>qq</code>.</li>
<li><code>cl</code> for changing the asterisk.</li>
<li>Enter the expression register, type <code>c</code> and hit Enter.</li>
<li>Add a period to make it look nicer and leave Insert-mode.</li>
<li>Move down one line and then to the start of the line, so we start the next
iteration from the same position.</li>
<li>Increment the counter with <code>:let c+=1</code>.</li>
<li>Close the macro with <code>q</code>.</li>
</ol>


<p>This can now be replayed with <code>@q</code> and then <code>@@</code> across the entire list. The
main issue with this macro would be that it ends by moving down one line,
assuming that all bullet points are one line long at most.</p>

<p>A better solution would be to search for the next asterisk, which would
indicate a bullet point. But what if there&rsquo;s an asterisk in the text? Well then
we should search for a leading asterisk.</p>

<p>As you can see you have to adjust the precision of your movement yourself to
the use case, but that&rsquo;s something you&rsquo;ll get to explore on your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim plugins - Why, How and Which]]></title>
    <link href="http://linduxed.github.io/blog/2013/04/13/vim-plugins-why/"/>
    <updated>2013-04-13T21:12:33+00:00</updated>
    <id>http://linduxed.github.io/blog/2013/04/13/vim-plugins-why</id>
    <content type="html"><![CDATA[<p>A lot of times when I meet &ldquo;Vim neophytes&rdquo; they mention that Vim is a great
editor, but they miss certain features that they find in their previous
editor/IDE of choice. Often this will be a case of them not having learnt the
Vim way of doing the same task, but occasionally you&rsquo;ll have to tell them that
&ldquo;Vim doesn&rsquo;t do that&rdquo;.<br/>
Indeed, these days if you don&rsquo;t want to hop between different applications (all
of them having the primary purpose of editing text of some kind) you&rsquo;ll want
features that go beyond &ldquo;editing text&rdquo;.</p>

<h4>These days an editor can&rsquo;t just be an editor.</h4>

<!--more-->


<p>I&rsquo;ve met programmers who say that they&rsquo;re fine with using Eclipse for Java, Vim
for Ruby and then nano for minor edits in configuration files. Any workflow like
this makes no sense to me, since I wouldn&rsquo;t want to edit text in anything that
isn&rsquo;t Vim. Most people don&rsquo;t see how it could be any different&hellip;</p>

<p>&hellip;until you show them the wealth of plugins available.</p>

<h2>How to get them installed</h2>

<p>The classic way of installing plugins is to get the latest version from
<a href="http://www.vim.org/scripts/index.php">vim.org&rsquo;s scripts</a> page in the form of an
archive and just extract the contents into <code>~/.vim/</code>.</p>

<p>Now that you know about how it was done once upon a time, please refrain from
ever using this method (unless you want a spectacular mess inside your
Vim-directory).</p>

<p>These days people have plugins in separate directories, all of them stored in
some central plugin directory (most often <code>~/vim/bundle</code>). These plugin
directories are in turn loaded by some &ldquo;plugin handler&rdquo;, of which there are
many.</p>

<p>A lengthy list of handlers <a href="http://vim-scripts.org/vim/tools.html">can be found here</a>. It doesn&rsquo;t matter that much which one
you choose, but it might be a good idea to go with one of the more popular ones,
which are Pathogen, Vundle and VAM (vim-addon-manager).</p>

<h2>My setup</h2>

<p>I prefer to do the handling and updating of plugins outside of Vim, so I&rsquo;ve got
the following setup:</p>

<p>I&rsquo;ve got a &ldquo;dotfiles&rdquo; git-repository to which I&rsquo;ve added my Vim-plugins as
submodules. This allows me to update all my plugins (along with any other
git-repos I&rsquo;ve added as dotfiles) with one command (alias it to something
shorter):</p>

<pre><code>git submodule foreach git pull origin master
</code></pre>

<p>Committing these updated plugins with <code>git commit -a</code> and pushing the dotfiles
repo will then allow me to clone the repo anywhere and get all my plugins at the
same time (just make sure to clone with the <code>--recursive</code> flag).</p>

<p>Standing in <code>~</code>, adding the plugins would be done with a command like this:</p>

<pre><code>git submodule add git://github.com/linduxed/vim-linduxed-theme.git .vim/bundle/vim-linduxed-theme
</code></pre>

<p>I then use Pathogen to load all the plugins (read its FAQ about adding it as
a submodule, if that interests you).</p>

<p>I should also mention that while not necessary, structuring up your <code>~/.vimrc</code>
somewhat could be of great help, since it will increase in size after you start
adding plugins. <code>:set foldmethod=marker</code> and <a href="https://github.com/linduxed/dotfiles/blob/master/.vimrc">adding some markers</a> helps a lot.</p>

<p>If you don&rsquo;t already have a <code>.vimrc</code>, this is a <a href="https://github.com/tpope/vim-sensible">good starting point</a>.</p>

<h2>Which plugins do I get?</h2>

<p>There are quite a few plugins out there, so I&rsquo;ll just get you started with those
that I find most significantly improve my Vim experience. Click on the plugin
names to be taken to their respective repositories.</p>

<p>If you&rsquo;re hungry for more after going through this list, check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the other plugins I&rsquo;ve got in my setup</a> and go to
<a href="http://vim-scripts.org/">Vim Scripts</a> or <a href="http://www.vim.org/scripts/index.php">the official script page</a>.</p>

<h3>File and buffer navigation</h3>

<h4><a href="https://github.com/kien/ctrlp.vim/">CTRLP</a></h4>

<p>There are a few fuzzy-search plugins out there, the most well known ones being
<a href="https://github.com/wincent/Command-T">Command-T</a>, <a href="https://bitbucket.org/ns9tks/vim-fuzzyfinder/">FuzzyFinder</a> and CTRLP. While they&rsquo;re all
pretty similar when it comes to finding files, I like CTRLP a bit more because
it lets you fuzzy find among buffers and most-recently-used files as well.</p>

<p>As long as you know the name of the file you&rsquo;re looking for, this type of plugin
takes care of most file opening operations, due to it being so quick.</p>

<p>In case you haven&rsquo;t seen fuzzy-finders before, here&rsquo;s a quick demonstration. This is what it looks like when I look for <code>game/ai/ai_dropnodes.c</code> in the <a href="http://www.warsow.net/">Warsow</a> source code:</p>

<p><center><span class='caption-wrapper'><img class='caption' src='/images/blog/ctrlp.gif' width='' height=''><span class='caption-text'>CTRLP in action. Looking for <code>ai_dropnodes.c</code>.</span></span></center></p>

<h4><a href="https://github.com/sandeepcr529/Buffet.vim">buffet</a></h4>

<p>There&rsquo;s a lot of overlap between CTRLP&rsquo;s buffer switching functionality and the
functionality of buffet, but if you want a tool that does nothing but switch
between buffers swiftly, this plugin is probably it.</p>

<h4><a href="https://github.com/scrooloose/nerdtree.git">nerdtree</a></h4>

<p>While I&rsquo;m using it less and less due to CTRLP, nerdtree is still the easiest way
to explore your filesystem without exiting Vim.</p>

<h3>Code writing helpers</h3>

<h4><a href="https://github.com/Lokaltog/vim-easymotion.git">vim-easymotion</a></h4>

<p>The big one. This plugin changed the way I move around in code completely. While
Vim gives you a great set of tools to move around in code (one of the things
that take the longest to master), this plugin takes it to another level. It&rsquo;s
probably the closest thing to mouse cursor accuracy you can get, while not
wasting time to fetch the mouse itself.</p>

<p>Words don&rsquo;t do this justice, so here&rsquo;s a video:</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Dmv6-dguS3g" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<h4><a href="https://github.com/tpope/vim-surround">vim-surround</a></h4>

<p>Makes the task of surrounding text with quotes, parentheses, brackets, etc. much
easier. Also provides quick removal and changing of surrounding characters.</p>

<h4><a href="https://github.com/garbas/vim-snipmate.git">vim-snipmate</a></h4>

<p>If you haven&rsquo;t used an editor with snippets before, it&rsquo;s basically a set of
templates, small pieces of code which are often used in which you fill out the
relevant fields.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xV2IsE5OHd4" width="605" height="360" frameborder="0" allowfullscreen></iframe></div></p>

<p>I should mention that at the time of writing the linked project has its
development slowed down, with another project called <a href="https://github.com/SirVer/ultisnips">UltiSnips</a> getting a lot of traction (along with
a <a href="https://github.com/MarcWeber/ultisnips/">fork</a> made by an ex-snipmate
developer).</p>

<p>The situation is a bit complicated, but at the moment snipmate works fine for me
so I don&rsquo;t see a reason to switch.</p>

<h4><a href="https://github.com/scrooloose/nerdcommenter.git">nerdcommenter</a></h4>

<p>Indispensable plugin that makes the creation and handling of comments in code
a breeze.</p>

<h4><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h4>

<p>Inserts a closing parenthesis, bracket, curly brace or quote when you insert an
opening one. Also knows what to do with braces if you press enter inside them
(indentation and new empty line between them) along with some other nice things.</p>

<p>There&rsquo;s also <a href="https://github.com/Townk/vim-autoclose">AutoClose</a> which does
pretty much the same thing.</p>

<h4><a href="https://github.com/godlygeek/tabular.git">tabular</a></h4>

<p>For the people who like their code pretty (I obsess over that kind of stuff)
this plugin aligns code.</p>

<p><center><span class='caption-wrapper'><img class='caption' src='/images/blog/tabular.gif' width='' height=''><span class='caption-text'>Tabular lining stuff up.</span></span></center></p>

<h3>Miscellaneous</h3>

<h4><a href="https://github.com/linduxed/vim-linduxed-theme.git">vim-linduxed-theme</a></h4>

<p>This is here for two reasons:</p>

<ol>
<li>Plugging your own stuff is always nice.</li>
<li>People should get any theme.</li>
</ol>


<p>Seriously, the stock themes aren&rsquo;t that pretty and the ones you can find on the
internet are both varied and beautiful (not to mention that some have more
detailed syntax highlighting).</p>

<p>Here&rsquo;s a list of repos to look through (there are many others):</p>

<ul>
<li><a href="https://github.com/tpope/vim-vividchalk">Vividchalk</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees' color scheme collection</a></li>
<li><a href="https://github.com/altercation/solarized">Solarized</a></li>
<li><a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow</a></li>
</ul>


<h4><a href="https://github.com/sjl/gundo.vim.git">gundo.vim</a></h4>

<p>Many people aren&rsquo;t even aware of the fact that Vim has a branching undo history,
but this plugin makes it accessible. It upgrades the undo-tree from &ldquo;never use
it&rdquo; to &ldquo;use it all the time&rdquo;.</p>

<h4><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></h4>

<p><blockquote><p>I&rsquo;m not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time.</p><footer><strong>Tim Pope</strong></footer></blockquote></p>

<p>I&rsquo;ll have to agree. The extensive functionality is covered in detailed by Drew
Neil in his Vimcasts videos, starting at <a href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/">episode #31</a>.</p>

<p>If I was to pick just one of the many great features this plugin provides, then
it&rsquo;s the ability to open up the index version of the files and edit that while
having the version from the working directory open. This is like a superior
version of <code>git add --patch</code>, which is reason enough to get this.</p>

<h4><a href="https://github.com/scrooloose/syntastic">syntastic</a></h4>

<p>This plugin runs your code through a linter or syntax checker upon every save
and loads the warnings/errors into the location list and displays markers in the
gutter to indicate on what rows the warnings/errors are.</p>

<p>Incredibly helpful, you wouldn&rsquo;t know how much until you&rsquo;ve tried it. Syntastic
has code ready for the major linters/checkers/compilers for most languages.</p>

<p>Here&rsquo;s me fixing some warnings that pylint gives about &ldquo;no space after comma&rdquo;
(pylint warns about non-compliance with <a href="http://www.python.org/dev/peps/pep-0008/">PEP8</a>):</p>

<p><center><span class='caption-wrapper'><img class='caption' src='/images/blog/syntastic.gif' width='' height=''><span class='caption-text'>Syntastic giving warnings with the help of pylint.</span></span></center></p>

<h4><a href="https://github.com/tpope/vim-unimpaired">vim-unimpaired</a></h4>

<p>Gives you a set of very useful bindings.</p>

<h2>Only the beginning</h2>

<p>The big category of plugins that I&rsquo;ve omitted is language/framework specific
plugins. I&rsquo;ve got a lot of those, but each specific one might not be useful to
everyone. With that said, there are some language specific plugins that are
really powerful and should most definitely be used if they align with what
you&rsquo;re coding in (<a href="https://github.com/tpope/vim-rails"><code>rails.vim</code> by Tim Pope</a>
is, from what I&rsquo;ve heard, considered to be a major source of Vim converts from
TextMate).</p>

<p>Once you start customizing your Vim, you&rsquo;ll notice that there are many areas
which you can improve with a plugin here and there. Just remember to stop and
consider if the functionality you&rsquo;re looking for isn&rsquo;t already available in
stock Vim.</p>

<p>As mentioned before, if you need some inspiration you can check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the plugins I use</a> and if you&rsquo;ve got
any problems, just fire up your IRC client of choice and head over to
<code>#vim@freenode.org</code>.</p>
]]></content>
  </entry>
  
</feed>
