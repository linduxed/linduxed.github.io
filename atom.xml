<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rants of a geek]]></title>
  <link href="http://linduxed.github.io/atom.xml" rel="self"/>
  <link href="http://linduxed.github.io/"/>
  <updated>2014-06-22T18:46:41+02:00</updated>
  <id>http://linduxed.github.io/</id>
  <author>
    <name><![CDATA[linduxed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Old favourites]]></title>
    <link href="http://linduxed.github.io/blog/2013/09/07/old-favourites/"/>
    <updated>2013-09-07T15:36:57+02:00</updated>
    <id>http://linduxed.github.io/blog/2013/09/07/old-favourites</id>
    <content type="html"><![CDATA[<p>At times I forget why I loved a certain artist or composition. The same happens
with books, video games and movies. Time has passed and having indulged in the
work of art so many times made me forget what made it so special in the first
place.</p>

<!--more-->


<p>About a year ago I veered away from my tried and true collection of
instrumental music and found new joy in the world of dance music, ranging from
electro-swing like Parov Stelar to house like Deadmau5. Ambient music soon
followed, since I had been in contact with the genre before and video game
music (as wide ranging as that is) also became quite prominent in my playlists.</p>

<p>It was all a major departure; I had probably grown tired of listening to the
same artists and tracks. I needed a change.</p>

<p>The more I think about it however, the more I see similarities creep up between
the old and the new. Even though I crossed genres, I still can&rsquo;t shake core
tastes. No prominent vocals, generally some powerful riff or sample and
a strong groove that carries the track. I know that&rsquo;s very general and probably
doesn&rsquo;t mean much, but the point is that once I had settled down in these new
genres, I realized that I hadn&rsquo;t been looking for something all that different.
This made me revisit the things I had moved away from, and it turned out that
my love for them had been rekindled.</p>

<p>I think one really needs to take a break from the familiar from time to time to
appreciate it fully. It&rsquo;s a cliché, yes, but apparently it needs to be
experienced before it&rsquo;s understood.</p>

<p>Just an observation, that&rsquo;s all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anime is still anime]]></title>
    <link href="http://linduxed.github.io/blog/2013/06/29/anime-is-still-anime/"/>
    <updated>2013-06-29T16:33:04+02:00</updated>
    <id>http://linduxed.github.io/blog/2013/06/29/anime-is-still-anime</id>
    <content type="html"><![CDATA[<p>Recently my co-worker recommended me an anime series called &ldquo;Attack on Titan&rdquo;.
The clips on Youtube looked good; the style was pretty cool, it looked like an
interesting setting and it looked like the focus was on people trying to
survive in a tough world.</p>

<p>Having seen all of the currently released episodes, I can say that all of the
above is true! The style, the setting, the story; all of that is there and is
enjoyable.</p>

<p>The big issue with the series is that all of above mentioned qualities are
wrapped in the shitty package of being an anime.</p>

<p>Spoilers ahead.</p>

<!--more-->


<h2>So much shit I had forgotten</h2>

<p>I&rsquo;ve gone through a decent share of anime and it strikes me that the longer
you&rsquo;re away from it the harder it is to get back into it. It&rsquo;s like you build
up a kind of immunity to all the bullshit that is endemic to the genre.</p>

<h3>The two dimensional characters</h3>

<p>I&rsquo;m fine with characters who speak once every third episode or so to only be
defined by some role. &ldquo;He always puts on a facade of cockiness&rdquo;, &ldquo;She&rsquo;s
reckless but talented&rdquo; or &ldquo;His loss of family drives his will to improve&rdquo;.</p>

<p>However, when your main characters get no more depth than this, beyond
providing a reason for why they are defined by this &ldquo;role&rdquo; of theirs, then
eventually the show becomes frustratingly predictable.</p>

<p>You have the main guy called Eren, his adopted sister called Mikasa and their
friend called Armin. Let&rsquo;s start with Armin. The character has four defining
features:</p>

<ol>
<li>Being weaker than both of his two friends and therefore frequently getting
help from them throughout his life.</li>
<li>Being smart, getting told that he is, but never internalizing it.</li>
<li>Subsequently feeling inadequate close to his friends, feeling that he&rsquo;s weak
and of little worth.</li>
<li>Looking and sounding so female that had they not used male pronouns to
describe him you&rsquo;d never have guessed. Yes, this more of a pet peeve of
mine, but I&rsquo;m still confused by the androgyny that is sprinkled in from time
to time into anime.</li>
</ol>


<p>That&rsquo;s the entire character. Any scene he participates in (and that&rsquo;s a lot
considering he only gets beat by Eren and <em>maybe</em> Mikasa when it comes to
screen time) you can be damn sure that he&rsquo;ll be feeling inadequate, Erin and
Mikasa will come reassuring him that he&rsquo;s the brains of the pack and he&rsquo;ll have
a moment of silence being surprised about this fact, where after the same shit
will happen in the next scene.<br/>
No effort is made to make the character evolve into anything more than above
points. No flashes of breaking out of the role, no instances of the character
having other talents, just a repetition of the same traits over and over.
Eventually you realize that this all serves the purpose of setting up for some
scene later on where he breaks from that character and realizes that &ldquo;OMG they
value me for my intelligence! I&rsquo;m not useless!&rdquo;, and sure as &ldquo;anime always has
that low fucking framerate&rdquo; it happens about ten episodes in.</p>

<p>Within one or two episodes you&rsquo;ve got all you need to anticipate every movement
and reaction of one of the main characters without fault. What. The. Fuck.</p>

<p>Mikasa isn&rsquo;t much better, she&rsquo;s just given a different set of defining points:</p>

<ol>
<li>Be rather silent and mysterious. Generally stand still turned away from the
camera when talking. Let your hair blow gently in the wind and cover half of
your face with a scarf. Anime fans will love that shit.</li>
<li>Be superbly proficient at <strong>everything</strong> you do. This goes very well with
the mysteriousness and it&rsquo;ll make you a good side kick.</li>
<li>Due to Eren being the last piece of family you&rsquo;ve got, never ever take
a different path in life than what he takes. Also, have no regard for
whether it&rsquo;s appropriate to have this attitude, so even if the situation
calls for some flexibility your obsession with having him around should
always go first.</li>
<li>Actually, don&rsquo;t express much emotions for anything except for the presence,
vicinity or well being of Eren.</li>
</ol>


<p>As viewers we&rsquo;re provided with a flashback to when Mikasa was a kid, when her
parents were murdered in front of her and she was abducted so she could be sold
off for &ldquo;her oriental blood&rdquo; (which due to the setting is a rare thing). Eren
comes around with a knife, kills all but one guy who tries to strangle him.
Mikasa picks up the knife, freezes up, hears Erin stutter out (while in a choke
hold) that &ldquo;if she doesn&rsquo;t fight, she can&rsquo;t win&rdquo;, which is apparently enough to
change her life, giving her the mental fortitude to kill Eren&rsquo;s assailant.</p>

<p>That&rsquo;s all we&rsquo;re given when it comes to character development for the second
most prominent character. She never changes, never ventures outside of her
defined &ldquo;role&rdquo; and certainly does what is expected of her when she thinks that
Eren has died:</p>

<ol>
<li>Becomes uncharacteristically reckless? Check.</li>
<li>Fucks up due to this recklessness? Check.</li>
<li>Loses all will to live? Check.</li>
<li>Suddenly remembers important words from Eren which gives her strength to
snap out of the apathy? Abso-fucking-lutely.</li>
</ol>


<p>Eren is probably the only fleshed out character that gets to have an arc. We
get to see his origins, his motivations, his failures and convictions. There&rsquo;s
actually some depth to him. Sure there are some clichÃ©s, but you don&rsquo;t
complain when he&rsquo;s one of the few characters that feel three dimensional.</p>

<p>You know it&rsquo;s bad when characters that have very little screen time become more
interesting than major characters, because by hardly knowing anything about
them you get to fill in the blanks and turn them into real characters on your
own.</p>

<h3>Jarring behaviour of characters</h3>

<p>There isn&rsquo;t a single non-imbecile who&rsquo;d think that when everyone around you is
standing on attention with a drill sergeant shouting you, it would be a good
idea to eat a potato. Not even furtively, just eating with no shame.</p>

<p>I wouldn&rsquo;t expect any officer worth his rank to completely lose his shit when
looking at three kids, even if one of them is a human that could <em>potentially</em>
transform into something menacing (which he hadn&rsquo;t at that point). This despite
having a large amount of cannons and a full troop poised and ready to strike at
this tiny group of people. While the officer in question is freaking the fuck
out, most of the low ranked soldiers are collected.</p>

<p>I wouldn&rsquo;t think that after three years of training at a boot camp that has
people <strong>dying</strong> during the exercises (among other things) you&rsquo;d still have
skinny, pigtails wearing, squeaky &ldquo;Sailor-Moon-esque&rdquo; girls around that look
like they&rsquo;re twelve years old and wouldn&rsquo;t be able to stand up with the gear
they have to fight with, and yet here we are.</p>

<p>Having a possibly fifty-or-more years old baron behave like a spoiled child,
complete with the whining makes for very weird scenes.</p>

<p>The list just goes on and on. It&rsquo;s as if none of the writes stopped to think
&ldquo;What would a real person do in this situation, not an anime character?&rdquo;.</p>

<h3>The fucking over-dramatization</h3>

<blockquote><p>HOLY SHIT GUYS, something important just happened so we&#8217;d better slow down time, blur out the sides of the screen and put in some speed-lines like we&#8217;re in fucking warp drive and zoom in on someone&#8217;s eyes. IT&#8217;S ABOUT TO GET REAL!</p><footer><strong>Most animes</strong></footer></blockquote>


<p>This shit is what makes me apprehensive of recommending any anime to anyone not
into the genre. If you had a scale of emotional intensity from zero to ten
(regardless of whether we&rsquo;re talking about negative or positive feelings),
writers of anime put a great deal of effort into wiping out everything that
could be over in three-to-seven-land. The camera angles, the zooming in on
people&rsquo;s eyes as soon as something could elicit a reaction, the five minute
shot of someone being so furious shit could spontaneously combust around that
character, the <em>gallons</em> of tears people seem to store somewhere inside
themselves and the bipolarity that seems to be a completely normal trait to
slap onto a character.</p>

<p>It&rsquo;s as if the writers were convinced that the viewers are so completely inept
at picking up subtleties that the audio and imagery needs to <em>scream</em> the
message for a prolonged time for them to be certain that it&rsquo;ll penetrate.</p>

<p>It&rsquo;s either that, or it could be blatant laziness. There&rsquo;s a scene where Mikasa
has recently been informed that the only person she cares about (Eren) has died
and therefore goes on a sorrow fueled, uncharacteristically careless, hunt for
titans.<br/>
Sounds decent right? Stoic character shows weakness due to loss through her
different style in battle, until eventually this emotional way of conducting
battle causes her to loose control. Would be cool to see that right?</p>

<p>Except that doesn&rsquo;t happen. Instead we get Armin <em>fucking telling</em> us exactly
that. &ldquo;Oh look, she copes with her loss by taking it out on the titans. She&rsquo;s
flying recklessly so she&rsquo;ll run out of gas if she keeps this up.&#8221;<br/>
This <em>could</em> have been expressed with finesse, but fuck that, that&rsquo;s not how
it&rsquo;s done in anime-land.</p>

<h2>Please don&rsquo;t do this</h2>

<p>The worst part about this is that it&rsquo;s an interesting setting to work with. The
art style is solid and there&rsquo;s a lot of stories that could be told about this
world. If Production I.G managed to pull off Ghost in the Shell, then they
obviously have the ability to turn it into something genuinely good.</p>

<p>Instead we get something that is marred by all of the different anime-isms that
get shoved into it. When you&rsquo;ve cut away all of the mold, there&rsquo;s not much left
of the loaf of bread, even if what&rsquo;s left is really tasty.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macros and the expression register in Vim]]></title>
    <link href="http://linduxed.github.io/blog/2013/05/28/macros-and-the-expression-register-in-vim/"/>
    <updated>2013-05-28T18:30:28+02:00</updated>
    <id>http://linduxed.github.io/blog/2013/05/28/macros-and-the-expression-register-in-vim</id>
    <content type="html"><![CDATA[<p>Macros and expressions are two tools that serve the purpose of saving you from
either repeating a tedious process or the time switching back and forth between
shells to run scripts to manipulate your data with. Both can be (and often are)
used separately, but can be used in tandem to do some pretty cool stuff.</p>

<p>So let&rsquo;s introduce them and see how they work.</p>

<!--more-->


<h2>Creating macros</h2>

<p>Macros are series of commands that you can record by typing <code>q</code> and then some
register name. This starts a recording of user input that can then be replayed.</p>

<p>Let&rsquo;s do something simple to demonstrate:</p>

<ol>
<li><code>qq</code> starts recording into the <code>q</code> register.</li>
<li><code>e</code> moves to the end of the word.</li>
<li><code>a"</code> to add a quotation mark right after the word.</li>
<li><code>&lt;esc&gt;</code> leave Insert-mode.</li>
<li><code>b</code> move to the start of the word.</li>
<li><code>i"</code> add another quotation mark.</li>
<li><code>f"</code> jump to the second quotation mark for convenience.</li>
<li><code>q</code> stop recording.</li>
</ol>


<p>Yes, you probably use <a href="https://github.com/tpope/vim-surround">vim-surround</a> for
this kind of thing, but this macro will allow you to surround a word with
quotation marks quickly by just pressing <code>@q</code>, and then replay the last macro
with <code>@@</code>.</p>

<h2>More interesting macros</h2>

<p>While it is a simple task that you wouldn&rsquo;t want to repeat doing (which makes
qualify for something you should put into a macro), I&rsquo;d expect myself to use
macros for bigger tasks.</p>

<p>Let&rsquo;s for instance take some CSS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#navigation</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>
</span><span class='line'>    <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">22px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#navigation</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#ffffff</span><span class="p">;</span>
</span><span class='line'>    <span class="k">line-height</span><span class="o">:</span> <span class="m">22px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">11px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span> <span class="m">15px</span> <span class="m">6px</span> <span class="m">15px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border-right</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#ffffff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#footer</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">11px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#aeaeae</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">670px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin-bottom</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This just some blocks of code from something I found on the internet. Let&rsquo;s
sort each block alphabetically, then join the lines in them so we get one-line
blocks.</p>

<h3>Rules for macro creation</h3>

<p>The first thing you have to do when creating more complex macros is identifying
what the blocks of code your macro will manipulate have in common.</p>

<p>If the lines differ a lot and have little to no structure, you might only be
able to use the beginning or end of the line as a fix point. In the CSS example
above we have braces, colons and semicolons to go with. It&rsquo;s all about finding
those important things that your macro can hold onto, so that when you play the
macro in another place, it&rsquo;ll still work the same due to you fixating the
motions against a common patterns.</p>

<p>This means that you&rsquo;ll have to give the creation of macros a bit more thought
than you&rsquo;d expect. Some cases are simple, where you just start the macro off by
going to the beginning of the line, but others (as we&rsquo;ll see) need more effort.</p>

<h3>The procedure</h3>

<p>First we decide where the editing will start. This is important because if we&rsquo;d
like to be able to chain together multiple executions of the macro (you might
have ten or more blocks need the same treatment), so you&rsquo;ll have to end the
macro by finding the same position you started from, just in the next block
you&rsquo;ll run the macro on.</p>

<p>In this case this will be the beginning of the line with the right brace. I&rsquo;m
phrasing it this way because braces are easy to search for.</p>

<p>So position the cursor at the <code>#</code> in <code>#navigation li {</code> and let&rsquo;s go:</p>

<ol>
<li>We start the macro by pressing <code>qq</code>.</li>
<li>Move one line down with <code>j</code>.</li>
<li>Enable Visual-line-mode with <code>V</code>.</li>
<li>We&rsquo;ll now search downwards to the left brace, since we know that is where
the block ends, so <code>/}&lt;cr&gt;</code>.</li>
<li>This is one line too far however, so we back up one line with <code>k</code>.</li>
<li>Let&rsquo;s sort these lines with <code>:sort</code>.</li>
<li>This puts the cursor up at the top of the previous visual selection, so we
move one line up with <code>k</code> to the start of the block.</li>
<li>Now we enter Visual-line-mode with <code>V</code> again and search for the left brace
with <code>/}&lt;cr&gt;</code></li>
<li>Join the lines with <code>J</code>.</li>
<li>Search for the start of the next block by typing <code>/{&lt;cr&gt;</code>.</li>
<li>Move to where we started, that is the beginning of the line with <code>0</code>.</li>
</ol>


<p>By doing steps 10 and 11 you can repeat the macro for any amount of consecutive
blocks that you want to use the macro on. In this specific case we could have
skipped starting at the beginning, the right brace would have been a fine
starting position as well.<br/>
The point is however that if you want to have a perfectly repeatable macro,
then you have to start from the same place, work with the same structure of
code and end in the same place.</p>

<p>Figuring out how the code you manipulate is built is the key to making macros
repeatable.</p>

<h2>The expression register</h2>

<p>This register serves the purpose of entering Vimscript expressions while not
leaving Insert-mode. This can be handy if you want to incorporate some value
stored in a variable into your macros.</p>

<p>Let&rsquo;s see how it works first:</p>

<p>You enter Insert-mode, hit <code>Ctrl-R</code> and then <code>=</code>. This gives you a small prompt
starting with a <code>=</code>. Here you could for instance type <code>&amp;et</code> to evaluate the
expanded tabs variable, having the expression either print <code>0</code> or <code>1</code>.</p>

<p>There&rsquo;s not much more to the procedure itself, but the expression register
depends on you being somewhat familiar with Vimscript, if you&rsquo;re to make
interesting stuff happen. You can read a lot more over in <code>:help expression</code>.</p>

<h3>Two examples</h3>

<p>The most often demonstrated use case is basic calculation. Don&rsquo;t know what
<code>123*456+789</code> equals? Do this then:</p>

<ol>
<li>Go into Insert-mode where you want the result to end up.</li>
<li>Hit <code>Ctrl-r</code> then <code>=</code>.</li>
<li>Write <code>123*456+789</code> then press Enter.</li>
</ol>


<p>That&rsquo;s it! Another example would be to call upon a script or command with an
expression, so if you want to insert the current date you could do something
like this (when the expression register is opened):</p>

<pre><code>=system('date')
</code></pre>

<p>Yes, this could also be done with <code>:r!date</code> for instance, which highlights the
fact that the expression register is more suited for Vimscript expressions (as
the name implies), but it works.</p>

<h2>Combining the two</h2>

<p>Since variables can be printed with the expression register, a way to use this
in macros would be to use a variable as a counter, print its value and then
increment it for each step.</p>

<p>Let&rsquo;s take this markdown text&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">*</span> <span class="nt">Some</span>
</span><span class='line'><span class="o">*</span> <span class="nt">Arbitrary</span>
</span><span class='line'><span class="o">*</span> <span class="nt">Text</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and let&rsquo;s replace the asterisks with numbers:</p>

<ol>
<li>We place the cursor at the start of the first line.</li>
<li>We set a counter variable with <code>:let c=1</code>.</li>
<li>Start recording the macro with <code>qq</code>.</li>
<li><code>cl</code> for changing the asterisk.</li>
<li>Enter the expression register, type <code>c</code> and hit Enter.</li>
<li>Add a period to make it look nicer and leave Insert-mode.</li>
<li>Move down one line and then to the start of the line, so we start the next
iteration from the same position.</li>
<li>Increment the counter with <code>:let c+=1</code>.</li>
<li>Close the macro with <code>q</code>.</li>
</ol>


<p>This can now be replayed with <code>@q</code> and then <code>@@</code> across the entire list. The
main issue with this macro would be that it ends by moving down one line,
assuming that all bullet points are one line long at most.</p>

<p>A better solution would be to search for the next asterisk, which would
indicate a bullet point. But what if there&rsquo;s an asterisk in the text? Well then
we should search for a leading asterisk.</p>

<p>As you can see you have to adjust the precision of your movement yourself to
the use case, but that&rsquo;s something you&rsquo;ll get to explore on your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim plugins - Why, How and Which]]></title>
    <link href="http://linduxed.github.io/blog/2013/04/13/vim-plugins-why/"/>
    <updated>2013-04-13T23:12:33+02:00</updated>
    <id>http://linduxed.github.io/blog/2013/04/13/vim-plugins-why</id>
    <content type="html"><![CDATA[<p>A lot of times when I meet &ldquo;Vim neophytes&rdquo; they mention that Vim is a great
editor, but they miss certain features that they find in their previous
editor/IDE of choice. Often this will be a case of them not having learnt the
Vim way of doing the same task, but occasionally you&rsquo;ll have to tell them that
&ldquo;Vim doesn&rsquo;t do that&rdquo;.<br/>
Indeed, these days if you don&rsquo;t want to hop between different applications (all
of them having the primary purpose of editing text of some kind) you&rsquo;ll want
features that go beyond &ldquo;editing text&rdquo;.</p>

<h4>These days an editor can&rsquo;t just be an editor.</h4>

<!--more-->


<p>I&rsquo;ve met programmers who say that they&rsquo;re fine with using Eclipse for Java, Vim
for Ruby and then nano for minor edits in configuration files. Any workflow like
this makes no sense to me, since I wouldn&rsquo;t want to edit text in anything that
isn&rsquo;t Vim. Most people don&rsquo;t see how it could be any different&hellip;</p>

<p>&hellip;until you show them the wealth of plugins available.</p>

<h2>How to get them installed</h2>

<p>The classic way of installing plugins is to get the latest version from
<a href="http://www.vim.org/scripts/index.php">vim.org&rsquo;s scripts</a> page in the form of an
archive and just extract the contents into <code>~/.vim/</code>.</p>

<p>Now that you know about how it was done once upon a time, please refrain from
ever using this method (unless you want a spectacular mess inside your
Vim-directory).</p>

<p>These days people have plugins in separate directories, all of them stored in
some central plugin directory (most often <code>~/vim/bundle</code>). These plugin
directories are in turn loaded by some &ldquo;plugin handler&rdquo;, of which there are
many.</p>

<p>A lengthy list of handlers <a href="http://vim-scripts.org/vim/tools.html">can be found here</a>. It doesn&rsquo;t matter that much which one
you choose, but it might be a good idea to go with one of the more popular ones,
which are Pathogen, Vundle and VAM (vim-addon-manager).</p>

<h2>My setup</h2>

<p>I prefer to do the handling and updating of plugins outside of Vim, so I&rsquo;ve got
the following setup:</p>

<p>I&rsquo;ve got a &ldquo;dotfiles&rdquo; git-repository to which I&rsquo;ve added my Vim-plugins as
submodules. This allows me to update all my plugins (along with any other
git-repos I&rsquo;ve added as dotfiles) with one command (alias it to something
shorter):</p>

<pre><code>git submodule foreach git pull origin master
</code></pre>

<p>Committing these updated plugins with <code>git commit -a</code> and pushing the dotfiles
repo will then allow me to clone the repo anywhere and get all my plugins at the
same time (just make sure to clone with the <code>--recursive</code> flag).</p>

<p>Standing in <code>~</code>, adding the plugins would be done with a command like this:</p>

<pre><code>git submodule add git://github.com/linduxed/vim-linduxed-theme.git .vim/bundle/vim-linduxed-theme
</code></pre>

<p>I then use Pathogen to load all the plugins (read its FAQ about adding it as
a submodule, if that interests you).</p>

<p>I should also mention that while not necessary, structuring up your <code>~/.vimrc</code>
somewhat could be of great help, since it will increase in size after you start
adding plugins. <code>:set foldmethod=marker</code> and <a href="https://github.com/linduxed/dotfiles/blob/master/.vimrc">adding some markers</a> helps a lot.</p>

<p>If you don&rsquo;t already have a <code>.vimrc</code>, this is a <a href="https://github.com/tpope/vim-sensible">good starting point</a>.</p>

<h2>Which plugins do I get?</h2>

<p>There are quite a few plugins out there, so I&rsquo;ll just get you started with those
that I find most significantly improve my Vim experience. Click on the plugin
names to be taken to their respective repositories.</p>

<p>If you&rsquo;re hungry for more after going through this list, check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the other plugins I&rsquo;ve got in my setup</a> and go to
<a href="http://vim-scripts.org/">Vim Scripts</a> or <a href="http://www.vim.org/scripts/index.php">the official script page</a>.</p>

<h3>File and buffer navigation</h3>

<h4><a href="https://github.com/kien/ctrlp.vim/">CTRLP</a></h4>

<p>There are a few fuzzy-search plugins out there, the most well known ones being
<a href="https://github.com/wincent/Command-T">Command-T</a>, <a href="https://bitbucket.org/ns9tks/vim-fuzzyfinder/">FuzzyFinder</a> and CTRLP. While they&rsquo;re all
pretty similar when it comes to finding files, I like CTRLP a bit more because
it lets you fuzzy find among buffers and most-recently-used files as well.</p>

<p>As long as you know the name of the file you&rsquo;re looking for, this type of plugin
takes care of most file opening operations, due to it being so quick.</p>

<p>In case you haven&rsquo;t seen fuzzy-finders before, here&rsquo;s a quick demonstration. This is what it looks like when I look for <code>game/ai/ai_dropnodes.c</code> in the <a href="http://www.warsow.net/">Warsow</a> source code:</p>

<p><span class='caption-wrapper'><img class='caption' src='http://linduxed.github.io/images/blog/ctrlp.gif' width='' height='' title='CTRLP in action. Looking for `ai_dropnodes.c`.'><span class='caption-text'>CTRLP in action. Looking for <code>ai_dropnodes.c</code>.</span></span></p>

<h4><a href="https://github.com/sandeepcr529/Buffet.vim">buffet</a></h4>

<p>There&rsquo;s a lot of overlap between CTRLP&rsquo;s buffer switching functionality and the
functionality of buffet, but if you want a tool that does nothing but switch
between buffers swiftly, this plugin is probably it.</p>

<h4><a href="https://github.com/scrooloose/nerdtree.git">nerdtree</a></h4>

<p>While I&rsquo;m using it less and less due to CTRLP, nerdtree is still the easiest way
to explore your filesystem without exiting Vim.</p>

<h3>Code writing helpers</h3>

<h4><a href="https://github.com/Lokaltog/vim-easymotion.git">vim-easymotion</a></h4>

<p>The big one. This plugin changed the way I move around in code completely. While
Vim gives you a great set of tools to move around in code (one of the things
that take the longest to master), this plugin takes it to another level. It&rsquo;s
probably the closest thing to mouse cursor accuracy you can get, while not
wasting time to fetch the mouse itself.</p>

<p>Words don&rsquo;t do this justice, so here&rsquo;s a video:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Dmv6-dguS3g" width="605" height="360" frameborder="0" allowfullscreen></iframe></div>


<h4><a href="https://github.com/tpope/vim-surround">vim-surround</a></h4>

<p>Makes the task of surrounding text with quotes, parentheses, brackets, etc. much
easier. Also provides quick removal and changing of surrounding characters.</p>

<h4><a href="https://github.com/garbas/vim-snipmate.git">vim-snipmate</a></h4>

<p>If you haven&rsquo;t used an editor with snippets before, it&rsquo;s basically a set of
templates, small pieces of code which are often used in which you fill out the
relevant fields.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/xV2IsE5OHd4" width="605" height="360" frameborder="0" allowfullscreen></iframe></div>


<p>I should mention that at the time of writing the linked project has its
development slowed down, with another project called <a href="https://github.com/SirVer/ultisnips">UltiSnips</a> getting a lot of traction (along with
a <a href="https://github.com/MarcWeber/ultisnips/">fork</a> made by an ex-snipmate
developer).</p>

<p>The situation is a bit complicated, but at the moment snipmate works fine for me
so I don&rsquo;t see a reason to switch.</p>

<h4><a href="https://github.com/scrooloose/nerdcommenter.git">nerdcommenter</a></h4>

<p>Indispensable plugin that makes the creation and handling of comments in code
a breeze.</p>

<h4><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a></h4>

<p>Inserts a closing parenthesis, bracket, curly brace or quote when you insert an
opening one. Also knows what to do with braces if you press enter inside them
(indentation and new empty line between them) along with some other nice things.</p>

<p>There&rsquo;s also <a href="https://github.com/Townk/vim-autoclose">AutoClose</a> which does
pretty much the same thing.</p>

<h4><a href="https://github.com/godlygeek/tabular.git">tabular</a></h4>

<p>For the people who like their code pretty (I obsess over that kind of stuff)
this plugin aligns code.</p>

<p><span class='caption-wrapper'><img class='caption' src='http://linduxed.github.io/images/blog/tabular.gif' width='' height='' title='Tabular lining stuff up.'><span class='caption-text'>Tabular lining stuff up.</span></span></p>

<h3>Miscellaneous</h3>

<h4><a href="https://github.com/linduxed/vim-linduxed-theme.git">vim-linduxed-theme</a></h4>

<p>This is here for two reasons:</p>

<ol>
<li>Plugging your own stuff is always nice.</li>
<li>People should get any theme.</li>
</ol>


<p>Seriously, the stock themes aren&rsquo;t that pretty and the ones you can find on the
internet are both varied and beautiful (not to mention that some have more
detailed syntax highlighting).</p>

<p>Here&rsquo;s a list of repos to look through (there are many others):</p>

<ul>
<li><a href="https://github.com/tpope/vim-vividchalk">Vividchalk</a></li>
<li><a href="https://github.com/daylerees/colour-schemes">Dayle Rees&#8217; color scheme collection</a></li>
<li><a href="https://github.com/altercation/solarized">Solarized</a></li>
<li><a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow</a></li>
</ul>


<h4><a href="https://github.com/sjl/gundo.vim.git">gundo.vim</a></h4>

<p>Many people aren&rsquo;t even aware of the fact that Vim has a branching undo history,
but this plugin makes it accessible. It upgrades the undo-tree from &ldquo;never use
it&rdquo; to &ldquo;use it all the time&rdquo;.</p>

<h4><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></h4>

<blockquote><p>I&#8217;m not going to lie to you; fugitive.vim may very well be the best Git wrapper of all time.</p><footer><strong>Tim Pope</strong></footer></blockquote>


<p>I&rsquo;ll have to agree. The extensive functionality is covered in detailed by Drew
Neil in his Vimcasts videos, starting at <a href="http://vimcasts.org/episodes/fugitive-vim---a-complement-to-command-line-git/">episode #31</a>.</p>

<p>If I was to pick just one of the many great features this plugin provides, then
it&rsquo;s the ability to open up the index version of the files and edit that while
having the version from the working directory open. This is like a superior
version of <code>git add --patch</code>, which is reason enough to get this.</p>

<h4><a href="https://github.com/scrooloose/syntastic">syntastic</a></h4>

<p>This plugin runs your code through a linter or syntax checker upon every save
and loads the warnings/errors into the location list and displays markers in the
gutter to indicate on what rows the warnings/errors are.</p>

<p>Incredibly helpful, you wouldn&rsquo;t know how much until you&rsquo;ve tried it. Syntastic
has code ready for the major linters/checkers/compilers for most languages.</p>

<p>Here&rsquo;s me fixing some warnings that pylint gives about &ldquo;no space after comma&rdquo;
(pylint warns about non-compliance with <a href="http://www.python.org/dev/peps/pep-0008/">PEP8</a>):</p>

<p><span class='caption-wrapper'><img class='caption' src='http://linduxed.github.io/images/blog/syntastic.gif' width='' height='' title='Syntastic giving warnings with the help of pylint.'><span class='caption-text'>Syntastic giving warnings with the help of pylint.</span></span></p>

<h4><a href="https://github.com/tpope/vim-unimpaired">vim-unimpaired</a></h4>

<p>Gives you a set of very useful bindings.</p>

<h2>Only the beginning</h2>

<p>The big category of plugins that I&rsquo;ve omitted is language/framework specific
plugins. I&rsquo;ve got a lot of those, but each specific one might not be useful to
everyone. With that said, there are some language specific plugins that are
really powerful and should most definitely be used if they align with what
you&rsquo;re coding in (<a href="https://github.com/tpope/vim-rails"><code>rails.vim</code> by Tim Pope</a>
is, from what I&rsquo;ve heard, considered to be a major source of Vim converts from
TextMate).</p>

<p>Once you start customizing your Vim, you&rsquo;ll notice that there are many areas
which you can improve with a plugin here and there. Just remember to stop and
consider if the functionality you&rsquo;re looking for isn&rsquo;t already available in
stock Vim.</p>

<p>As mentioned before, if you need some inspiration you can check out
<a href="https://github.com/linduxed/dotfiles/tree/master/.vim/bundle">the plugins I use</a> and if you&rsquo;ve got
any problems, just fire up your IRC client of choice and head over to
<code>#vim@freenode.org</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not ready for the switch]]></title>
    <link href="http://linduxed.github.io/blog/2012/05/10/not-ready-for-the-switch/"/>
    <updated>2012-05-10T14:12:25+02:00</updated>
    <id>http://linduxed.github.io/blog/2012/05/10/not-ready-for-the-switch</id>
    <content type="html"><![CDATA[<p>Yesterday, for some unknown reason, <a href="http://5digits.org/pentadactyl/">Pentadactyl</a> decided that it didn&rsquo;t want to work any more.
I still have no idea why, and since I&rsquo;ve been suspending my computer for quite
a few days now, it might actually have to do with me upgrading Firefox from 11
to 12 quite recently. The problem was actually pretty easily solved by
downloading the latest nightly and just fire that up, but before I did that, the
sudden loss of Vim-style navigation inspired me to pick up an old project of
mine:</p>

<p>Moving from Firefox to uzbl.</p>

<!--more-->


<h2>It sounds so beautiful</h2>

<p>For those who don&rsquo;t know what <a href="http://www.uzbl.org/">uzbl</a> is, it&rsquo;s basically
a browser that adheres to the UNIX philosophy of &ldquo;doing one thing and doing it
well&rdquo;. What that means is that the browser is split up into small pieces; you
have <code>uzbl-core</code> which is not much more than Webkit with some interfaces on top
of it, and the actual thing that resembles a browser is either <code>uzbl-browser</code> or
<code>uzbl-tabbed</code>.<br/>
You know you&rsquo;re in for a ride if the developers initially didn&rsquo;t have
<code>uzbl-tabbed</code> at all since &ldquo;window managers should be handling the different
instances of the browser, not the browser itself&rdquo;. All the basic functionality
that one takes for granted in other browsers that aren&rsquo;t strictly browsing are
extras here; bookmarks, downloading, completion and other functionality that you
come to expect are scripts that are loaded by the main configuration file.</p>

<h2>But the beauty comes at a price</h2>

<p>If the application is nice then I&rsquo;m willing to put the time into configuring it.
Whether it&rsquo;s my ZSH terminal, Vim, Firefox or something else, I&rsquo;ll put in the
work to get it <em>just right</em> if I know that I can get that magnificent end result
that I envision. uzbl sounds fantastic because I like the notion of being able
to configure a system from the ground up, to see what happens and to know what
does what.</p>

<p>There&rsquo;s just one big problem however:</p>

<p>The work necessary to get uzbl to the state my Firefox is in with the numerous
extensions and custom configurations would take <em>ages</em>, if at all possible.
I decided that I can try to live without NoScript, BetterPrivacy, Firebug and
some other nice extensions, as long as I get what I consider to be core
functionality to work smoothly. Even this (what I would consider modest)
aspiration is a challenge to say the least.</p>

<p>The default configuration gives you Vim-like control, with hjkl-movement and
some other things that you might recognize if you&rsquo;re coming from
Pentadactyl/Vimperator, but the similarities end fairly quickly. Once the basic
keys were reconfigured to my liking, one of the first things I wanted to tweak
was that since I use <code>uzbl_tabbed</code>, I&rsquo;ll want to reconfigure the <code>NEW_WINDOW</code>
action to load links in new tabs. The fact that only the action <code>NEW_TAB</code> worked
and not the other two potentially nice ones (<code>NEW_BG_TAB</code> and <code>NEW_BG_TAB_NEXT</code>)
was a shame, doubly so when there&rsquo;s no information for how get it to work.</p>

<h2>You&rsquo;re on your own</h2>

<p>This was the first encounter (out of many, I might add) with what eventually led
me to give up on the browser. There&rsquo;s no comprehensive source of information
about uzbl… anywhere.</p>

<p>I use Archlinux on my main computer but I know that I might not have been if it
wasn&rsquo;t for the fantastic Wiki. I don&rsquo;t know if that huge source of information
has spoiled me, but I feel like I&rsquo;m done with the days of guessing myself forth
when configuring software. I don&rsquo;t enjoy being in the situation of “Well I&rsquo;d
really like to do foobar, so I guess I&rsquo;ll scour tens of config files to see if
someone has done something remotely similar from which I can extrapolate some
kind of solution”.</p>

<p><em>I&rsquo;m done with that shit.</em></p>

<p>The Arch Wiki proves that even if you put docstrings for every line in your
configuration, a Wiki page with some quick and helpful tweaks that every new
user would make, is a thousand times better. As soon as I got any idea on how
I&rsquo;d like to tweak the interface of uzbl, it was followed by the realization that
there&rsquo;s neither a quick nor an obvious way to do it.</p>

<p>The <a href="http://www.uzbl.org/wiki/">official Wiki</a> is so barren that it seems to be
made by and exclusively for the current/future developers. Google isn&rsquo;t much
more helpful, the usual searches for HOWTOs or tutorials yield not much more
information than what one would derive from the sample configs that one can find
in the Wiki.</p>

<h2>See you some other time</h2>

<p>The impression I get is that if you&rsquo;re not ready to figure it out, then you
shouldn&rsquo;t even start. I gave it quite a few hours and at a certain point decided
that fixing Pentadactyl would be far more beneficial and far less time
consuming.</p>

<p>Some day I&rsquo;ll probably give it another shot, but by that time I&rsquo;ll probably come
prepared with far more patience and without the expectation to actually replace
Firefox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When the tools just don't work]]></title>
    <link href="http://linduxed.github.io/blog/2012/03/15/when-the-tools-just-dont-work/"/>
    <updated>2012-03-15T12:38:30+01:00</updated>
    <id>http://linduxed.github.io/blog/2012/03/15/when-the-tools-just-dont-work</id>
    <content type="html"><![CDATA[<p>Every once in a while you stumble on that area of software that Linux just
doesn&rsquo;t have covered. You might now be thinking that I&rsquo;d like to talk about
audio and video editing. A fair guess, since you&rsquo;ll hear people talk about
these two as areas where the other platforms have significantly more
sophisticated software available. But this isn&rsquo;t what I&rsquo;m going to talk about.</p>

<!--more-->


<p>You see, I&rsquo;ve had a look at the video and audio editors out there for Linux, and
while it&rsquo;s generally not as good as what you&rsquo;d have on OSX or Windows, there are
projects that make honest efforts to compete (Rosegarden comes to mind). I think
even the cynics can at least call the tools in these areas “rudimentary”.</p>

<p>“Streaming your desktop” in Linux, however, is one area you can&rsquo;t even fucking
call rudimentary. The appropriate description I&rsquo;ve come up with is “technically
working with the help of wizardry”, and I&rsquo;m thinking about whether that&rsquo;s too
generous.</p>

<h2>No audience</h2>

<p>I can&rsquo;t say I&rsquo;m particularly surprised by this situation, because apart from the
occasional recorded screen cast for some brand new package, there isn&rsquo;t that
much of a need, it seems. We don&rsquo;t have the games to stream, which I would
assume is a large part of what drives the revenue of a page like Justin.tv.</p>

<p>I assume most of the people who code in Linux aren&rsquo;t exactly eager to stream and
narrate their work, which could have been that “other area” of content that
would have driven the development of tools for streaming. I understand that the
Linux community might have less scenarios under which one would want to stream
one&rsquo;s desktop, but I&rsquo;m still surprised by how dire the software situation is.</p>

<h2>The tools</h2>

<p>From what I&rsquo;ve gathered, the most “mature” application available for handling
the various aspects of streaming (sound, picture, overlays and so on) is
WebcamStudio, which didn&rsquo;t exactly work. At the best of times it was giving me
something that looked like the stream I wanted to pass on, but I never managed
to actually get any streaming site to accept the data. This completely sidesteps
the issue that is the buggy-as-fuck interface, that neither looks good nor works
well.</p>

<p>The most stable solution I&rsquo;ve found, that has actually let me see my desktop on
the internet, is the combination of:</p>

<ul>
<li>Letting VLC capture your desktop with a wide array of flags to make sure it
comes out right. Figuring out those was a ton of fun.</li>
<li>Having a script called “jtvlc” catch the data and send it in through the
Justin.tv API.</li>
</ul>


<p>It&rsquo;s way better than nothing, but this gives me absolutely no ability to
customize the output, except choosing what part of my monitor set-up it should
grab.</p>

<h2>Conclusion</h2>

<p>In a way, I hope I&rsquo;ve missed something; I hope there&rsquo;s an obscure package that
simply grabs the part of the desktop you want, has a nice interface, and just
works. If that magic package exists however, then I haven&rsquo;t found it.</p>

<p>There are times when I really would have liked to share the view of one of my
screens, with some embedded microphone commentary. When the ideas pop up, I&rsquo;d
like to go ahead and just try them out, but in this case, I&rsquo;m completely
hindered. It might be that the process of getting these things to work under the
other systems is also a chore, but at least I&rsquo;ve seen plenty examples of there
being an end result. That&rsquo;s something I&rsquo;ve yet to see here in Linux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code I enjoy]]></title>
    <link href="http://linduxed.github.io/blog/2012/02/27/code-i-enjoy/"/>
    <updated>2012-02-27T18:59:41+01:00</updated>
    <id>http://linduxed.github.io/blog/2012/02/27/code-i-enjoy</id>
    <content type="html"><![CDATA[<p>Being a CS student means that I will be forced to code in a variety of
languages. A lot of our code will be written in Java or C++, but we&rsquo;ll
necessarily get in touch with many other languages, spanning over multiple
paradigms.</p>

<p>By no means am I a good programmer yet, but the exposure to the different ways
of crafting code has led me to think about what I value (as a novice
programmer) in a language. It&rsquo;s, after all, my main tool of expression.<br/>
Is it the brevity of the code? What the community surrounding the language is
like? Paradigm or strong vs. weak typing? Or could it be that I need the
language to be as “simple” as possible for me to be able to formulate ideas?</p>

<!--more-->


<h2>My roots, or the lack of them</h2>

<p>My first language I got to code in was actually Borland Delphi. I didn&rsquo;t really
know what I was doing, I just followed a guide that let me create a “guess what
number I&rsquo;m thinking of”-application with a GUI that I got to draw. I was
probably about ten years old at that time, and it wasn&rsquo;t until late elementary
that I got acquainted with Java, in a programming course.</p>

<p>Since a bit of Delphi was all I had under my belt at the time, Java was quite
the challenge at first. I didn&rsquo;t like the notion of there being things that
I had to write that I didn&rsquo;t fully understand the purpose of (the concept of
“static” was a prime example). Also, while I understood the necessity of
getters and setters, it felt weird that I had to write them everywhere;
I already had something against boilerplate.</p>

<p>Java has been with me for more than a decade, so I&rsquo;ve gotten used to its
intricacies, but it wasn&rsquo;t the language that got me really interested in
programming.</p>

<h2>Inspiration and motivation</h2>

<p>While I tried borrowing introductory books for both Java and C++, neither of
the languages really interested me. I felt that there was so much to learn,
just to accomplish the simplest of things. That&rsquo;s when a friend of mine
introduced me to Python.</p>

<p>The thing I immediately liked about Python was the brevity. To this day I find
that there&rsquo;s something special about seeing text no longer than a screen full
(very reminiscent of pseudo code, one might add) execute and work its magic.
It&rsquo;s empowering in a way, to so easily make so much happen. To let ideas
transform into code at such a quick rate becomes not only a tool, but
a motivation; when scraping together an application gets easier, the
imagination takes over.</p>

<p>Another thing that I hadn&rsquo;t experienced up until my encounter with Python was
easily readable code. I didn&rsquo;t know of the expression at that time, but
“self-documenting code” was something I really enjoyed; whether the names got
longer or the code had to be restructured, it was worth it for the readability.</p>

<p>Today it so happens that I code more Ruby than I do Python, but I still love
the language. Python both motivated and influenced me, but not to the extent
that Haskell did.</p>

<h2>A different way of doing things</h2>

<p>Haskell is special to me because it showed me a totally different way of
crafting code while still keeping it short and expressive. Once I got past the
peculiarity of functional programming it made me re-evaluate what I&rsquo;d consider
“comfortable” when I write code.</p>

<p>As soon as I got the taste for higher order functions, currying, lazy
evaluation and all of the other facilities that Haskell offers, I started to
think about why other languages hadn&rsquo;t introduced me to these concepts.</p>

<p>The thing I love the most about the language is that solving problems in it is
a satisfying experience. When the recursive thinking became more natural, and
I devoted the time to expand my vocabulary of functions that Haskell offered,
magic happened. A friend jokingly referred to Haskell as a “set of glorified
one-liners”, and while there&rsquo;s more to it than that, there&rsquo;s joy in crafting
those one-liners.</p>

<h2>Learning one&rsquo;s preferences</h2>

<blockquote><p>A language that doesn&#8217;t affect the way you think about programming, is not worth knowing.</p><footer><strong>Alan J. Perlis</strong> <cite>Epigrams on Programming</cite></footer></blockquote>


<p>I can&rsquo;t say that I had the greatest time during my struggles with Prolog, or
that fighting with all the details one has to keep in his head when writing
Assembly was a pleasure, but it made me see things differently.</p>

<p>I guess it&rsquo;s a “coming of age” thing for a programmer to realize not what you
want to code, but how you want to do it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Att stå still gåendes]]></title>
    <link href="http://linduxed.github.io/blog/2012/01/26/att-sta-still-gaendes/"/>
    <updated>2012-01-26T00:36:52+01:00</updated>
    <id>http://linduxed.github.io/blog/2012/01/26/att-sta-still-gaendes</id>
    <content type="html"><![CDATA[<p>En ny vecka gryr och jag står med hopp.</p>

<!--more-->


<p>Jobb jag har av varje storlek och slag,<br/>
nog till att fängsla mig natt som dag.</p>

<p>På måndagen är brådska mig främmande.<br/>
Jag lär ej jobba alls, trots att arbetsbördan är skrämmande.</p>

<p>Jag börjar strax, efter lunch, ikväll, inatt.<br/>
Imorgon jobbar jag säkert ifatt.</p>

<p>Tisdag och onsdag far fort likaså,<br/>
jag vet inte ens vad jag skall jobba på.</p>

<p>Vid torsdag morgon är det dags att rappa på,<br/>
halva veckan har gått och resultaten är som bäst små.</p>

<p>Idéerna och visionerna rusar då förbi,<br/>
alla saker som det vore bra om man avklarat i tid.</p>

<p>Men det är ju bara tankar, drömmar som hägrar var dag;<br/>
de ändrar inte något, minst av allt att jag är så svag.</p>

<p>Utan att minnas vad jag gjort, de timmar jag haft allt redo för drift,<br/>
jag sitter där vid midnatt, slagen av min lathet och apatisk som av ett gift.</p>

<p>Natten är dock ej slut för mig, midnatt är blott sen kväll.<br/>
Med småtimmarnas tystnad skall det här väl vara en bagatell?</p>

<p>När fredag dagas är allt för sent och hoppet borta.<br/>
Det enda jag klarade av var att få dagarna att kännas korta.</p>

<p>Skall man ens påbörja dagen när man redan igår var slagen?</p>

<p>Jag kan säkert lura mig själv en dag till,<br/>
“Jag tar igen allt, bara jag vill!”.</p>

<p>Värst är det då jag bara har helgen kvar,<br/>
för det är då tiden som snabbast far.</p>

<p>Flykten från arbete med sig oftast skulden bär,<br/>
men ej på helgen, inte den minsta tyngd på mig tär.</p>

<p>Vet något i mig att ambitioner skall stängas ned? Att lättjan skall skölja över?<br/>
Ohämmad kommer jag göra precis vad jag vill, men ej det jag behöver.</p>

<p>Måndag nalkas och ännu en vecka har försvunnit;<br/>
all den tid man kunde ha använt har mest uti sanden runnit.</p>

<p>Är något annat möjligt?<br/>
Kommer jag att ändras under årets lopp?</p>

<p>Jag kastar bort dessa tankar…</p>

<p>…ty en ny vecka gryr och jag står med hopp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just a toy]]></title>
    <link href="http://linduxed.github.io/blog/2010/08/17/just-a-toy/"/>
    <updated>2010-08-17T17:14:11+02:00</updated>
    <id>http://linduxed.github.io/blog/2010/08/17/just-a-toy</id>
    <content type="html"><![CDATA[<p>Yesterday I had an experience that was moving. It felt special, yet to the
casual observer it would have been anything but special.</p>

<p>It involved a <a href="http://www.puzl.co.uk/product_thumb.php?img=images/mini2_3_500.jpg&amp;w=400&amp;h=400">Rubik puzzle</a>
that I hadn’t solved yet, and I just felt like finishing it. After all, I know
how to solve a 2x2x2, so this one shouldn&rsquo;t have posed a problem.</p>

<!--more-->


<h2>Handle with care</h2>

<p>Inherent to the puzzle&rsquo;s design was that it turned strangely. In some cases the
turns were smooth, in other it felt like the contraption worked against you.
Regardless of it’s intricacies, I treated and used it like a regular 2x2x2; for
me it was as simple as them both being solved in more or less the same way.</p>

<p>So with the first of three “cubes” solved I started twisting and turning the
second one. As mentioned, it was normal that it occasionally stuck and made
a fuss about simple turns, but I kept on going, a couple of time forcing a turn
through instead of wiggling in the opposite direction.<br/>
After some work however, I had the second cube finished and only the last one
remained. Halfway through the third one however it happened.</p>

<p>Something broke.</p>

<p>Something inside the middle cube went loose, and the entire construction along
with it. This was with me being one and a half algorithm away from finishing the
puzzle for the first time.
I clasped the puzzle, realizing that if I let go of any one loose piece, the
entire thing would fall apart. Greedily, all I thought about was solving it,
despite its fragile state. Holding all the pieces on the first and the middle
cube together took a hand and some pressure, making the cube very hard to
maneuver, but this didn&rsquo;t sway me; there was no giving up. Slowly I approached
the last few moves, and I suddenly hit me that this thing was dying.</p>

<p>It was on respirator and intravenous, and I was still pushing it.</p>

<p>To make things worse, I got to be about four turns away from finishing the
entire puzzle when the thing stuck, there was no moving it. It was as if it had
given up; the last turn was made.
Seeing that there was no way to complete the puzzle, despite being so close,
I gave up. Putting it down on the table it went to pieces, its entire structure
crumbling part by part.</p>

<p>It was a strange moment because it felt like I had witnessed and been part of
a toy&rsquo;s death bed experience.</p>

<p>After looking at the pile of coloured plastic I stepped back and reminded myself
that it was just a toy. I left it at that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laughs from nowhere]]></title>
    <link href="http://linduxed.github.io/blog/2010/05/25/laughs-from-nowhere/"/>
    <updated>2010-05-25T12:18:00+02:00</updated>
    <id>http://linduxed.github.io/blog/2010/05/25/laughs-from-nowhere</id>
    <content type="html"><![CDATA[<p>Humour is a force that binds and divides.</p>

<p>It is as hard to define as the force of love and yet as simple. When you burst
out into an honest laughter, just as with love, it just happens.<br/>
Similarly, what may be infatuating for one, might be repulsive to the other.
I expect everyone to have wondered why person next to them is laughing, just as
I expect most people to have encountered love they cannot understand.</p>

<!--more-->


<p>Generally, differences in taste of humour are not very much of a problem, but
when your everyday life gets permeated with shit that can only be described as
offensively boring, then there is little room for understanding. A respectful
approach is not an option when mindless attempts at amusement escape the media
and start pouring out onto the street.</p>

<p>There is no way to tell who got the charging freight train of sedative
performances going, but if there is something keeping that train speeding ahead
then it&rsquo;s the american sitcoms and worthless comedians that get too much
publicity. For me there is a crucial element in humour that is both the magic
and vigor of the performance, but it&rsquo;s a rare encounter today:</p>

<h2>Surprise</h2>

<p>The <em>unknown</em>. I need the unexpected because it pulls me out of everyday life
and lets me experience something different, something intriguing in its
peculiarity. The near total absence of surprise in most of (but in no way
limited to) the American humour, is baffling to me. How can this junk survive
(not to mention prosper)?</p>

<p>The answer lies in an entity even more baffling, the <em>viewers</em>. The survival of
these Valium substitute shows could be explained by the fact that people
actually are giving the time to enjoy this turd; there must be many of them.</p>

<p>I get annoyed by having a <em>supposed</em> comedy use jokes that you can smell from
an ocean away and then have them repeated so often that you get to experience
déjà vu every five minutes.<br/>
But these people don&rsquo;t, and they even laugh. Why?</p>

<p>Do they have a lacking comedy experience? Have they never encountered these
laughs? Do they disregard the fact that they know what is about to be said?
Could it be that they don&rsquo;t remember the gags?</p>

<p>Is chronic amnesia is the key to a more joyous life?</p>

<h2>They&rsquo;re everywhere</h2>

<p>I&rsquo;ve met these people, you have too. You might very well be one of them.
They&rsquo;re normal people that seem to live normal lives, and yet&hellip;</p>

<p>I&rsquo;m not condemning you or anyone else for your taste, but I&rsquo;ve tried for too
long now to understand why people appreciate this unending stream of feces
pretending to be comedy.</p>

<p>Understanding the people around me is something I have to do every day, but
this I just can&rsquo;t grasp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unreal Tournament vs. Quake]]></title>
    <link href="http://linduxed.github.io/blog/2010/01/12/unreal-tournament-vs-quake/"/>
    <updated>2010-01-12T18:54:49+01:00</updated>
    <id>http://linduxed.github.io/blog/2010/01/12/unreal-tournament-vs-quake</id>
    <content type="html"><![CDATA[<p>Within the genre of first person shooters there is a sub-genre that are often
called arena shooters.</p>

<p>Arena shooters focus on dropping you and a bunch of opponents into enclosed
arenas with a bunch weapons with the sole objective of making your opponents
less intact than you are. With such a simple premise, the creators of such
games are forced to make the basics right, the core shooting and the movement
in the world. The expectations on the breadth of the game are lowered in favor
of a perfect &ldquo;feel&rdquo;. Only when the very basics are perfect, the creators start
thinking about adding new gameplay elements on top of the foundation.</p>

<!--more-->


<h2>The two contenders</h2>

<p>When speaking of arena shooters, there are two series that to me stand way
above everything else, and they are both featured in the title of the article.</p>

<p><strong>Quake</strong> was the game that started it all, a masterpiece from id Software that
defined the genre. It&rsquo;s strengths lie in a very clear cut arsenal of weaponry
where close to no overlapping exists, and a very fast unforgiving gameplay.
While there are four iterations of the series, the most prominent and well
respected is Quake III Arena, which for many is the epitome of FPS gaming.</p>

<p><strong>Unreal Tournament</strong> didn&rsquo;t start a genre, but instead showed what should be
expected of it. Not only did it rival Q3 on the basis of incredible core
gameplay (that didn&rsquo;t feel like a simple imitation), it offered more game
modes, better maps and more customizability with the inception of mutators. Add
to that an outstanding amount of official content that was/is continually
expanded, and you&rsquo;ve got something that ends up being &ldquo;Bigger, Better and more
Badass&rdquo; (to quote a certain Epic Games employee).<br/>
Unreal Tournament has by now had four iterations, with UT2003 not being much
more than a solid precursor to UT2004, cutting down the real number to three.
There are important differences between the iterations of Unreal Tournament,
but since the the purpose of the article is comparing what I believe to be the
foremost of both series, UT2004 will be seen as the representative game. While
I don&rsquo;t feel it is fair to disqualify the other two without a proper
explanation, I&rsquo;ll leave that to a different article (some of it has been
covered in my <a href="http://linduxed.github.io/blog/2009/06/03/unreal-tournament-3-plus-titan-pack/">UT3 review</a>).</p>

<h2>Basics compared</h2>

<p>The movement is what splits these games apart. Not that the weapons don&rsquo;t have a contributing factor in differentiating the two, but the movement in the two restricts the designs of the maps in a very tangible way, so therefore it will be dealt with first.</p>

<h3>Movement</h3>

<p>Quake 3 with it&rsquo;s strafejumping and rocketjumping will take a player long
distances over a short time, both horizontally and vertically. This forces maps
into accommodating rapid, long distance movement. This has left players with
a history of not more than &ldquo;fairly&rdquo; entertaining maps that are hampered by the
need for simplicity. While this doesn&rsquo;t mean that there are no interesting
maps, they are however quite sparse.<br/>
And yes, I do use &ldquo;interesting&rdquo; and &ldquo;entertaining&rdquo; interchangeably in this case
because I don&rsquo;t find a handful of platforms hanging in space (Longest Yard,
Q3DM17) or two rooms with corridors between them and a cupboard (House of Pain,
Q3DM2) stimulating in any possible way.</p>

<p>Thankfully, with Quake Live the community received a set of maps that are in
general vastly superior to the old maps, but they are still only making the
best out of the situation, following the old guidelines of what can and can&rsquo;t
be done. Expect large swaths of open area, wide corridors and minimal amounts
of vertical obstruction.</p>

<p>If Q3 takes you far in a linear fashion, Unreal Tournament (and especially
2004) takes you a short distance in a more explosive and unpredictable fashion.
Dodging is a shorter movement but happens as suddenly as a rocket jump and the
double jump takes you fairly high without the use of any weapons. This, along
with the absence of the rocket jump is what results in a higher tolerance for
map complexity and &ldquo;right-angle-density&rdquo;. In Quake 3 if a corner comes your
momentum is killed, in Unreal Tournament you&rsquo;re just doing another dodge in
another direction.</p>

<p>The potential for all kinds of wonderful maps is there (as can be seen with
everything from DM-Roughinery to UCMP2-Churn), but it seems that players still
gravitate towards the large maps, where it can take two, three, sometimes even
four full dodge jumps just to get across a corridor, and that&rsquo;s probably not
even a major part of the map (yes DM-Rankin, you&rsquo;re <em>too spacious</em> for 1v1, no
matter how many times you&rsquo;re played in tournaments).</p>

<p>All it really amounts to is that fight, chase and flight is more interesting if
you have to consider multiple angles and directions at all times,
considerations that will never arise in unobstructed environments. Apart from
the effect movement has on map design, I also think that the short range
explosive movement of dodges is more interesting in the heat of battle than
that of rocket jumping.</p>

<h3>Weapons</h3>

<p>So while I would argue for UT2004 having the superior movement system, the same
cannot be said for the weapon arsenal. As mentioned weapons come second after
movement when it comes to importance, but it is not be neglected at all.
There&rsquo;s a reason the saying &ldquo;A shooter is as good as it&rsquo;s weapons&rdquo; exists (as
you might understand, I don&rsquo;t agree with it completely).</p>

<p>Quake 3 has undoubtedly the best arsenal of the two and it might, quite
possibly, have the best one in any FPS. In no way do I mean to belittle the
weapons of Unreal Tournament which are indeed fantastic, but there is simply no
arsenal (that I&rsquo;m aware of) that has so clear roles of application. After one
or two shots fired from every weapon in Q3 you have a perfect understanding of
their usage, and can subsequently start learning how to apply them in combat.
They are few, but they are concise; the Quake 3 arsenal is the
<a href="http://en.wikipedia.org/wiki/KISS_principle">KISS</a> principle personified,
covering all ground needed, making no weapon obsolete.</p>

<p>Unreal Tournament 2004 has an arsenal that is more or less double the size,
considering the multiple firing modes offered. The difference here lies in
possibilities offered, and their necessity at all times.</p>

<p>Where Quake 3 stops at the grenade launcher for indirect area denial, UT2004
gives the Assault Rifle grenades for roughly the same result, but also gives
the Flak secondary for instant explosion denial and the Bio carpeting for
delayed but static denial (until the slime explodes).<br/>
Same thing goes for the &ldquo;stream of damage&rdquo; weapons. Q3 has its Lightning Gun,
while UT2004 has two firing modes on the Minigun and the Link Gun shaft. All
three are different, but only slightly. The overlap is noticeable but
fortunately the differences between the weapons and firing modes are pronounced
enough to warrant their inclusion.</p>

<h4>Problems with UT2004</h4>

<p>I have a couple of gripes with the arsenal of UT2004 however that detract from
a game that I otherwise enjoy so much:</p>

<p>First of all, the change from Enforcers to Assault Rifles was a grave mistake
considering how worthless the AR is (even when you dual wield them). Only the
grenades are worth anything, and even then they&rsquo;re fired very slow (if you want
any kind of range with them) and are fairly hard to hit with. Grave mistake.</p>

<p>Secondly, the Link Gun plasma would need to fly as fast as, and have a rate of
fire of, the Plasma Gun to even be remotely useful outside of vehicle and
structure bombardment in Assault/Onslaught.</p>

<p>Finally, I feel that the UT3 versions of the Rocket Launcher and Bio Rifle are
a bit better than the ones of UT2004. RL is easier to get direct hits with (I
don&rsquo;t care much for the grenade functionality) and the Bio Rifle is also easier
to hit with. The fact that the Bio drains instead of insta-kills is also a very
nice feature. These changes are minuscule compared to the other points, but they
still bug me at times.</p>

<h4>The ASMD Shock Rifle</h4>

<p>A matter that will most likely make or break the game for many however is the
Shock Rifle. This is a Swiss army knife of weapons, and I to this day can&rsquo;t
decide if it detracts from or enhances the game. It has a powerful hitscan
attack (45 damage), a spammable secondary (for the same amount of damage), and
not an area denial but powerful <strong>space</strong> denial attack.</p>

<p>The space denial is really the only type of attack that Q3 lacks, however Q3
doesn&rsquo;t need it; the question I ask myself is whether Unreal Tournament needs
it. Space denial is (especially as powerful as the shock combo) the most
versatile tool one can get in an arena shooter according to me, and this
mechanic was and still is a risky business to implement.</p>

<p>Even after so many years of play with it, I can give no straight answer on
whether it is detriment or an benefit to the game.</p>

<h2>Closing thoughts</h2>

<p>UT2004 is most definitely the slower game of the two, but what it looses in
speed it gains in complexity. Rarely have I found matches in Quake that have
provided me with so much joy as the ones I&rsquo;ve had in UT2004, and in the end
I think that&rsquo;s what it&rsquo;s all about.</p>

<p>The thought of comparing UT2004 and Q3 (and to an extent the series) came about
in the midst of an argument during a LAN party, when the choice of game was to
be decided. At the time UT2004 was chosen for it&rsquo;s more enjoyable 1v1 and 2v2
(according to a majority), additional game types and more content in general
helped along the way too.</p>

<p>I respect both games as cornerstones in the FPS realm, but in the end there has
to be one you feel you&rsquo;ll never uninstall.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The black sheep of social media]]></title>
    <link href="http://linduxed.github.io/blog/2009/09/28/the-black-sheep-of-social-media/"/>
    <updated>2009-09-28T00:16:15+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/09/28/the-black-sheep-of-social-media</id>
    <content type="html"><![CDATA[<p>Last week the company had a group activity where the following question had to
be answered:</p>

<h4>&ldquo;How can we make our company seen?&rdquo;</h4>

<p>A broad but familiar question, one that I assume most companies try to figure
out the answer to.</p>

<!--more-->


<p>At first I thought that the sandwich buffet would be the main attraction of the
evening; I might have some qualities of a marketer, but my days in
telemarketing weren&rsquo;t the most joyful I&rsquo;ve had.<br/>
Most groups employed the classical way making a company known, that is to
plaster our logo on everything that can fit it. There were some interesting
ideas like offering WiFi hotspots at the conventions that the company tends to
attend, but in general a flurry of company car stickers, usb keys and coffee
cups were suggested.</p>

<p>I had the good fortune however of sitting next to a table where the idea of
a Twitter account emerged. This would be a channel outwards for the company the
table thought, a news feed. The idea sounded interesting until it occurred to
me that these people had no broader intentions than dropping a release
announcement at times in less than 140 characters; it turned out that I (and
a lone co-worker that shared my views) had to mention that moving into social
networking implies that there has to be something social about the new way of
communicating. We already have a web page for announcements.</p>

<h2>Learn from others</h2>

<p>The last time I witnessed a remarkable failure in trying to penetrate the
social media, with the one responsible never having tried to do so before, was
during the EU-elections in Sweden.<br/>
The seven established parties noticed that the digital campaign for Obama was
highly successful, and therefore decided that bombarding YouTube, Facebook,
Twitter and so on with sponsored content would grant them instant victory.</p>

<p>What neither they then nor my company now realized was that to be of relevance
you have to be someone, and by someone I mean an entity that generates
a two-way discussion.</p>

<p>The &ldquo;two-way&rdquo; part is where the secret lies. The only party that had
a substancial and lasting presence during the elections was, unsurprisingly,
the Pirate Party. What they did was to start heated debates on blogs, comment
sections and on Twitter feeds. People sharing their points of view and
defending them vigorously because of a passion for the issues at hand.</p>

<p>People. Opinions. <em>Passion</em>.</p>

<p>Indications of a driving force that can generate interest, those are the things
that will make you want to make contact and possibly spread the three above
further.</p>

<h2>How to be seen</h2>

<p>So the Twitter feed was a great idea for the company, but it does take that
lively person to keep it going. My suggestion was at the time was to appoint
a person who has a fairly good insight into most parts of the company to on
a routinely basis scurry around the web for places to make our voice heard on.<br/>
It doesn&rsquo;t matter whether it would be writing a column on some page related to
our area of expertise, or if it would be posting a tiny tweet to compliment the
author of an article regarding a hot topic. Turn the digital avatar of our
company into a presence.</p>

<p>I&rsquo;m not a master of this subject, but wouldn&rsquo;t it be nice if it more often felt
like the one selling you something is someone you&rsquo;d like to recommend to your
friend?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At the snap of your fingers]]></title>
    <link href="http://linduxed.github.io/blog/2009/06/20/at-the-snap-of-your-fingers/"/>
    <updated>2009-06-20T18:23:15+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/06/20/at-the-snap-of-your-fingers</id>
    <content type="html"><![CDATA[<p>I&rsquo;m by now profoundly tired of the misconception that has been floating around
in our modern digitalized society for too long of a time. It thrives within the
older generations, but is in no way limited to them. It goes like this:</p>

<h4>Piracy is theft!</h4>

<p>Stop. <strong>Now</strong>.</p>

<!--more-->


<p>This statement not only indicates a lack of understanding of how the digital
world works, but quite often also a lack of <em>will</em> to understand it, the latter
being a really frightening aversion to future.</p>

<p>Most often the idea of a lost profit is the fundament of this flawed thinking,
and the subsequent assumption of criminality doesn&rsquo;t make the train of thought
better tied to reality in any way.<br/>
What it is tied to however is an age-old view of how the immaterial is spread,
a view that is not compatible with the internet; internet is not like anything
humanity has every experienced before.</p>

<p>In May 2009 at TED, Clay Shirkey had a talk called
<a href="http://www.ted.com/talks/clay_shirky_how_cellphones_twitter_facebook_can_make_history.html">&ldquo;How cell phones, Twitter, Facebook can make history&rdquo;</a>,
and while I urge all my visitors to see this talk (as well as his other one),
there is one important quote that sums it up quite well:</p>

<blockquote><p>The internet is the first medium in history that has native support for groups<br/>and conversation at the same time.</p><p>Whereas the phones gave us the one-to-one pattern, and television, radio,<br/>magazines and books gave us the one-to-many pattern, the internet gave us the<br/>many-to-many pattern.</p><p>For the first time media is natively good at supporting these kinds of conversations.</p></blockquote>


<p>A keyword in this talk is revolution. It is a strong word, but an accurate one
nonetheless. When a large amount of people are given the power to create,
recieve and share intellectual content at will and in unrestricted amounts,
then there is no other word that will describe the phenomenon better.<br/>
So the fundament of the fallacy is the notion that the internet fits within the
old boundries of the centralised systems, the corporate control and the old
media. It does not.</p>

<h2>An alternate reality</h2>

<p>Another issue with the mentioned &ldquo;lost profit&rdquo;-explanation of why digital
piracy should be considered a criminal act is that this way of thinking is
completely incompatible with the idea of altruistic sharing. Within most
cultures around the world, sharing items of your ownership is considered an act
of friendship, especially if done voluntarily.</p>

<p>Now I hear the opposition wildly shouting &ldquo;Not at the cost of someone else!&rdquo;.
The thing is however that when saying such a thing the opposition expects to
get money for things they have no control over. Another important question is
whether they have the right to have control over them. When a piece of
information is digitalized the idea of the opposition is that there is a fee
that should carry with the very existence of the work.</p>

<p>Let me present you with a hypothetical alternate reality:<br/>
Imagine there was a fairly unknown, but very easy way to replicate matter;
cross your fingers on the left hand, look at the object you want more of, snap
the fingers of the right hand and suddenly you&rsquo;ve got more!</p>

<p>This knowledge was at first limited to a few select people called &ldquo;geeks&rdquo;, but
because it was so easy to do, soon the world&rsquo;s populace was perfectly aware
that if anyone wanted something then a snap of your fingers was all you needed.</p>

<p>Let&rsquo;s say you&rsquo;re out with your friends some evening in this world. You all went
to an event of some sort, had a good time, and sooner or later found that it
was time to return home. The problem was however that you had some urgent
matter to take care of, making you drive in a completely opposite direction,
which of course conflicted with the plans of your friends.<br/>
An idea stroke. At the snap of your fingers your friends could have a car each.
<strong>A snap</strong>.</p>

<p>What should one do? Help your friends at no cost whatsoever? Refuse?<br/>
At what grounds would you refuse? That they should buy one themselves when
you&rsquo;ve got a thousand in your fingertips? And why would the thought even cross
your mind? These are your friends in need, and with an infinite amount of cars
at your disposal it would seem odd not to help them out.</p>

<h2>Your turn to think</h2>

<p>This is quite a ways from our world, but the observant have already noted that
this is how the digital world has always worked. If an item is infinite in
amount (which is a tad more than what the old generation is used to) then one
must question whether to control this item is feasible, reasonable and most
importantly righteous.</p>

<p>The digital world is here to stay, I wonder how long it will take for some to
adjust to that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring your Awesome 3.x install]]></title>
    <link href="http://linduxed.github.io/blog/2009/06/15/configuring-your-awesome-3-dot-x-install/"/>
    <updated>2009-06-15T02:59:35+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/06/15/configuring-your-awesome-3-dot-x-install</id>
    <content type="html"><![CDATA[<p>After posting my guide on installing Awesome 3.x I got the inevitable question
of how to actually configure it. This WM is not for the faint of heart.<br/>
On the other hand it does offer a lot of customization, should you know the lua
programming language. I for one don&rsquo;t, but that didn&rsquo;t stop me from tweaking
the defaults, and for most people that will be enough to get them started.</p>

<!--more-->


<p>As soon as one starts to see the possibilities offered by Awesome, very soon
the <code>#awesome@irc.oftc.net</code> channel will have a new visitor.</p>

<h2>Startup applications</h2>

<p>The first thing to adjust is to get your startup applications going. I&rsquo;m using
Ubuntu right now, so the locations of the files will vary from distro to distro,
but the content that I will outline will not.<br/>
The thing to look up is the <code>xsession</code> file that that your desktop manager uses
to execute <code>awesome</code> after login. For me the file lies here:</p>

<pre><code>/usr/share/xsessions/awesome.desktop
</code></pre>

<p>This file looked like this in it&rsquo;s original state for me:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Desktop Entry]
</span><span class='line'>Encoding=UTF-8
</span><span class='line'>Name=awesome
</span><span class='line'>Comment=Highly configurable framework window manager
</span><span class='line'>TryExec=awesome
</span><span class='line'>Exec=awesome</span></code></pre></td></tr></table></div></figure>


<p>For configuration purposes, I changed this to the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Desktop Entry]
</span><span class='line'>Encoding=UTF-8
</span><span class='line'>Name=Awesome
</span><span class='line'>Comment=Starts Awesome 3
</span><span class='line'>Exec=/usr/share/xsessions/awesome_fixed.sh
</span><span class='line'>Type=Application</span></code></pre></td></tr></table></div></figure>


<p>The main change is that that the <code>awesome_fixed.sh</code> file is run instead of
<code>awesome.</code> You can call the <code>awesome_fixed.sh</code> file anything, but do end it with
a <code>.sh</code> suffix.</p>

<p>You will now need to create the mentioned file and fill it with the wished for
applications:</p>

<pre><code>sudo vim /usr/share/xsessions/awesome_fixed.sh
</code></pre>

<p>My file currently looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Colemak necessities.</span>
</span><span class='line'>xset r 66 &amp;
</span><span class='line'>xmodmap -e <span class="s2">&quot;remove Lock = Caps_Lock&quot;</span> &amp;
</span><span class='line'>
</span><span class='line'>gnome-settings-daemon &amp;
</span><span class='line'>
</span><span class='line'><span class="c"># Wallpaper switching.</span>
</span><span class='line'>habak -ms -hi /home/linduxed/Pictures/wallpapers/ &amp;
</span><span class='line'>
</span><span class='line'><span class="c"># Tray apps.</span>
</span><span class='line'>nm-applet &amp;
</span><span class='line'>gnome-power-manager &amp;
</span><span class='line'>update-notifier &amp;
</span><span class='line'>gnome-do &amp;
</span><span class='line'><span class="c"># alarm-clock &amp;</span>
</span><span class='line'><span class="c"># blueproximity &amp;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> /usr/bin/awesome
</span></code></pre></td></tr></table></div></figure>


<p>Note that all entries before the exec line need to be marked as background
processes with an ampersand (<code>&amp;</code>).</p>

<h2>Configuring the WM</h2>

<p>Most configuration of the WM itself (and also all that I have ever touched) is
done in the central <code>rc.lua</code> file:</p>

<pre><code>sudo vim /etc/xdg/awesome/rc.lua
</code></pre>

<p>Here you will be presented with a long file that basically decides how Awesome
will behave. There are tons of lines to configure, but the defaults are really
good so we&rsquo;ll focus on the critical ones to tweak.</p>

<p>At the time of writing my configuration file looks like <a href="https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua">this</a>
(<strong>EDIT</strong>: old file no longer available, this is most likely not far off). It&rsquo;s
designed for a colemak keyboard layout.</p>

<h3>The tweaks</h3>

<p>There are bunch of tweaks that you figure out on your own, thanks to the
included comments above various configuration options, so I&rsquo;ll just mention
a couple of the changes. The following pieces of code are mostly excerpts from
larger blocks of code:</p>

<figure class='code'><figcaption><span>Floating</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L319-L320'>start:319</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="p">{</span> <span class="n">rule</span> <span class="o">=</span> <span class="p">{</span> <span class="n">class</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">MPlayer&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">floating</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lines like these force applications to float, or (if you&rsquo;d need it) the
opposite. One thing to always remember is to have all except the last line in
a list be ended with a comma, otherwise Awesome will not start at all.</p>

<figure class='code'><figcaption><span>Desktop auto-tagging</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L327-L330'>start:327</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="p">{</span> <span class="n">rule</span> <span class="o">=</span> <span class="p">{</span> <span class="n">class</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">Thunderbird&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">tags</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">8</span><span class="p">]</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="n">rule</span> <span class="o">=</span> <span class="p">{</span> <span class="n">role</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">ncmpcpp&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">tags</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">9</span><span class="p">]</span> <span class="p">}</span> <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;ve got an application that you always start and then move to a specific
desktop (or &ldquo;give it a tag&rdquo; as it&rsquo;s called in Awesome) then this section is for
you. Just as in the float-apps section, remember the commas!</p>

<p>Next up are the key bindings. I like to keep every thing centered around
a arrow-key-layout, so the most frequently used commands will be on the
QWERTY-layout keys JKLI, a bit less used ones on YHUO so that everything is
close.</p>

<figure class='code'><figcaption><span>Cycle between desktops</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L171-L172'>start:171</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">l&quot;</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewprev</span> <span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">y&quot;</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewnext</span> <span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Cycle between windows</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L175-L184'>start:175</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">i&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span>
</span><span class='line'>        <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="k">then</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">n&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">function</span> <span class="p">()</span>
</span><span class='line'>        <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="k">then</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Move the windows around</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L189-L190'>start:189</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Shift&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">i&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">swap</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Shift&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">n&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">swap</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Switch which screen is focused</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L191-L192'>start:191</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Control&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">i&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">screen</span><span class="p">.</span><span class="n">focus_relative</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Control&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">n&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">screen</span><span class="p">.</span><span class="n">focus_relative</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Jump to client with urgent-flag</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L186'>start:186</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>  <span class="p">},</span> <span class="s2">&quot;</span><span class="s">u&quot;</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">urgent</span><span class="p">.</span><span class="n">jumpto</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some applications can send urgent-flags (IMs for instance), this jumps to them
(regardless of what tag is currently up).</p>

<figure class='code'><figcaption><span>Move delimiter</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L206-L207'>start:206</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">u&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incmwfact</span><span class="p">(</span> <span class="mf">0.05</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">e&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incmwfact</span><span class="p">(</span><span class="o">-</span><span class="mf">0.05</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a lot of its layouts, Awesome splits the desktop into two halves, with
a delimiter in the middle. Make sure to place this on easily accessible keys,
because it&rsquo;s often used.</p>

<figure class='code'><figcaption><span>Adjust window count</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L208-L209'>start:208</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Shift&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">u&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incnmaster</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Shift&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">e&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incnmaster</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where in the previous snippet we moved the delimiter, this adjusts the amount
of windows on the main side of the delimiter. Hard to explain, easy to grasp
once you use it. Keep this easily accessible too.</p>

<figure class='code'><figcaption><span>Adjust column count</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L210-L211'>start:210</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Control&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">u&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incncol</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Control&quot;</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">e&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incncol</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same as previous, but increases/decreases amount of columns (that&rsquo;s what the
config file calls them) on the secondary side of the delimiter. Again, try it
out to understand what I&rsquo;m talking about.</p>

<figure class='code'><figcaption><span>Fullscreen</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L228'>start:228</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">f&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">.</span><span class="n">fullscreen</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">fullscreen</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Kill application</span><a href='https://github.com/linduxed/dotfiles/blob/0033a11d10560fa78acd10569316a6aabdad9075/.config/awesome/rc.lua#L229'>start:229</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="p">},</span> <span class="s2">&quot;</span><span class="s">`&quot;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">:</span><span class="n">kill</span><span class="p">()</span> <span class="k">end</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>So those are the basics. I will most likely post follow-ups on this HOWTO when
I find some new tricks that make using Awesome even better. I&rsquo;ve barely
scratched the surface, so if someone has some hacks that they&rsquo;d like to share
I&rsquo;d be glad to post them here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pirate Party gets into EU-parliament]]></title>
    <link href="http://linduxed.github.io/blog/2009/06/09/pirate-party-gets-into-eu-parliament/"/>
    <updated>2009-06-09T18:35:27+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/06/09/pirate-party-gets-into-eu-parliament</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve for some time now looked at extreme sides in conflicts/discussions as
a kind of a necessity. It&rsquo;s not that you will always agree with them, but they
will inevitably broaden the scope of the argument.<br/>
I might, for instance, not agree with right-wing extremists, but having them
there forces one into debates that would otherwise never be had, opening ones
eyes to opinions outside what is seen as &ldquo;normal&rdquo;.</p>

<p>It was this kind of blindness to other opinion that permeated the Swedish
(although not in any way limited to) politics when it came to a certain
subject:</p>

<!--more-->


<h2>Digital Integrity</h2>

<p>For the longest time, internet as an entity has been completely outside of the
scope of Swedish politics. Media uses it extensively, the companies love it and
the people wouldn&rsquo;t want to live without it.</p>

<p>The current generation of politicians however have other issues to deal with,
be it the climate, the unstable economy or health care. In no way are these
subjects unimportant, they&rsquo;re crucial to the workings of the society and should
not be neglected.<br/>
These are however problems that have been around for a great deal of time, and
both the people and the politicians seem to have fallen into a jog trot where
the same range of problems are debated year in and year out, with the same
arguments coming from the same parties.</p>

<p>Internet does not fit into that jog trot; internet is an anarchistic yet
beautifully democratic place that collectively runs circles around any other
medium out there, a completely new way of thinking. The people have been given
an network that enables them to gain and share information, culture and tools
at will. A hive mind has been created.<br/>
However, a power of this magnitude can be used for a variety of different
things, and some found that variety dangerous.</p>

<p>&ldquo;In service of the industries&rdquo; the state has given internet users a rough
treatment the recent years, mainly (but not limited to) laws crafted by the
hands of lobbyists. The politicians should most definitely seek for help if
they know nothing on the subject, but asking profit driven organizations for
advice has so far only resulted in everything from the mild offenses to the
draconian and deeply disturbing laws.</p>

<p>It gets even worse when the words &ldquo;For the public safety.&rdquo; are used.
<a href="http://en.wikipedia.org/wiki/FRA_law">Spying actively on millions of innocent people</a>, forcing companies to
<a href="http://en.wikipedia.org/wiki/Telecommunications_data_retention#Data_retention_in_the_European_Union">store every last bit of digital information for at least six months</a>
and turning <a href="http://en.wikipedia.org/wiki/Anti-Counterfeiting_Trade_Agreement">customs personnel into arbitrary copyright enforcers</a> are some of
my favourite material for getting my rant mode on.</p>

<h2>The movement</h2>

<p>The 7th of June here in Sweden it became apparent that there were those that
didn&rsquo;t find this comforting at all. On the evening of election day, having
counted a large percentage of the districts, the Pirate Party had gotten 7,1%
of the votes (at the moment of writing 7,31%).<br/>
I&rsquo;m not saying that each and every one of those votes came from the intelligent
and rational people who want to preserve the rights to a protected digital
life, I wouldn&rsquo;t be surprised if there were some who solely voted on the basis
of wanting to preserve their ability to get hold of expensive digital material
for free. On the other hand, there is a whole cast of people who vote for the
social democrats only because they know that with them in power they can count
on more welfare payments (which is one of the main reasons the Swedish economy
was in tatters before the last elections.<br/>
So there are always those who will vote for what some will say are the &ldquo;wrong&rdquo;
reasons, but isn&rsquo;t that what democracy is about?</p>

<p>I am quite pleased to say that I was one of those who voted the party forth.
Last elections to the Swedish parliament I voted for the moderates, mainly
because I found, and still find, them the only party that has a clue how to
handle the economy. The fact that they also support nuclear power and got all
the welfare exploiters back into work has me overjoyed. But when it comes to
the integrity and internet issues I feel the Alliance (as the right oriented
government coalition is called) has totally dropped the ball.</p>

<h2>Why the party is needed</h2>

<p>A blogger recently <a href="http://kozue.wordpress.com/2009/05/22/blablabla-enfrageparti-blablabla/">wrote a response</a> to
a columnist from Swedish Metro who found the
<a href="http://www.dalademokraten.se/Templates/pages/news.aspx?id=70158&amp;epslanguage=sv">Pirate Party and the concept of single-issue parties repulsive</a>
(Swedish), an element that makes democracy more stupid than it should be.
A translation of the reply follows:</p>

<blockquote><p>You get into your house and take off your shoes. You take out a piece of paper<br/>to make a to-do list. Time to get one&#8217;s hands dirty!</p><p>You walk through the apartment and take notes of everything needed to be done.<br/>There&#8217;s a buildup of ice in the freezer, the doorknob to the bathroom is a bit<br/>loose, the oven could use some cleaning, it&#8217;s dusty behind the computer desk,<br/>the laundry basket is broken, the wooden chairs on the balcony need to get<br/>oiled up, the coffee-table has gotten some specks of candle-grease on it, the<br/>TV is on fire, the bathroom mirror has some stains on it, the toilet paper has<br/>almost run out, some bottles are to taken to the recycling station, some<br/>accounts are to be done, a light bulb has gone out in the bedroom, a blind is<br/>broken and the entrance hall really needs a repainting of the walls.</p></blockquote>


<p>So in the words of the blogger, all we pirates want is really to get in, put
out the fire, and then let the guy fix the rest as he pleases. We know that
this guy and his friends have painted entrance halls and cleaned coffee-tables
a thousand times over and we trust he won&rsquo;t do anything extraordinarily stupid
this time over, but if putting the fire out is not his top priority then at
least let us do it.</p>

<h2>A black flag waves</h2>

<p>I think this is nothing but a start. In every file sharer there is a potential
voter for the Pirate Party. In every person who is against American lobbies
poisoning global politics, there is a potential voter for the Pirate Party. In
everyone who finds total surveillance of the digital realm a scary thought,
there is a potential voter for the Pirate Party.</p>

<p>I voted for them now, and I hope that Christian Engström and possibly
(depending on whether she gets into the EU-parliament) Amelia Andersdotter
serve as a different perspective in EU, as the extremists that broaden the
scope.</p>

<p>One can at least have hope.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unreal Tournament 3 + Titan Pack]]></title>
    <link href="http://linduxed.github.io/blog/2009/06/03/unreal-tournament-3-plus-titan-pack/"/>
    <updated>2009-06-03T17:41:28+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/06/03/unreal-tournament-3-plus-titan-pack</id>
    <content type="html"><![CDATA[<p>When Unreal Tournament 3 was officially announced, a wave of mixed feelings
went through the Unreal-community.</p>

<p>UT2004 was essentially everything most people could have ever wanted in terms
of a shooter. Sure, there were going to be UT99 purists who would object to the
style and the zealous Quake gamers who still claim that after Q3 the world
could have stopped spinning, but disregarding people who would never have it
any different than graphically updated clones, UT2004 was a milestone in FPS
gaming. The mechanics were done right, the content was abundant, the community
was sprawling and everything was kept at a impressively high standard. Within
UT2004 we had almost everything we could ask for.</p>

<p>Now I&rsquo;ve only been playing UT3 for the &ldquo;Play UT3 for free!&rdquo;-weekends offered on Steam. Since these have occurred twice I&rsquo;ve got somewhere around 20 hours of total play time. I therefore don&rsquo;t feel entitled to a final opinion, but I want to share my observations.</p>

<!--more-->


<h2>A legacy to live up to</h2>

<p>Throughout the history of culture the successful sequels (any field) have made
us relate to the original, yet find new content to explore. Some sequels have
it very easy because the original was of such high quality that the audience
will settle for &ldquo;more of the same&rdquo;, demanding slight tweaks but retaining very
large parts of the structure. Other sequels might have the privilege to work
with a well received but raw original, providing the liberty to shape and/or
expand in many different directions.</p>

<p>UT3 didn&rsquo;t have the luxury of either of those.</p>

<p>The audience had already seen the Unreal Tournament formula go through three
very different, but still coherent and intertwined, iterations. Most content
(and especially the good one) we already had experienced three times over (some
will argue that UT2003 was not as enjoyable as the other two, I respectfully
disagree). This unfortunately put Epic in the situation where anything (that
I can think of) that would stay true to the UT-franchise will inevitably have
been tried, <em>especially</em> after the monstrous amount of content provided with
UT2004. While &ldquo;more of the same&rdquo; didn&rsquo;t necessarily result in a bad game, it
did make a large part of the audience wonder if they were getting their money&rsquo;s
worth, they already had the provided content in older games (and that&rsquo;s
speaking of UT3+TP, vanilla UT3 must have felt like a rip-off).</p>

<p>Unreal Tournament is a franchise that is very flexible when it comes to play
styles, as long as it&rsquo;s futuristic and creatures kill each other it&rsquo;s
acceptable and in canon. The mentioned opportunity of a &ldquo;raw original&rdquo; (which
in this case would mean the mentioned flexibility) is exploited, but it seems
Epic put a lot more pressure on making small changes and execute those well
than taking risks with new styles of play. This is in no way a bad decision,
but it&rsquo;s a stark contrast to what the release of UT2004 looked like. Both fans
and ordinary gamers were treated with (among other things):</p>

<ul>
<li>Close to every game mode ever introduced in UT (including a mind-blowing
reintroduction of Assault)</li>
<li>The inception of the new game modes like Invasion, Mutant and to a lesser
extent Vehicle-CTF (no maps but the support was there).</li>
<li>This deserves it&rsquo;s own point: Onslaught<br/>
Many saw it feasible to detach this as a separate game.</li>
<li>More maps in a UT-release than we had ever seen, each and everyone sticking
to Epic&rsquo;s tradition of being of the best in the industry.</li>
<li>An improved single player that felt interesting enough to keep you
entertained without multiplayer.</li>
</ul>


<p>With this being only some of the big reasons to buy the <em>initial release</em>
(which excludes the fantastic community and official support the game got
post-release) it got hard for UT3 to live up to the expectations.</p>

<h2>The Good and Bad</h2>

<p>First of all, there are two aspects that basically define the feel of playing
a certain shooter. This sole &ldquo;feel&rdquo; can make or break the game. The two aspects
are the movement and the weapons, in no particular order (because should I want
an order I would need another article explaining my choice). All the other
things come secondary.</p>

<h3>The movement</h3>

<p>The movement is essentially a mix between UT2004 and UT99, double jump is there
but you can&rsquo;t add a jump at the end of a dodge. This meant that the verticality
was preserved but some of the horizontality was lost. UT has always been about
the explosive horizontal movement, which is one of the things that made it so
different Quake 3. This statement will make some upset and have them call upon
the different aspects of bunny jumping and RocketLauncher/PlasmaGun maneuvers.
I will however claim that while these are interesting in their own right, the
dodging mechanic found in UT2004 was something sublime that offered the jerky
and unpredictable maneuvers of the Q3-RocketLauncher both inside the heat of
point black combat, and outside when a chase or escape was present.</p>

<p>I will at some point address why I feel UT is superior to Quake, but I think it
is sufficient to say that removing the dodge-jump removed something important.
Some will object saying that UT3 is with it&rsquo;s lack of a dodge-jump similar in
movement to UT99, but this is very far from the truth; UT99 had
a proportionally higher running speed, which made the game feel a lot faster
than UT3.</p>

<p>It takes some time to get used to, but overall it doesn&rsquo;t feel as interesting,
and it&rsquo;s most definitely slower than any of it&rsquo;s predecessors. With that said,
the maps are perfectly aligned with the movement, so it feels right but it&rsquo;s
not what I wanted.</p>

<p>As a minor note I&rsquo;d like to add that they&rsquo;ve added hover boards which are always
available in the Onslaught equivalent called Warfare, this is a nice touch that
remedies some of the camping on vehicle spawns on those huge maps where going
on foot is simply not feasible.</p>

<h3>The weapons</h3>

<p>I will further down address the graphics and art style a bit more thoroughly
but the first thing you notice about the weapons is that they look
unnecessarily contrived. There are more details than you can count, and while
it&rsquo;s never really distracting, a lot of people will prefer the simpler models
shown in previous installments of UT (that might just be nostalgia speaking,
who knows). The feel of the weapons is an improvement however. It seems the
small tweaks added make the weapons feel fresh again, even though we&rsquo;ve had
most of them for four games now (the flak cannon in Unreal was a beast&hellip;).
A quick rundown:</p>

<ul>
<li>Impact hammer has taken the shield gun&rsquo;s place. I understand that some have
gripes with the shield, and I do find this hammer very nice. Sound, visuals
and the power, love them. They didn&rsquo;t however need to make the secondary
attack completely worthless (knocking off powerups with melee anyone?).</li>
<li>The fan favourite Enforcer is back and unfortunately it feels wimpier. This
is sad because the reason people wanted it back was because the UT99
enforcers were monsters, dealing solid damage with good accuracy. This is
better than the Assault Rifle, but it&rsquo;s not the real deal.</li>
<li>The Bio Gun is easier to hit with now, and charged blobs of goo don&rsquo;t make
instant damage, but drains depending on the size of the blob. A welcome
change to one of my favourite weapons.</li>
<li>The Shock Rifle now has harder to hit shock cores, other than that it&rsquo;s the
same thing.</li>
<li>Link Gun is the same deal, although at first, second and third glance it
seemed as Epic had dropped linking. Apparently you have to stand really close
to each other for linking to work. Linking was mainly used in Onslaught so
this change is trivial for me.</li>
<li>The Stinger Minigun is very nice. Sound, visuals and fire modes are all top
notch.</li>
<li>The Flak Cannon seem to fire more shrapnel in a wider spread, and the shells
seem to do more damage. More versatile than ever.</li>
<li>Sniper Rifle&hellip; What can I say? I liked the Lightning Gun, apparently others
didn&rsquo;t.</li>
</ul>


<p>The rest of the weapons are basically the same, nothing special. Overall it&rsquo;s
a mixed bag of changes, but nothing is messed up, and some changes are very
nice so the weapons are fine.</p>

<h3>Gamemodes</h3>

<p>Warfare is basically Onslaught with hoverboards and the ability to capture
nodes instantly with orbs that any player can pick up in their base. An
interesting addition, but nothing special, the games seems to flow the same way
(except on smaller maps when a lot of uncalled for captures occur, IOW love or
hate scenarios). The new vehicles are different but for the most parts nothing
game changing. They are now divided into the Axon (basically the ones found in
UT2004) and the Necris (which are totally different, it&rsquo;s really a question of
trying them out yourself).<br/>
The addition of special events linked to special nodes is a very interesting
twist however.</p>

<p>Deathmatch, Team Deathmatch, Capture the Flag, Vehicle Capture the Flag and
Duel I feel no need to cover because all thing necessary to say have been in
&ldquo;Movement&rdquo;, &ldquo;Weapons&rdquo; or in the short Warfare paragraph.</p>

<p>Then we have Greed (which is nothing but a straight incorporation of the UT2004
mod) and Betrayal, with the latter being such an amazing game mode it has not
only had me thinking about purchasing the game just for this one game mode, it
has also motivated me to start learning UnrealScript so I can port it to
UT2004. It&rsquo;s just that much fun.</p>

<p>Finally there&rsquo;s also a handy new mutator that can really mix up the existing
game modes called the Titan mutator, which can turn any mode into something
completely new. A good addition.</p>

<h3>Graphics and artstyle</h3>

<p>Graphics set to max are nothing but jaw dropping. Period.<br/>
I was also pleased to find that it scaled the graphics on the fly quite nicely,
so what I would expect to lag horribly on my laptop, turned out to run very
well.</p>

<p>The sceneries are rich on details, which at times shifts from being atmospheric
to being cluttered and overloaded. The claim that the characters have an
uncanny resemblance of Gears of War is to a large extent true. Overall I found
the characters to be impressive, but not as interesting as the ones found in
UT2004 were.</p>

<p>The maps are as mentioned well designed, and the artwork here is spot on. Some
of the maps were so beautiful and so amazingly designed it absolutely blew my
mind. Epic are still the ones who provide the best maps in the industry.</p>

<h3>Verdict</h3>

<p>We are treated with unspeakable amounts of FPS games lately, but when it comes
to multiplayer which today is where the games&#8217; true lifespan lies, only a few
companies know how to do it right. The Battlefield series is one setting, the
Halo series is another, but in the end it&rsquo;s the futuristic arena combat
introduced by Unreal Tournament and Quake 3 that showed me what real
multiplayer FPS should look like.</p>

<p>UT3 might not be the best game in the series, and it comes in a time where it
is no longer as unique as UT2004 was when it came out, but one needs not to be
outstanding to be good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why American humour doesn't humour me]]></title>
    <link href="http://linduxed.github.io/blog/2009/06/02/why-american-humour-doesnt-humour-me/"/>
    <updated>2009-06-02T22:11:24+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/06/02/why-american-humour-doesnt-humour-me</id>
    <content type="html"><![CDATA[<p>I went to see Dylan Moran yesterday.<br/>
I was quite hesitant at first to order the ticket, having two exams the same
week. In retrospect however, I would never be able to forgive myself for not
taking the opportunity to see my favorite comedian, bar none.</p>

<!--more-->


<p>Me and my friend <a href="http://www.pinheadlounge.com/FreddyBoy">FreddyBoy</a> (with whom
I went to see the performance) are the type of people who have seen the
<a href="http://www.imdb.com/title/tt0262150/">Black Books series</a> somewhere around
four times over, and we&rsquo;ve both lost count on how many times we&rsquo;ve seen the
standups <a href="http://youtu.be/HNAh9_BPBFk">Like, Totally</a> and <a href="http://youtu.be/lpkiIaFv5As">Monster</a> (playlist). This inevitably made us wonder whether
we would have to sit through an amalgamation of all the punchlines we knew by
heart, even though this was a part of a new tour called <a href="http://youtu.be/hieTxQ0oJPc">What it is</a> (<strong>EDIT</strong>: link added).</p>

<p>All my hesitation was gone within the first few minutes, and I was quickly
reminded why Black Books was the first TV-series that had me laughing into
pain. I spent a bit more than two hours listening to witty sarcasm and
interesting views of our everyday lives, and I just kept wanting more. The main
theme was what a person is to believe in, in this turbulent world of ours.
Science, religion and politics were discarded in favor of pleasure. Naturally,
the performance took different directions at times, which only served to make
the show more interesting.</p>

<p>Dylan Moran is a master of comedy. What puts him among the legends is the
unpredictability and his lapidary way of portraying the world around him.<br/>
The first mentioned trait is what has made me stop appreciating and literally
avoid American comedy. Often I both know every word that is going to be said,
and how it is going to be said. Indeed it might have been entertaining the
first or second time, but that&rsquo;s where it ends.</p>

<p>Brittish comedy often challenges the audience, asks it to try to keep up with
the twists and turns created by the authors. Unpredictability creates interest
because it gives us something to explore. But what if the world explored is
a bland one? That is where Moran is able to use a few select words to
exaggerate it into a caricature which grabs your attention, seemingly out of
nowhere.</p>

<p>No matter how much I love this man&rsquo;s work however, I have to point out that it
seems the ones sharing my taste are rather few. The majority of friends I&rsquo;ve
shown Moran&rsquo;s work for have sat for lengthy amounts of time wondering where the
fun is to be had. Take it as both a warning and an invitation.</p>

<p>When Moran is speaking, I listen. You should too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Vista - No gaming ; Hate Vista - Love gaming]]></title>
    <link href="http://linduxed.github.io/blog/2009/05/29/no-vista-no-gaming-hate-vista-love-gaming/"/>
    <updated>2009-05-29T04:02:16+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/05/29/no-vista-no-gaming-hate-vista-love-gaming</id>
    <content type="html"><![CDATA[<p>In my last entry I described my nocturnal attempts at installing an OS. After
a little closer reflection, I shouldn&rsquo;t have been so quick to blame the distros
for dodgy discs and weird installs, sleep depravity and lack of will to fix
issues (which were bound to arise) don&rsquo;t give you privileges to fling poo at
good OSs.</p>

<!--more-->


<p>Now, I&rsquo;ve grown used to certain things when it comes to GNU/Linux, one of the
most prominent being that certain hardware takes some work to get working. I&rsquo;ve
got a rather new sound card, that causes problems. My wireless card was also
quite problematic (as in wasn&rsquo;t compatible) until the 2.6.28 kernel.<br/>
This is quite explainable, there&rsquo;s rarely official support so the more
ambitious geeks around the world hero-code, so that we have anything at all.
A remarkable job is done in this respect.</p>

<p>This leads me to be thoroughly pissed when a certain OS gets treated with
official drivers to every damn component in a computer and still doesn&rsquo;t work
as intended.</p>

<p>After the events described in the last entry, with some magic tools I recovered
the most necessary files out of the Windows partition, and decided to reinstall
the system. Not the most thrilling task I could have imagined but what&rsquo;s
a gamer got to do?</p>

<h2>The install, and some love for Vista</h2>

<p>Before I go into the details of my setting up my game station, I&rsquo;d like to point out that Acer made me a real favour when I bought the laptop:</p>

<p>The only Windows version that has full driver support for this computer turns out to be Vista.</p>

<p>Truly, I couldn&rsquo;t be more thankful, because what the hell else would manage to
force me into the &ldquo;next generation&rdquo; of Microsoft&rsquo;s flagship products? I&rsquo;m quite
sure I wouldn&rsquo;t have done it voluntarily. So in my case, I was installing Vista
Business 64.</p>

<p>I could elaborate on my issues with Vista, but would I have done so the site
would most likely close after one or two visitors; I have monthly bandwidth cap
at 125 GB. I&rsquo;ll write a summary at some point however.</p>

<p>The installation of the system itself was thankfully straightforward, but
that&rsquo;s where the fun stopped. Ubuntu is in a way forced to have an absolutely
stellar auto detection of hardware, to avoid having Windows converts shit their
breeches at the prospect of actually doing anything with their new system.</p>

<p>Microsoft on the other hand is in no way forced to do any drivers whatsoever,
that is left to the hardware vendors. This is not something one can hold
against them, with drivers for Windows having preposterous sizes these days,
you wouldn&rsquo;t have space for anything else on a DVD, especially an OS as space
&ldquo;efficient&rdquo; as Windows.<br/>
Some might now argue they should at least be treated with proper default
drivers with all the space the OS takes&hellip;</p>

<p>&ldquo;At the expense of what?&rdquo; says linduxed in a sarcastic voice.<br/>
&ldquo;A fresh install of Vista takes roughly 16 GB of disk space, at such a miniscule size it has to be chock-full of crucial code! How would you fit said drivers? You know that you only have the space of a DVD to install from, right?</p>

<p>What would you cut?<br/>
With such a delicate and cutting edge system you&rsquo;d have to make some big
decisions! What would Vista be without the <code>do_nothing_loop()</code> methods? Or the
<code>hang_system()</code> calls? Would you seriously dare to boot up your computer if you
knew that Microsoft decided to cut the <code>do_some_stuff()</code> method?<br/>
Proper default drivers are simply not feasible, and hearing some people
suggesting that an OS should have applications included to actually be able to
do something with the god damn thing is preposterous.&#8221;</p>

<h4>Returning to the installation&hellip;</h4>

<p>So as soon as the system was installed I was greeted with a slow and stone
age-resolution touting desktop. I came prepared however, and plugged in my
USB-drive, which I had previously filled with drivers. It is worth to mention
that these were the official drivers, downloaded from the Acer website.</p>

<p>Having installed some Windows systems by now, I knew that some drivers are
arrogant pricks, which absolutely demand that no other drivers are installed
before reboot. If I don&rsquo;t listen to them, I&rsquo;ll end up with anything between the
driver not installing at all, and not being able to shutdown properly.<br/>
I counted four pricks, three annoying bastards, and the rest (close to ten)
were of the nicer kind. This led to about five or six guaranteed reboots, and
then came the unforeseen ones on top of that.</p>

<p>The ones which were in a particularly fickle mood were the sound and graphics
drivers. Both thought getting installed was such a thrill they demanded to go
through the ride three times each, every time craving a reboot. I wasn&rsquo;t in the
mood for more, and apparently the web cam interpreted the grinding of teeth as
a sign to have mr. Sound and mr. Graphics to stop dicking around.</p>

<h2>Concluding</h2>

<p>I lost count of all the reboots, but in the end that doesn&rsquo;t matter, because
after the installation of drivers I still had &ldquo;features&rdquo; to turn off (UAC,
anyone?), applications to install and settings to set up. That is however not
really a part of the installation itself in my opinion.</p>

<p>I&rsquo;m past it now and have gotten my games to work, but I know that it&rsquo;s just
a matter of time before I&rsquo;ll bump into this process again. When I move to
Windows 7 (and I will, I doubt it can get worse than Vista), I suspect I&rsquo;ll
have the same issues.</p>

<p>I guess another rant will be needed at that time then.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Late night OS adventures]]></title>
    <link href="http://linduxed.github.io/blog/2009/05/26/late-night-os-adventures/"/>
    <updated>2009-05-26T22:30:23+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/05/26/late-night-os-adventures</id>
    <content type="html"><![CDATA[<p>So it was a late night, a day or so after the 23rd of April, Jaunty had just
been released. I was very excited because I had been using Intrepid for
a while, and I wasn&rsquo;t as satisfied with it as I was with Hardy; an upgrade felt
like a nice thing to do. It turned out that Jaunty had some issues that I at the
time felt relatively unmotivated to solve, most notably <a href="http://linduxed.github.io/blog/2009/05/24/sound-in-ubuntu-9-dot-04-on-acer-aspire-8930g/">no sound</a> and an
<a href="http://linduxed.github.io/blog/2009/05/25/getting-awesome-3-dot-x-in-ubuntu-9-dot-04/">inability to install Awesome</a>.</p>

<p>Perfect reason to start distrohopping.</p>

<!--more-->


<h2>3 x Linux vs. Eyelids</h2>

<p>Debian was first up. I burned a stable Lenny ISO, rebooted, turned out i burned
a dodgy CD, wouldn&rsquo;t boot.<br/>
I instantly decided that I didn&rsquo;t care for Debian since it wouldn&rsquo;t boot,
making it the most uncalled for discarding of a piece of software this year.</p>

<p>Next up was Intrepid, mainly because it worked to a larger extent than Jaunty.
Obviously, the tired linduxed decided after a quick installation that getting
the sound to work in Intrepid would not be fun (despite knowing that it would
need tweaking regardless of distro), so Intrepid was also discarded.</p>

<p>Two systems in less than an hour, both cases making no sense whatsoever; that
must be a record of some sort.</p>

<p>Next up was Arch. I really like this system, but I should have known better
than setting up an OS pretty much from scratch when I was so tired I had
trouble locating my hands.</p>

<p>I somehow managed to progress all the way up to the partitioning stage, which in retrospect I can&rsquo;t decide if it was a good or a bad thing.<br/>
I came to the reasonable conclusion that having both a /home-partition and
a /-partition might be superior to just having a /-partition. What was not as
reasonable was to start formatting partitions and editing individual cylinder
values while my brain tried to make it clear to me that the numbers and letters
had transformed into hamburgers and frisbees.</p>

<p>This basically lead to corrupting the entire partition table, which made me call it a day.</p>

<h3>Stroke of luck</h3>

<p>The next morning I could confirm that I had no systems to boot into and that my brain was still in the mood for illogical decisions:</p>

<p>It was time to install Jaunty again!</p>

<p>Why? Because this time everything was going to work, I said to myself.
A generously flawed assumption, but it turns out I was right. Apparently Ubuntu
seeks to comfort Windows converts by being just as unpredictable, all the
issues I had in the previous install of Jaunty seemed to fix themselves, an
interesting feat indeed.</p>

<p>So the distrohopping ended happily, but what happened to Windows? A geek has to
game right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Awesome 3.x in Ubuntu 9.04]]></title>
    <link href="http://linduxed.github.io/blog/2009/05/25/getting-awesome-3-dot-x-in-ubuntu-9-dot-04/"/>
    <updated>2009-05-25T17:19:06+02:00</updated>
    <id>http://linduxed.github.io/blog/2009/05/25/getting-awesome-3-dot-x-in-ubuntu-9-dot-04</id>
    <content type="html"><![CDATA[<p>Awesome is awesome. That simple. The 3.x series introduced a tray which removed
all hesitation and made Awesome the WM of choice for me. Unfortunately for
Ubuntu users (which for the time being includes me) the official repositories
are quite outdated:</p>

<!--more-->




<blockquote><p>&#8230;</p><p>In contrast to pre-release versions, official releases of Ubuntu are subject to<br/>much wider use, and by a different demographic of user. During development,<br/>changes to the distribution primarily affect developers, early adopters and<br/>other advanced users, all of whom have elected to use pre-release software at<br/>their own risk.</p><p>Users of the official release, in contrast, expect a high degree of stability.<br/>They use their Ubuntu system for their day-to-day work, and problems they<br/>experience with it can be extremely disruptive. Many of them are less<br/>experienced with Ubuntu and with Linux, and expect a reliable system which does<br/>not require their intervention.</p><p>&#8230;</p><footer><strong>Ubuntu package policy</strong> <cite><a href='http://wiki.ubuntu.com/StableReleaseUpdates'>wiki.ubuntu.com/&hellip;</a></cite></footer></blockquote>


<p>That in other words means that anyone suggesting the introduction of new
versions of existing packages has to pass the hurdle of &ldquo;is this a stability
release or a feature release?&rdquo;. This is why the 3.x series, though superior in
most ways to 2.x, will wait until Karmic Koala before it will be incorporated
into Ubuntu&rsquo;s repositories.</p>

<p>With that said, there are two ways of getting Awesome 3.x installed onto
Jaunty. The first one is using a PPA and the other one is compiling from
source.</p>

<h2>Using a PPA</h2>

<p>This is the easiest method, because not only does it eliminate the search for
dependencies but it is also a method that is tested to work with Jaunty (to the
extent of the PPA maintainers ability of course).</p>

<p>To install from the PPA you must first add it. The PPA we&rsquo;re going to use
belongs to <a href="https://launchpad.net/~aguignard/+archive/ppa">Arnaud Guignard and lies here</a>. If you have never added a PPA
then <a href="http://www.youtube.com/watch?v=UUZOQsNo_ws">this YouTube video</a> will
explain how to do it quite thoroughly; written instructions can be found
<a href="http://help.launchpad.net/Packaging/PPA#Adding%20a%20PPA%20to%20your%20Ubuntu%20repositories">here</a>.</p>

<p>After adding the repository, simply type the following command:</p>

<pre><code>sudo aptitude install awesome
</code></pre>

<p>This should get you at the time of writing the <code>3.2.1-1~ppa1</code> version of
Awesome. All you need to do is log out and choose Awesome as the session to use
in in your desktop manager (<code>gdm</code>, <code>kdm</code> or whatever you use).</p>

<h2>Compiling from git</h2>

<p>This method I personally don&rsquo;t recommend, simply because using the PPA is so
much easier and it should work flawlessly. With that said, I suspect that most
people who use Awesome in Ubuntu compile it to get the latest
version, so it&rsquo;s by no means a bad way to do it.</p>

<p>A thing to take note of is that this will most likely screw up your package
manager, because we might be overwriting packages and at times installing
packages that are newer than the ones in the repositories. If at some point you
install some package that overwrite your manually installed files, tough, you
should have used the PPA.</p>

<p>With that out of the way, the instructions I used to install the latest
checkout are located on the <a href="http://ubuntuforums.org/showthread.php?t=960841">Ubuntu forums</a>, it&rsquo;s basically a step by step guide.</p>

<p>The only thing I&rsquo;d like to add is that there is a nice way of remedying at
least some of the problems associated with compiling and doing <code>sudo make
install</code>, and it&rsquo;s the marvelous utility called <code>checkinstall.</code> First you need
to run the following command to obtain it:</p>

<pre><code>sudo aptitude install checkinstall
</code></pre>

<p>After that, whenever the you are asked to do the classic <code>./configure &amp;&amp; make
&amp;&amp; sudo make install</code>, substitute the <code>sudo make install</code> with <code>sudo
checkinstall</code>.</p>

<p>This will instead of dropping files outside of the package manager, build
a <code>.deb</code> that can then be installed (thus eliminating some problems). This
doesn&rsquo;t always work (for reasons I can&rsquo;t explain) but it is a wholesome way of
installing when it does. A more detailed guide to <code>checkinstall</code> can be found
<a href="http://help.ubuntu.com/community/CheckInstall">here</a>.</p>
]]></content>
  </entry>
  
</feed>
